@from bintrees import *

pool: <testedTree> 1
pool: <referenceTree> 1
pool: <tree> 5 REF
pool: <slice> 5 REF
pool: <val> 10

<val> := <[1..20]>

# replace these as needed
init: <testedTree> = FastRBTree
init: <referenceTree> = AVLTree

<tree> := <testedTree>()

not <tree,2>.is_empty() -> <tree> := <tree>.copy()

<tree>.clear()

len(<tree>)
<tree>.is_empty()

repr(<tree>)

<tree>.insert(<val>,<val>)
<tree> [<val>] = <val>

<tree>.discard(<val>)

<val> in <tree>

<val,1> in <tree,1> -> <tree> [<val>]
<val,1> in <tree,1> -> del <tree> [<val>]
del <tree> [<val> : <val>]

<slice> := <tree> [<val> : <val>]

<val,1> in <slice,1> -> <slice> [<val>]
<val> in <slice>

not <tree,1>.is_empty() -> min(<tree>)
not <tree,1>.is_empty() -> max(<tree>)

<tree>.get(<val>,None)
<tree>.pop(<val>,None)

# can't test pop_item since different trees return different values
#not <tree,1>.is_empty() -> <tree>.pop_item()


reference: testedTree ==> referenceTree
compare: len
compare: is_empty
compare: in\
compare: min
compare: max
compare: get
compare: pop\(
