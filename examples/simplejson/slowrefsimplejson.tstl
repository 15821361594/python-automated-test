@import simplejson as json
@import math
@import copy

source: /usr/local/lib/python2.7/site-packages/simplejson/__init__.py
source: /usr/local/lib/python2.7/site-packages/simplejson/encoder.py
source: /usr/local/lib/python2.7/site-packages/simplejson/decoder.py

<@
MAXDEPTH = 15

def klimitequal(o1,o2,k=0,klimit=MAXDEPTH):
    if k > klimit:
        return True
    if type(o1) != type(o2):
        return False
    if type(o1) == list:
        if len(o1) != len(o2):
            return False
        for i in xrange(0,len(o1)):
            if i > k:
                return True
            if not klimitequal(o1[i],o2[i],k+1):
                return False
    elif type(o1) == dict:
        for v in o1.keys():
            if v not in o2.keys():
                return False
            if not klimitequal(o1[v],o2[v],k+1):
                return False
    else:
        return o1 == o2

def isCircular(s,depth=0,seen = []):
    if depth > MAXDEPTH:
        return True
    for v in seen:
        if klimitequal(s,v):
            return True
    newSeen = seen + [s]
    if type(s) == list:
        for v in s:
            if isCircular(v,depth+1,newSeen):
                return True
    if type(s) == dict:
        for v in s.values():
            if isCircular(v,depth+1,newSeen):
                return True
    return False

def stringifyNans(s):
    if type(s) == float:
        if math.isnan(s):
            return "!nan!"
        else:
            return s
    if type(s) == list:
        return map(stringifyNans, s)
    if type(s) == dict:
        return {k: stringifyNans(v) for k, v in s.items()}
    return s

def ignoreNans(s):
    if type(s) == float:
        if math.isnan(s) or (s == float("Inf")) or (s == float("-Inf")):
            return None
        else:
            return s
    if type(s) == list:
        return map(ignoreNans, s)
    if type(s) == dict:
        return {k: ignoreNans(v) for k, v in s.items()}
    return s

def replaceNones(s):
    if s == "none":
        return None
    if type(s) == list:
        return map(replaceNones, s)
    if type(s) == dict:
        return {k: replaceNones(v) for k, v in s.items()}
    return s
@>

pool: <int> 3
pool: <string> 5
pool: <float> 5
pool: <bool> 2

pool: <list> 5
pool: <dict> 5
pool: <tuple> 5

pool: <structure> 4

pool: <istring> 3
pool: <ilevel> 3

pool: <lsep> 1
pool: <rsep> 1

pool: <jsonpair> 5

pool: <circularjson> 1

<int> := <[0..9]>
<int> = <int> * 10
<int> = <int> + <int>

<string> := ""
<string> += <["a","b"," ",":","\\","/","[","]","{","}"]>
<string> += ","
<string> += chr(9) #tab
<string> += chr(13) #return
<string> += chr(34) #double quote
<string> += chr(39) #single quote

<float> := float(<int>)
#{ZeroDivisionError} <float> = <float> / <float> # Removed due to float round issues
<float> := float("Inf")
<float> := float("-Inf")
<float> := float("NaN")

<bool> := True
<bool> := False

# Ciruclar structures cannot be handled, so avoid them

<list> := []
(not isCircular(<list,1>)) and (not isCircular(~<structure,1>)) -> ~<list>.append(~<structure>)

<dict> := {}
(not isCircular(<dict,1>)) and (not isCircular(~<structure,1>)) -> ~<dict> [<string>] = ~<structure>

# if we build a circular structure, ok to get rid of it and start over
isCircular(<structure,1>) -> <structure> = None

<structure> := <int>
<structure> := <string>
<structure> := <float>
<structure> := <bool>
<structure> := <list>
<structure> := <dict>
<structure> := "none" # TSTL doesn't like None in a pool

<istring> := ""
~<istring> += " "
~<istring> += chr(9) # tab
~<istring> += chr(13) # return

<ilevel> := <[0..5]>

<lsep> := ","
~<lsep> += <istring>
~<lsep> = <istring> + ~<lsep>

<rsep> := ":"
~<rsep> += <istring>
~<rsep> = <istring> + ~<rsep>

{ValueError} not isCircular(<structure,1>) -> <jsonpair> := (json.dumps(replaceNones(<structure>),allow_nan=False), copy.deepcopy(replaceNones(<structure,1>)))
# Lets us get rid of these, since they don't have any actions to use them
<jsonpair> = None

# only for circular, so should never actually work
{ValueError} isCircular(<structure,1>) -> <circularjson> := json.dumps(replaceNones(<structure>))
# property asserts we never have a circularjson
property: <circularjson> == None

# If you did a possibly failing (no NaNs) dumps, check round trip; we know there are no NaNs!
property: json.loads(<jsonpair> [0]) == <jsonpair,1> [1]

# The bulk of the testing is done here:  very slow, but tries all the basic combinations of call values one very single generated structure and checks round trip
property: isCircular(<structure,1>) or (stringifyNans(json.loads(json.dumps(replaceNones(<structure>)<,[,sort_keys=True,,],><,[,ensure_ascii=False,,],><,[,check_circular=False,,],><,[,use_decimal=False,,],><,[,tuple_as_array=False,,],><,[,iterable_as_array=False,,],><,[,indent=<istring>,,,indent=<ilevel>,,],><,[,separators=(<lsep> , <rsep>),,],>)<,[,use_decimal=True,,],>)) == stringifyNans(replaceNones(<structure,1>)))

# If we are ignoring nans, need to filter them out of the structure for round trip check
property: isCircular(<structure,1>) or (ignoreNans(json.loads(json.dumps(replaceNones(<structure>),ignore_nan=True<,[,sort_keys=True,,],><,[,ensure_ascii=False,,],><,[,check_circular=False,,],><,[,use_decimal=False,,],><,[,tuple_as_array=False,,],><,[,iterable_as_array=False,,],><,[,indent=<istring>,,,indent=<ilevel>,,],><,[,separators=(<lsep> , <rsep>),,],>)<,[,use_decimal=True,,],>)) == ignoreNans(replaceNones(<structure,1>)))
