@import bidict
@from bidict import ValueDuplicationError

pool: <bidict> 5
pool: <value> 5

pool: <int> 5
pool: <string> 5
pool: <tuple> 5

pool: <updates> 5

<int> := <[1..20]>

<string> := ''
<string> += <['a'..'z']>
<string> += <string>

<tuple> := (<value>,<value>)
<tuple> := (<value>,<value>,<value>)

<updates> := []
<updates>.append((<value>,<value>))

<value> := <int>
<value> := <string>
<value> := <tuple>

<bidict> := bidict.bidict()
<bidict> := bidict.loosebidict()
<bidict> := bidict.orderedbidict()
<bidict> := <bidict>.copy()

{ValueDuplicationError} <bidict> [<value>] = <value> # UNSAFE
<value,2> not in <bidict,1>.inv -> <bidict> [<value>] = <value>

{ValueDuplicationError} <bidict>.inv [<value>] = <value> # UNSAFE
<value,2> not in <bidict,1> -> <bidict>.inv [<value>] = <value>

<value> in <bidict>
<value> in <bidict>.inv

<bidict>.keys()
<bidict>.inv.keys()

<bidict>.values()
<bidict>.inv.values()

<bidict> == <bidict>
<bidict> != <bidict>

{KeyError} <bidict>.pop(<value>) # UNSAFE
<value,1> in <bidict,1> -> <bidict>.pop(<value>)

{KeyError} del <bidict> [<value>] # UNSAFE
<value,1> in <bidict,1> -> del <bidict> [<value>]

<bidict>.forceput(<value>,<value>)
<bidict>.inv.forceput(<value>,<value>)

{ValueDuplicationError} <bidict>.update(<bidict>)
{ValueDuplicationError} <bidict>.update(<updates>)

<bidict>.forceupdate(<bidict>)
<bidict>.forceupdate(<updates>)

<bidict>.clear()
