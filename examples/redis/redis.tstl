@import redis

init: r = redis.StrictRedis(host='localhost', port=6379, db=0); r.flushall()

finally: <pubsub>.close()

pool: <r> 5

pool: <string> 5
pool: <int> 5
pool: <list> 5
pool: <set> 5
pool: <tuple> 5
pool: <dict> 5

pool: <key> 5
pool: <val> 5

pool: <dump> 5

pool: <pubsub> 5
pool: <channel> 5
pool: <pattern> 5

pool: <pipe> 5

pool: <database> 5

<string> := ""
<string> += <['a'..'z']>
<string> += chr(<[0..255]>)

<int> := <[0..9]>
<int> *= 10
<int> += <int>

<list> := []
<list>.append(<val>)

<set> := set([])
<set>.add(<string>)
<set>.add(<int>)


<tuple> := (<val>,<val>)
<tuple> := (<val>,<val>,<val>)

<dict> := {}
<dict>[<key>] = <val>

<key> := <string>
<key> := <int>

<val> := <string>
<val> := <int>
<val> := <list>
<val> := <set>
<val> := <tuple>

<database> := <[0..15]>

<r> := redis.StrictRedis(host='localhost', port=6379, db=<database>)

#dicts and basic operations on store
<r>.set(<key>,<val>)
{redis.exceptions.ResponseError} <r>.get(<key>)
<r>.delete(<key>)
<dump> := <r>.dump(<key>)
<r>.exists(<key>)
<r>.expire(<key>,<int>)
<r>.keys()
{redis.exceptions.ResponseError} <r>.move(<key>,<database>)
<r>.persist(<key>)
<r>.pexpire(<key>,<int>)
<r>.pttl(<key>)
<key> := <r>.randomkey()
{redis.exceptions.ResponseError} <r>.rename(<key>,<key>)
{redis.exceptions.ResponseError} <r>.renamenx(<key>,<key>)
{redis.exceptions.ResponseError} <r>.restore(<key>,<int>,<dump>)
{redis.exceptions.ResponseError} <r>.sort(<key>)
#<r>.touch(<key>) -- no support in redis-py
<r>.ttl(<key>)
<r>.type(<key>)
#<r>.unlink(<key>) -- no support in redis-pu
(<int,2> > 0) and (<int,2> < 3) -> <r>.wait(<int>,<int>)

#lists
{redis.exceptions.ResponseError} (<int,1> > 0) and (<int,1> < 3) -> <r>.blpop(<string>,<int>) # can't take int keys for some reason...
{redis.exceptions.ResponseError} (<int,1> > 0) and (<int,1> < 3) -> <r>.brpop(<string>,<int>) # same
{redis.exceptions.ResponseError} (<int,1> > 0) and (<int,1> < 3) -> <r>.brpoplpush(<key>,<key>,<int>)
{redis.exceptions.ResponseError} <val> := <r>.lindex(<key>,<int>)
{redis.exceptions.ResponseError} <val> := <r>.linsert(<key>,"before",<val>,<val>)
{redis.exceptions.ResponseError} <val> := <r>.linsert(<key>,"after",<val>,<val>)
{redis.exceptions.ResponseError} <r>.llen(<key>)
{redis.exceptions.ResponseError} <r>.lpop(<key>)
{redis.exceptions.ResponseError} <r>.lpush(<key>,<val>)
{redis.exceptions.ResponseError} <r>.lpushx(<key>,<val>)
{redis.exceptions.ResponseError} <list> := <r>.lrange(<key>,<int>,<int>)
{redis.exceptions.ResponseError} <r>.lrem(<key>,<int>,<val>)
{redis.exceptions.ResponseError} <r>.lset(<key>,<int>,<val>)
{redis.exceptions.ResponseError} <r>.ltrim(<key>,<int>,<int>)
{redis.exceptions.ResponseError} <r>.rpop(<key>)
{redis.exceptions.ResponseError} <r>.rpoplpush(<key>,<key>)
{redis.exceptions.ResponseError} <r>.rpush(<key>,<val>)
{redis.exceptions.ResponseError} <r>.rpushx(<key>,<val>)

#sets
{redis.exceptions.ResponseError} <r>.sadd(<key>,<val>)
{redis.exceptions.ResponseError} <r>.scard(<key>)
{redis.exceptions.ResponseError} <r>.sdiff(<key>,<key>)
{redis.exceptions.ResponseError} <r>.sdiffstore(<key>,<key>,<key>)
{redis.exceptions.ResponseError} <r>.sinter(<key>,<key>)
{redis.exceptions.ResponseError} <r>.sinterstore(<key>,<key>,<key>)
{redis.exceptions.ResponseError} <r>.sismember(<key>,<val>)
{redis.exceptions.ResponseError} <r>.smembers(<key>)
{redis.exceptions.ResponseError} <r>.smove(<key>,<key>,<val>)
{redis.exceptions.ResponseError} <r>.spop(<key>)
{redis.exceptions.ResponseError} <r>.srandmember(<key>)
{redis.exceptions.ResponseError} <r>.srandmember(<key>,<int>)
{redis.exceptions.ResponseError} <r>.srem(<key>,<val>)
{redis.exceptions.ResponseError} <r>.sunion(<key>,<key>)
{redis.exceptions.ResponseError} <r>.sunionstore(<key>,<key>,<key>)

#hashes
{redis.exceptions.ResponseError} <r>.hdel(<key>)
{redis.exceptions.ResponseError} <r>.hexists(<key>,<key>)
{redis.exceptions.ResponseError} <r>.hget(<key>,<key>)
{redis.exceptions.ResponseError} <r>.hgetall(<key>)
{redis.exceptions.ResponseError} <r>.hincrby(<key>,<key>,<int>)
{redis.exceptions.ResponseError} <r>.hincrbyfloat(<key>,<key>,<int>)
{redis.exceptions.ResponseError} <r>.hkeys(<key>)
{redis.exceptions.ResponseError} <r>.hlen(<key>)
{redis.exceptions.ResponseError} <r>.hmget(<key>,<key>,<key>)
#{redis.exceptions.ResponseError} <r>.hmset(<key>,<key>,<val>)
{redis.exceptions.ResponseError} <r>.hset(<key>,<key>,<val>)
{redis.exceptions.ResponseError} <r>.hsetnx(<key>,<key>,<val>)
#{redis.exceptions.ResponseError} <r>.hstrlen(<key>,<key>)
{redis.exceptions.ResponseError} <r>.hvals(<key>)

#server commands
<r>.dbsize()
<r>.flushdb()
<r>.flushall()
<r>.info()

#publish/subscribe

<channel> := <string>
<pattern> := <string>
<pattern> := <pattern> + "*"
<pattern> := "*" + <pattern>

<r>.publish(<channel>,<val>)

<pubsub> := <r>.pubsub()
<pubsub>.subscribe(<channel>)
<pubsub>.subscribe(<pattern>)
{AttributeError} <pubsub>.get_message()
<pubsub>.unsubscribe()
<pubsub>.unsubscribe(<channel>)
<pubsub>.unsubscribe(<pattern>)
<pubsub>.close() # without close, overwhelms FDs quickly; with close, overwhelms eventually

#from here on, use pipes in place of connections
<pipe> := <r>.pipeline()
{redis.exceptions.ResponseError} <pipe>.execute()

#dicts and basic operations on store
<pipe>.set(<key>,<val>)
{redis.exceptions.ResponseError} <pipe>.get(<key>)
<pipe>.delete(<key>)
<pipe>.dump(<key>)
<pipe>.exists(<key>)
<pipe>.expire(<key>,<int>)
<pipe>.keys()
{redis.exceptions.ResponseError} <pipe>.move(<key>,<database>)
<pipe>.persist(<key>)
<pipe>.pexpire(<key>,<int>)
<pipe>.pttl(<key>)
<pipe>.randomkey()
{redis.exceptions.ResponseError} <pipe>.rename(<key>,<key>)
{redis.exceptions.ResponseError} <pipe>.renamenx(<key>,<key>)
{redis.exceptions.ResponseError} <pipe>.restore(<key>,<int>,<dump>)
{redis.exceptions.ResponseError} <pipe>.sort(<key>)
#<pipe>.touch(<key>) -- no support in redis-pu
<pipe>.ttl(<key>)
<pipe>.type(<key>)
#<pipe>.unlink(<key>) -- no support in redis-pu
(<int,2> > 0) and (<int,2> < 3) -> <pipe>.wait(<int>,<int>)

#lists
{redis.exceptions.ResponseError} (<int,1> > 0) and (<int,1> < 3) -> <pipe>.blpop(<string>,<int>) # can't take int keys for some reason...
{redis.exceptions.ResponseError} (<int,1> > 0) and (<int,1> < 3) -> <pipe>.brpop(<string>,<int>) # same
{redis.exceptions.ResponseError} (<int,1> > 0) and (<int,1> < 3) -> <pipe>.brpoplpush(<key>,<key>,<int>)
{redis.exceptions.ResponseError} <pipe>.lindex(<key>,<int>)
{redis.exceptions.ResponseError} <pipe>.linsert(<key>,"before",<val>,<val>)
{redis.exceptions.ResponseError} <pipe>.linsert(<key>,"after",<val>,<val>)
{redis.exceptions.ResponseError} <pipe>.llen(<key>)
{redis.exceptions.ResponseError} <pipe>.lpop(<key>)
{redis.exceptions.ResponseError} <pipe>.lpush(<key>,<val>)
{redis.exceptions.ResponseError} <pipe>.lpushx(<key>,<val>)
{redis.exceptions.ResponseError} <pipe>.lrange(<key>,<int>,<int>)
{redis.exceptions.ResponseError} <pipe>.lrem(<key>,<int>,<val>)
{redis.exceptions.ResponseError} <pipe>.lset(<key>,<int>,<val>)
{redis.exceptions.ResponseError} <pipe>.ltrim(<key>,<int>,<int>)
{redis.exceptions.ResponseError} <pipe>.rpop(<key>)
{redis.exceptions.ResponseError} <pipe>.rpoplpush(<key>,<key>)
{redis.exceptions.ResponseError} <pipe>.rpush(<key>,<val>)
{redis.exceptions.ResponseError} <pipe>.rpushx(<key>,<val>)

#sets
{redis.exceptions.ResponseError} <pipe>.sadd(<key>,<val>)
{redis.exceptions.ResponseError} <pipe>.scard(<key>)
{redis.exceptions.ResponseError} <pipe>.sdiff(<key>,<key>)
{redis.exceptions.ResponseError} <pipe>.sdiffstore(<key>,<key>,<key>)
{redis.exceptions.ResponseError} <pipe>.sinter(<key>,<key>)
{redis.exceptions.ResponseError} <pipe>.sinterstore(<key>,<key>,<key>)
{redis.exceptions.ResponseError} <pipe>.sismember(<key>,<val>)
{redis.exceptions.ResponseError} <pipe>.smembers(<key>)
{redis.exceptions.ResponseError} <pipe>.smove(<key>,<key>,<val>)
{redis.exceptions.ResponseError} <pipe>.spop(<key>)
{redis.exceptions.ResponseError} <pipe>.srandmember(<key>)
{redis.exceptions.ResponseError} <pipe>.srandmember(<key>,<int>)
{redis.exceptions.ResponseError} <pipe>.srem(<key>,<val>)
{redis.exceptions.ResponseError} <pipe>.sunion(<key>,<key>)
{redis.exceptions.ResponseError} <pipe>.sunionstore(<key>,<key>,<key>)

#hashes
{redis.exceptions.ResponseError} <pipe>.hdel(<key>)
{redis.exceptions.ResponseError} <pipe>.hexists(<key>,<key>)
{redis.exceptions.ResponseError} <pipe>.hget(<key>,<key>)
{redis.exceptions.ResponseError} <pipe>.hgetall(<key>)
{redis.exceptions.ResponseError} <pipe>.hincrby(<key>,<key>,<int>)
{redis.exceptions.ResponseError} <pipe>.hincrbyfloat(<key>,<key>,<int>)
{redis.exceptions.ResponseError} <pipe>.hkeys(<key>)
{redis.exceptions.ResponseError} <pipe>.hlen(<key>)
{redis.exceptions.ResponseError} <pipe>.hmget(<key>,<key>,<key>)
#{redis.exceptions.ResponseError} <pipe>.hmset(<key>,<key>,<val>)
{redis.exceptions.ResponseError} <pipe>.hset(<key>,<key>,<val>)
{redis.exceptions.ResponseError} <pipe>.hsetnx(<key>,<key>,<val>)
#{redis.exceptions.ResponseError} <pipe>.hstrlen(<key>,<key>)
{redis.exceptions.ResponseError} <pipe>.hvals(<key>)
