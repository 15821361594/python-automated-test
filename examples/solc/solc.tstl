@import solchelper

pool: <functions> 4

pool: <idVal> 4
pool: <idNum> 4

pool: <functionId> 4
pool: <varId> 4

pool: <varIds> 4

pool: <functionDefinition> 4

pool: <functionParameters> 4

pool: <block> 4

pool: <statements> 4
pool: <statement> 4

pool: <simpleStatement> 4

pool: <num> 4

pool: <expr> 4
pool: <unaryOp> 4
pool: <binaryOp> 4

<idVal> := <[1..4]>
~<idVal> += 1
<idNum> := str(~<idVal>)

<functionId> := <["g","h","i","j","k","l"]>
<varId> := "v" + <idNum>

<varIds> := <varId>
<varIds> := <varIds> + ", " + <varId>

<functions> := <functionDefinition>
solchelper.fid(<functionDefinition,1>) not in <functions,2> -> <functions> := <functions> + chr(10) + chr(10) + <functionDefinition>

<functionDefinition> := "function f() returns (int) " + <block>
<functionDefinition> := "function " + <functionId> + "(int input) returns (int) " + <block>


<block> := "{" + chr(10) + <statements> + chr(10) + "}" + chr(10)

<statements> := <statement> + chr(10)
<statements> := ~<statements> + <statement> + chr(10)

<statement> := ~<block>

<statement> := "continue;"
<statement> := "break;"
<statement> := "return " + <expr> + ";"
<statement> := <simpleStatement> + ";"

<statement> := "if (" + <expr> + ")" + chr(10) + ~<statement> + chr(10)
<statement> := "if (" + <expr> + ")" + chr(10) + ~<statement> + chr(10) + "else" + chr(10) + ~<statement> + chr(10)

<statement> := "while (" + <expr> + ")" + chr(10) + ~<statement>

<statement> := "do" + chr(10) + ~<statement> + chr(10) + "while (" + <expr> + ")" + chr(10)

<statement> := "for (" + <simpleStatement> + "; " + <expr> + "; " + <expr> + ")" + chr(10) + ~<statement> + chr(10)

<simpleStatement> := <expr>
<simpleStatement> := "var " + <varIds>
<simpleStatement> := "var " + <varIds> + " = " + <expr>

<num> := 0
~<num> += 1
~<num> -= 1
~<num> *= 10

<expr> := "input"
<expr> := <varId>
<expr> := <unaryOp> + " " + ~<expr>
<expr> := ~<expr> + " " + <binaryOp> + " " + ~<expr>
<expr> := "(" + <expr> + ")"
<expr> := ~<expr> + "++"
<expr> := ~<expr> + "--"
<expr> := ~<expr> + " ? " + ~<expr> + " : " + ~<expr>
<expr> := <functionId> + "(" + ~<expr> + ")"

<expr> := str(<num>)
<expr> := "true"
<expr> := "false"

<unaryOp> := <["!","~","delete","++","--","+","-"]>

<binaryOp> := <["+","-","*","/","%","**"]>
<binaryOp> := <["&","|","^","<<",">>"]>
<binaryOp> := <["&&","||"]>
<binaryOp> := <["<",">","<=",">=","==","!="]>

"function f()" in <functions,1> -> solchelper.differentialTest(<functions>) #ESSENTIAL