@import solchelper

<@
def statementsTooLong(s1,s2):
    return len(s1) + len(s2) > 1024

def exprTooLong(expr1,expr2):
    return len(expr1) + len(expr2) > 256
@>

pool: <tested> 1

pool: <functions> 6

pool: <idVal> 4
pool: <idNum> 4

pool: <functionId> 4

pool: <varId> 4
pool: <mvarId> 4
pool: <avarId> 4

pool: <declared> 1

pool: <address> 4

pool: <type> 4
pool: <mappingtype> 4
pool: <complextype> 4
pool: <basictype> 4

pool: <mapping> 4

pool: <functionDefinition> 6

pool: <block> 5
pool: <statements> 5
pool: <statement> 5
pool: <simpleStatement> 5

pool: <num> 5
pool: <expr> 5
pool: <unaryOp> 4
pool: <binaryOp> 4

pool: <boolexpr> 5
pool: <boolUnaryOp> 4
pool: <boolBinaryOp> 4

init: <tested> = []
init: <declared> = set([])

<idVal> := 1
~<idVal> += 1
<idNum> := str(~<idVal>)

<functionId> := <["g","h","i"]>
<varId> := "v" + <idNum>

<mvarId> := "mv" + <idNum>
<avarId> := "av" + <idNum>

"input" not in <block,1> -> <functions> := "function f() public payable returns (int) " + <block>
solchelper.fid(<functionDefinition,1>) not in <functions,2> -> <functions> := <functions> + chr(10) + chr(10) + <functionDefinition>

<functionDefinition> := "function " + <functionId> + "(int input) returns (int) " + <block>

<block> := "{" + chr(10) + <statements> + chr(10) + "}" + chr(10)

<statements> := <statement> + chr(10)
not statementsTooLong(<statements,2>,<statement,1>) -> <statements> := ~<statements> + <statement> + chr(10)

<type> := "int"
<type> := "uint"
<type> := "int" + str(8*<[1..32]>)
<type> := "uint" + str(8*<[1..32]>)

<mappingtype> := "mapping (" + <complextype> + " =" + "> " + <complextype> + ")"
<mappingtype> := "mapping (" + <type> + " =" + "> " + <type> + ")"
<mappingtype> := "mapping (" + <basictype> + " =" + "> " + <basictype> + ")"

<mvarId,1> not in <declared,1> -> <mapping> := <mappingtype> + " " + <mvarId> + ";" ; <declared>.add(<mvarId,1>)

<complextype> := <mappingtype>
<complextype> := <basictype>

<basictype> := <type>
<basictype> := "bool"
<basictype> := "hash"
<basictype> := "string32"
<basictype> := "string"
<basictype> := "bytes"
<basictype> := "bytes" + str(<[1..32]>)
<basictype> := "address"

<statement> := <block>

<avarId,1> not in <declared,1> -> <statement> := "address " + <avarId> + " = " + <address> + ";" ; <declared>.add(<avarId,1>)

<avarId,1> in <declared> -> <statement> := <avarId> + ".transfer(" + <expr> + ");"
<avarId,1> in <declared> -> <statement> := <avarId> + ".transfer(" + str(<num>) + ");"
<avarId,1> in <declared> and <varId,1> in <declared> -> <statement> := <avarId> + ".transfer(" + <varId> + ");"

<statement> := "continue;"
<statement> := "break;"
<statement> := "throw;"
<statement> := "return " + <expr> + ";"
<statement> := <simpleStatement> + ";"

<varId,1> not in <declared,1> -> <statement> := <type> + " " + <varId> + " = " + <expr> + ";" ; <declared>.add(<varId,1>)
<varId,1> in <declared> -> <statement> := <varId> + "=" + <expr> + ";"

<varId,1> in <declared> -> <statement> := <varId> + "++;"
<varId,1> in <declared> -> <statement> := <varId> + "--;"
<varId,1> in <declared> -> <statement> := "++" + <varId> + ";"
<varId,1> in <declared> -> <statement> := "--" + <varId> + ";"

<varId,1> in <declared> -> <statement> := <varId> + " += " + <expr> + ";"
<varId,1> in <declared> -> <statement> := <varId> + " -= " + <expr> + ";"
<varId,1> in <declared> -> <statement> := <varId> + " *= " + <expr> + ";"
<varId,1> in <declared> -> <statement> := <varId> + " /= " + <expr> + ";"
<varId,1> in <declared> -> <statement> := <varId> + " %= " + <expr> + ";"

<varId,1> in <declared> -> <statement> := <varId> + " |= " + <expr> + ";"
<varId,1> in <declared> -> <statement> := <varId> + " &= " + <expr> + ";"
<varId,1> in <declared> -> <statement> := <varId> + " ^= " + <expr> + ";"
<varId,1> in <declared> -> <statement> := <varId> + " <<= " + <expr> + ";"
<varId,1> in <declared> -> <statement> := <varId> + " >>= " + <expr> + ";"

<statement> := "input++;"
<statement> := "input--;"
<statement> := "++input;"
<statement> := "--input;"

<statement> := "input += " + <expr> + ";"
<statement> := "input -= " + <expr> + ";"
<statement> := "input *= " + <expr> + ";"
<statement> := "input /= " + <expr> + ";"
<statement> := "input %= " + <expr> + ";"

<statement> := "input |= " + <expr> + ";"
<statement> := "input &= " + <expr> + ";"
<statement> := "input ^= " + <expr> + ";"
<statement> := "input <<= " + <expr> + ";"
<statement> := "input >>= " + <expr> + ";"

<statement> := "if (" + <boolexpr> + ")" + chr(10) + <statement> + chr(10)
<statement> := "if (" + <boolexpr> + ")" + chr(10) + <block> + chr(10)
not statementsTooLong(<statement,2>,<statement,3>) -> <statement> := "if (" + <boolexpr> + ")" + chr(10) + <statement> + chr(10) + "else" + chr(10) + <statement> + chr(10)
not statementsTooLong(<block,1>,<block,2>) -> <statement> := "if (" + <boolexpr> + ")" + chr(10) + <block> + chr(10) + "else" + chr(10) + <block> + chr(10)

<statement> := "while (" + <boolexpr> + ")" + chr(10) + <statement>
<statement> := "while (" + <boolexpr> + ")" + chr(10) + <block>

<statement> := "do" + chr(10) + <statement> + chr(10) + "while (" + <boolexpr> + ");" + chr(10)
<statement> := "do" + chr(10) + <block> + chr(10) + "while (" + <boolexpr> + ");" + chr(10)

<statement> := "for (" + <simpleStatement> + "; " + <boolexpr> + "; " + <expr> + ")" + chr(10) + <statement> + chr(10)
<statement> := "for (" + <simpleStatement> + "; " + <boolexpr> + "; " + <expr> + ")" + chr(10) + <block> + chr(10)

<mvarId,1> in <declared> -> <statement> := <mvarId> + "[" + <expr> + "] = " + <expr>

<simpleStatement> := <expr>
<varId,1> not in <declared,1> -> <simpleStatement> := <type> + " " + <varId> + " = " + <expr> ; <declared>.add(<varId,1>)

<num> := 0
~<num> += 1
~<num> *= 10

<expr> := "input"
<varId,1> in <declared> -> <expr> := <varId>

<expr> := "input + " + ~<expr>
<varId,1> in <declared> -> <expr> := <varId> + " + " + ~<expr>
<expr> := "input - " + ~<expr>
<varId,1> in <declared> -> <expr> := <varId> + " - " + ~<expr>
<expr> := "input * " + ~<expr>
<varId,1> in <declared> -> <expr> := <varId> + " * " + ~<expr>

<expr> := <unaryOp> + " " + ~<expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := ~<expr> + " " + <binaryOp> + " " + ~<expr>
<expr> := "(" + <expr> + ")"
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := "(" +  ~<boolexpr> + " ? " + ~<expr> + " : " + ~<expr> + ")"
<expr> := <functionId> + "(" + ~<expr> + ")"

<expr> := str(<[0..10]>)
<expr> := str(<num>)

<avarId,1> in <declared> -> <expr> := <avarId> + ".balance"

<mvarId,1> in <declared> -> <expr> := <mvarId> + "[" + ~<expr> + "]"

<unaryOp> := "-"
<unaryOp> := "~"

<binaryOp> := ","
<binaryOp> := "+"
<binaryOp> := "-"
<binaryOp> := "*"
<binaryOp> := "/"
<binaryOp> := "%"
<binaryOp> := "**"
<binaryOp> := <["&","|","^","<<",">>"]>

<boolexpr> := "true"
<boolexpr> := "false"

<boolBinaryOp> := <["&&","||"]>

not exprTooLong(<boolexpr,2>,<boolexpr,3>) -> <boolexpr> := <boolexpr> + " " + <boolBinaryOp> + " " + <boolexpr>
<boolexpr> := "!(" + <boolexpr> + ")"
<boolexpr> := "(" + <boolexpr> + ")"
not exprTooLong(<expr,1>,<expr,2>) -> <boolexpr> := <expr> + " < " + <expr>

<boolexpr> := "input < " + <expr>
<boolexpr> := "input > " + <expr>
<boolexpr> := "input <= " + <expr>
<boolexpr> := "input >= " + <expr>
<boolexpr> := "input == " + <expr>
<boolexpr> := "input != " + <expr>

<varId,1> in <declared> -> <boolexpr> := <varId> + " < " + <expr>
<varId,1> in <declared> -> <boolexpr> := <varId> + " > " + <expr>
<varId,1> in <declared> -> <boolexpr> := <varId> + " <= " + <expr>
<varId,1> in <declared> -> <boolexpr> := <varId> + " >= " + <expr>
<varId,1> in <declared> -> <boolexpr> := <varId> + " == " + <expr>
<varId,1> in <declared> -> <boolexpr> := <varId> + " != " + <expr>

not exprTooLong(<expr,1>,<expr,2>) -> <boolexpr> := <expr> + " > " + <expr>
not exprTooLong(<expr,1>,<expr,2>) -> <boolexpr> := <expr> + " <= " + <expr>
not exprTooLong(<expr,1>,<expr,2>) -> <boolexpr> := <expr> + " >= " + <expr>
not exprTooLong(<boolexpr,2>,<boolexpr,3>) -> <boolexpr> := <boolexpr> + " == " + <boolexpr>
not exprTooLong(<boolexpr,2>,<boolexpr,3>) -> <boolexpr> := <boolexpr> + " != " + <boolexpr>

<avarId,1> in <declared> -> <boolexpr> := <avarId> + ".send(" + <expr> + ");"
<avarId,1> in <declared> -> <boolexpr> := <avarId> + ".send(" + str(<num>) + ");"
<avarId,1> in <declared> and <varId,1> in <declared> -> <boolexpr> := <avarId> + ".send(" + <varId> + ");"

<address> := "0x10a1c1cb95c92ec31d3f22c66eef1d9f3f258c6b"
<address> := "0x13cbb8d99c6c4e0f2728c7d72606e78a29c4e224"
<address> := "0x24143873e0e0815fdcbcffdbe09c979cbf9ad013"
<address> := "0x598443f1880ef585b21f1d7585bd0577402861e5"
<address> := "0x77db2bebba79db42a978f896968f4afce746ea1f"
<address> := "0x7d577a597b2742b498cb5cf0c26cdcd726d39e6e"
<address> := "0x82a978b3f5962a5b0957d9ee9eef472ee55b42f1"
<address> := "0x90f0b1ebbba1c1936aff7aaf20a7878ff9e04b6c"
<address> := "0xdceceaf3fc5c0a63d195d69b1a90011b7b19650d"
<address> := "0xe0fc04fa2d34a66b779fd5cee748268032a146c0"
<address> := "this"

<functions> := <mapping> + chr(10) + ~<functions>

("function f()" in <functions,1>) and (<functions,1> not in <tested,1>) -> ~<tested>.append(<functions>); solchelper.test(<functions,1>) #ESSENTIAL

