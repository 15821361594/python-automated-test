@import pyfakefs.fake_filesystem
@import pyfakefs.fake_filesystem_glob
@import os
@import shutil
@import glob

<@
def newFakeOS():
    fs = pyfakefs.fake_filesystem.FakeFilesystem()
    if os.path.exists('/Volumes/ramdisk/test'):
        shutil.rmtree('/Volumes/ramdisk/test')
    os.mkdir('/Volumes/ramdisk/test')
    fs.CreateDirectory('/Volumes')	
    fs.CreateDirectory('/Volumes/ramdisk')
    fs.CreateDirectory('/Volumes/ramdisk/test')
    fakeOS = pyfakefs.fake_filesystem.FakeOsModule(fs)
    return fakeOS

def newFakeGlob(fakeos):
    fakeGlob = pyfakefs.fake_filesystem_glob.FakeGlobModule(fakeos.filesystem)
    return fakeGlob
@>

pool: <os> 1 REF
pool: <glmod> 1 REF
pool: <fd> 5 REF
pool: <stat> 5 REF

pool: <path> 5

pool: <component> 5

pool: <pglob> 5

pool: <str> 5

finally: <os>.close(<fd>)

<os> := newFakeOS()
<glmod> := newFakeGlob(<os>)

<component> := <["alpha","beta","gamma","delta","epsilon","a","b","c","d","e","f","g","h","omega","lambda","phi"]>

<path> := "/Volumes/ramdisk/test"
<path> := <path> + "/" + <component>

<pglob> := <path>
<pglob> := <pglob>.replace(<component>,"*")
<pglob> := <pglob>.replace(<component>,"*",1)
<pglob> := <pglob>.replace(<component>,"?")
<pglob> := <pglob>.replace(<component>,"?",1)
<pglob> := <pglob>.replace("?","??",1)

<str> := ""
<str> := <str> + <['a'..'z']>
<str> := <str> + " "

{IOError,OSError,AttributeError,TypeError} ~<os>.mkdir(<path>)
{IOError,OSError,AttributeError,TypeError} ~<os>.makedirs(<path>)

# symlinks have lots of issues, some handled by guard
#{IOError,OSError} os.path.exists(<path,1>) and os.path.exists(os.path.dirname(<path,2>)) and not (<path,1> == <path,2>) -> ~<os>.symlink(<path>,<path>)
# {IOError,OSError} ~<os>.symlink(<path>,<path>)
{IOError,OSError,TypeError} not os.path.isdir(<path,1>) -> ~<os>.link(<path>,<path>)

# Guard needed due to bug in pyfakefs
{IOError,TypeError} not os.path.isdir(<path,1>) -> <fd> := ~<os>.open(<path>, os.O_CREAT | os.O_WRONLY | os.O_TRUNC) 

{OSError} ~<os>.close(<fd>)
{OSError} ~<os>.write(~<fd>,<str>)

{OSError} ~<os>.fstat(~<fd>)

{OSError} ~<os>.remove(<path>)

{OSError,TypeError} <path,1> != "/Volumes/ramdisk/test" -> ~<os>.rmdir(<path>)
# Guard needed so you don't delete the "root" of the tested FS
{OSError,TypeError} len(os.listdir("/Volumes/ramdisk/test")) > 1 -> ~<os>.removedirs(<path>)

{IOError,OSError} sorted(~<os>.listdir(<path>))

{OSError} ~<os>.stat(<path>)
{OSError} ~<os>.lstat(<path>)

{OSError} ~<os>.readlink(<path>)

#{OSError,AttributeError,RuntimeError} <path,2>.find(<path,1>) != 0 -> ~<os>.rename(<path>,<path>)

{OSError} ~<os>.walk(<path>,topdown=<[True,False]>,followlinks=<[True,False]>)

{OSError} ~<os>.path.isdir(<path>)
{OSError,TypeError} ~<os>.path.isfile(<path>)
{OSError,TypeError} ~<os>.path.isabs(<path>)
{OSError,TypeError} ~<os>.path.islink(<path>)
{OSError} not os.path.isdir(<path,1>) -> ~<os>.path.getsize(<path>)

~<os>.path.abspath(<path>)
~<os>.path.dirname(<path>)
~<os>.path.exists(<path>)
~<os>.path.lexists(<path>)

~<glmod>.glob(<pglob>)

reference: newFakeOS\(\) ==> os
reference: newFakeGlob\(.*\) ==> glob

compare: listdir
compare: readlink

compare: abspath
compare: dirname
compare: exists

compare: isdir
compare: isfile

compare: isabs
compare: islink

#compare: getsize

compare: glob