@import pyfakefs.fake_filesystem
@import os
@import shutil

<@
def newFakeOS():
    fs = pyfakefs.fake_filesystem.FakeFilesystem()
    if os.path.exists('/Volumes/ramdisk/test'):
        shutil.rmtree('/Volumes/ramdisk/test')
    os.mkdir('/Volumes/ramdisk/test')
    fs.CreateDirectory('/Volumes')	
    fs.CreateDirectory('/Volumes/ramdisk')
    fs.CreateDirectory('/Volumes/ramdisk/test')
    fakeOS = pyfakefs.fake_filesystem.FakeOsModule(fs)
    return fakeOS

def displayTree(w,osmodule):
    if osmodule == os:
       return
    paths = []
    biggest = 0
    for p in w:
        theDir = p[0]
        paths.append(theDir)
        for f in p[2]:
            fp = theDir + "/" + f
            s = osmodule.path.getsize(fp)
            paths.append((fp,s))
            if s > biggest:
                biggest = s
    if (len(paths) > 5) and (biggest > 10):
       print paths

def sortWalk(l):
    newList = []
    for (p,l1,l2) in l:
        newList.append((p,sorted(l1),sorted(l2)))
    return sorted(newList,key=lambda x:x[0])
@>

pool: <os> 1 REF
pool: <fd> 1 REF
pool: <stat> 5 REF

pool: <path> 5

pool: <component> 5

pool: <str> 5

finally: <os>.close(<fd>)

<os> := newFakeOS()

<component> := <["alpha","beta","gamma","delta","epsilon","a","b","c","d","e","f","g","h","omega","lambda","phi"]>

<path> := "/Volumes/ramdisk/test"
<path> := <path> + "/" + <component>

<str> := ""
<str> := <str> + <['a'..'z']>
<str> := <str> + " "

{IOError,OSError} ~<os>.mkdir(<path>)
{IOError,OSError} ~<os>.makedirs(<path>)

# symlinks have lots of issues, some handled by guard
#{IOError,OSError} os.path.exists(<path,1>) and os.path.exists(os.path.dirname(<path,2>)) and not (<path,1> == <path,2>) -> ~<os>.symlink(<path>,<path>)
#{IOError,OSError} ~<os>.symlink(<path>,<path>)
{IOError,OSError} not os.path.isdir(<path,1>) -> ~<os>.link(<path>,<path>)

# Guard needed due to bug in pyfakefs
{IOError} not os.path.isdir(<path,1>) -> <fd> := ~<os>.open(<path>, os.O_CREAT | os.O_WRONLY | os.O_TRUNC) 

{OSError} ~<os>.close(<fd>)
{OSError} ~<os>.write(~<fd>,<str>)

{OSError} ~<os>.fstat(~<fd>)

{OSError} ~<os>.remove(<path>)

{OSError} <path,1> != "/Volumes/ramdisk/test" -> ~<os>.rmdir(<path>)
# Guard needed so you don't delete the "root" of the tested FS
{OSError} len(os.listdir("/Volumes/ramdisk/test")) > 1 -> ~<os>.removedirs(<path>)

{IOError,OSError} sorted(~<os>.listdir(<path>))

{OSError} ~<os>.stat(<path>)
{OSError} ~<os>.lstat(<path>)

{OSError} ~<os>.readlink(<path>)

#{OSError} (<path,1> != <path,2>) and not(~<os>.path.isdir(<path,1>)) and not (~<os>.path.isdir(<path,2>)) -> ~<os>.rename(<path>,<path>)

{OSError} sortWalk([p for p in ~<os>.walk(<path>,topdown=<[True,False]>,followlinks=<[True,False]>)])

#{OSError, TypeError, AttributeError} displayTree(~<os>.walk(<path>,topdown=<[True,False]>,followlinks=<[True,False]>), ~<os>)

{OSError} ~<os>.path.exists(<path>)
{OSError} ~<os>.path.lexists(<path>)

{OSError} ~<os>.path.isdir(<path>)
{OSError} ~<os>.path.isfile(<path>)
{OSError} ~<os>.path.isabs(<path>)
{OSError} ~<os>.path.islink(<path>)

{OSError} not os.path.isdir(<path,1>) -> ~<os>.path.getsize(<path>)

{OSError} ~<os>.path.abspath(<path>)
{OSError} ~<os>.path.dirname(<path>)

reference: newFakeOS\(\) ==> os

compare: listdir
compare: readlink

compare: abspath
compare: dirname
compare: exists

compare: isdir
compare: isfile

compare: isabs
compare: islink

compare: getsize\(

compare: walk
