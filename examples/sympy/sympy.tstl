@import sympy
@from sympy.core.cache import *

init: clear_cache()

pool: <c> 4
pool: <v> 4
pool: <expr> 4
pool: <term> 4
pool: <poly> 4

exception: OverflowError
exception: NotImplementedError

log: 0 <expr>

<c> := sympy.Integer(<[0..10]>)
<v> := sympy.Symbol(<['a'..'d']>)
<v> := sympy.Symbol(<['x'..'z']>)
<v> := sympy.Symbol(<['e'..'l']>,positive=True)

<expr> := sympy.Rational(<c>,<c>)
<expr> := <v>
<expr> := <c>

<term> := <c> * <v> ** <c>
<poly> := <term>
<poly> := <term> + <term>

<expr> := <poly>
<expr> := <expr> + <expr>
<expr> := <expr> - <expr>
<expr> := <expr> * <expr>
<expr> := <expr> ** <expr>
<expr> := <expr> / <expr>

{ZeroDivisionError} <expr> := <expr> % <expr>

<expr> := sympy.sin(<expr>)
<expr> := sympy.cos(<expr>)
<expr> := sympy.tan(<expr>)
<expr> := sympy.asin(<expr>)
<expr> := sympy.acos(<expr>)
<expr> := sympy.atan(<expr>)

<expr> := sympy.sqrt(<expr>)

<expr> := sympy.factorial(<expr>)

<expr> := <expr>.subs(<expr>,<expr>)

<expr> := sympy.pi
<expr> := sympy.E
<expr> := sympy.I

<expr> := sympy.Sum(<expr>,(<v>,<c>,<c>))
<expr> := sympy.Product(<expr>,(<v>,<c>,<c>))

<expr> := <expr>.doit()

<expr> := sympy.simplify(<expr>)
<expr> := sympy.expand(<expr>)
<expr> := sympy.expand(<expr>,force=True)
{ValueError} <expr> := sympy.factor(<expr>)
<expr> := sympy.collect(<expr>,<expr>)
<expr> := sympy.cancel(<expr>)
{PolynomialError} <expr> := sympy.apart(<expr>)

<expr> := sympy.trigsimp(<expr>)
<expr> := sympy.expand_trig(<expr>)

<expr> := sympy.powsimp(<expr>)
<expr> := sympy.expand_power_exp(<expr>)
<expr> := sympy.expand_power_base(<expr>)
<expr> := sympy.powdenest(<expr>)

<expr> := sympy.expand_log(<expr>)
<expr> := sympy.logcombine(<expr>)

<expr> := sympy.expand_func(<expr>)
<expr> := sympy.combsimp(<expr>)

<expr>.evalf()

property: ("<expr>" == "<expr>") or (sympy.simplify(<expr,1>-<expr,2>) != 0) or (<expr,1>.equals(<expr,2>))
