self.p_c[0] = Integer(8) 
self.p_expr[1] = self.p_c[0] 
self.p_v[2] = Symbol('i',positive=True) 
self.p_expr[0] = self.p_c[0] 
self.p_expr[2] = tan(self.p_expr[0]) 
self.p_expr[3] = factorial(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[0] = factor(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[1] 
self.p_c[0] = Integer(0) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = expand(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[1] = powdenest(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[1] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[2] = factor(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[3] 
self.p_c[3] = Integer(7) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[0] = simplify(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_v[3] = Symbol('d') 
self.p_expr[1] = powsimp(self.p_expr[2]) 
self.p_expr[2] = atan(self.p_expr[2]) 
self.p_expr[2] = factorial(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
