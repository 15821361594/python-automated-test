self.p_expr[2] = E 
self.p_c[2] = Integer(9) 
self.p_expr[1] = powsimp(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[2] = expand_power_base(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = simplify(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_c[1] = Integer(9) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[3] 
self.p_v[2] = Symbol('k',positive=True) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].doit() 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = combsimp(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = expand_power_exp(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = cancel(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[3] 
self.p_v[1] = Symbol('b') 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[3] 
