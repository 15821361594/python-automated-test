self.p_c[3] = Integer(5) 
self.p_c[1] = Integer(2) 
self.p_c[0] = Integer(3) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_expr[1] = self.p_v[2] 
self.p_expr[2] = powsimp(self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[1] 
self.p_c[2] = Integer(2) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[0] = expand_func(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[3] 
self.p_term[2] = self.p_c[2] * self.p_v[2] ** self.p_c[1] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[0])) 
self.p_v[3] = Symbol('l',positive=True) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[3] 
self.p_term[3] = self.p_c[0] * self.p_v[2] ** self.p_c[3] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[0] 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = tan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = E 
self.p_expr[2] = combsimp(self.p_expr[2]) 
self.p_v[2] = Symbol('f',positive=True) 
self.p_expr[2] = expand_log(self.p_expr[1]) 
self.p_term[1] = self.p_c[2] * self.p_v[2] ** self.p_c[1] 
self.p_c[1] = Integer(0) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = pi 
self.p_term[0] = self.p_c[1] * self.p_v[3] ** self.p_c[2] 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[2],self.p_c[0])) 
self.p_poly[3] = self.p_term[3] + self.p_term[2] 
self.p_expr[1] = logcombine(self.p_expr[2]) 
self.p_poly[1] = self.p_term[2] + self.p_term[3] 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[3] 
self.p_c[3] = Integer(10) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
