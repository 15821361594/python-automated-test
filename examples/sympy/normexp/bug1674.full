self.p_v[0] = Symbol('h',positive=True) 
self.p_v[2] = Symbol('a') 
self.p_c[1] = Integer(10) 
self.p_expr[3] = self.p_v[2] 
self.p_expr[2] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[3] = sqrt(self.p_expr[3]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[1] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[3] = logcombine(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[3] = atan(self.p_expr[2]) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = tan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[3] + self.p_expr[0] 
self.p_v[3] = Symbol('k',positive=True) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = sqrt(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = E 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = logcombine(self.p_expr[2]) 
self.p_expr[2] = powsimp(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = cancel(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_c[1] 
self.p_expr[0] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[2] = apart(self.p_expr[2]) 
self.p_expr[0] = tan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[3] = self.p_v[0] 
self.p_expr[2] = expand_func(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_c[3] = Integer(3) 
self.p_expr[3] = apart(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[3] 
