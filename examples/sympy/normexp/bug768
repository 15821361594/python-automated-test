self.p_c[0] = Integer(6) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_expr[3] = I 
self.p_expr[1] = acos(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[2] = expand_log(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = powdenest(self.p_expr[3]) 
self.p_c[1] = Integer(3) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[0] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[1])) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[2] = self.p_expr[1] * self.p_expr[3] 
self.p_c[1] = Integer(5) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[1] 
