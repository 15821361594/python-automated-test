self.p_c[1] = Integer(5) 
self.p_v[2] = Symbol('y') 
self.p_v[1] = Symbol('b') 
self.p_term[3] = self.p_c[1] * self.p_v[2] ** self.p_c[1] 
self.p_poly[0] = self.p_term[3] 
self.p_c[3] = Integer(8) 
self.p_v[2] = Symbol('z') 
self.p_expr[2] = E 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = factor(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[3] = expand_trig(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[3] 
