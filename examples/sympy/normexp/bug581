self.p_v[0] = Symbol('k',positive=True) 
self.p_c[3] = Integer(7) 
self.p_v[2] = Symbol('z') 
self.p_expr[0] = self.p_c[3] 
self.p_expr[1] = expand_log(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_c[3] = Integer(9) 
self.p_expr[1].evalf() 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[1] = combsimp(self.p_expr[1]) 
self.p_c[2] = Integer(9) 
self.p_term[2] = self.p_c[3] * self.p_v[2] ** self.p_c[2] 
self.p_expr[2] = combsimp(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[0] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
