self.p_v[1] = Symbol('b') 
self.p_c[2] = Integer(7) 
self.p_c[1] = Integer(1) 
self.p_v[2] = Symbol('d') 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[3] = pi 
self.p_term[1] = self.p_c[2] * self.p_v[1] ** self.p_c[2] 
self.p_expr[1] = expand_log(self.p_expr[3]) 
self.p_expr[3] = logcombine(self.p_expr[1]) 
self.p_expr[2] = apart(self.p_expr[1]) 
self.p_expr[0] = expand_trig(self.p_expr[1]) 
self.p_term[2] = self.p_c[1] * self.p_v[2] ** self.p_c[2] 
self.p_expr[1] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[2] = expand_power_exp(self.p_expr[0]) 
self.p_v[1] = Symbol('k',positive=True) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[2])) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[0] = atan(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_term[0] = self.p_c[1] * self.p_v[1] ** self.p_c[1] 
self.p_expr[3] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[1] = trigsimp(self.p_expr[1]) 
self.p_expr[1] = expand_trig(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[2] 
