self.p_c[1] = Integer(2) 
self.p_c[2] = Integer(7) 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[3] = pi 
self.p_expr[1] = powdenest(self.p_expr[3]) 
self.p_v[2] = Symbol('y') 
self.p_c[3] = Integer(8) 
self.p_expr[3] = factorial(self.p_expr[3]) 
self.p_expr[2] = expand_log(self.p_expr[3]) 
self.p_expr[0] = Rational(self.p_c[1],self.p_c[3]) 
self.p_expr[3] = factorial(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[3])) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[3])) 
self.p_term[3] = self.p_c[1] * self.p_v[0] ** self.p_c[2] 
self.p_poly[2] = self.p_term[3] 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[2] = factorial(self.p_expr[0]) 
self.p_c[3] = Integer(5) 
self.p_expr[0] = sqrt(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[1] = sqrt(self.p_expr[0]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_c[1] = Integer(3) 
self.p_expr[0].evalf() 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[3])) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
