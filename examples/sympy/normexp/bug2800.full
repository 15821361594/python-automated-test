self.p_c[3] = Integer(8) 
self.p_c[0] = Integer(7) 
self.p_expr[3] = E 
self.p_expr[0] = expand_power_base(self.p_expr[3]) 
self.p_c[1] = Integer(0) 
self.p_expr[1] = expand_trig(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[3] = expand_power_base(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = expand(self.p_expr[0],force=True) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[1] = expand_func(self.p_expr[2]) 
self.p_v[0] = Symbol('k',positive=True) 
self.p_v[2] = Symbol('d') 
self.p_expr[2] = factorial(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[2] = sin(self.p_expr[0]) 
self.p_c[1] = Integer(0) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[1] = factor(self.p_expr[3]) 
self.p_c[2] = Integer(3) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[2])) 
self.p_expr[0] = self.p_expr[0].doit() 
self.p_expr[0] = self.p_expr[0] % self.p_expr[3] 
