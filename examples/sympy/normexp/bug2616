self.p_c[1] = Integer(7) 
self.p_v[2] = Symbol('d') 
self.p_c[2] = Integer(2) 
self.p_term[2] = self.p_c[2] * self.p_v[2] ** self.p_c[2] 
self.p_poly[2] = self.p_term[2] + self.p_term[2] 
self.p_expr[0] = self.p_poly[2] 
self.p_v[1] = Symbol('z') 
self.p_c[2] = Integer(5) 
self.p_v[3] = Symbol('l',positive=True) 
self.p_v[0] = Symbol('z') 
self.p_expr[1] = Rational(self.p_c[2],self.p_c[2]) 
self.p_term[2] = self.p_c[1] * self.p_v[0] ** self.p_c[1] 
self.p_expr[2] = atan(self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[2])) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = logcombine(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[2] = E 
self.p_expr[3] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] % self.p_expr[3] 
