self.p_c[2] = Integer(8) 
self.p_v[3] = Symbol('k',positive=True) 
self.p_term[3] = self.p_c[2] * self.p_v[3] ** self.p_c[2] 
self.p_expr[0] = E 
self.p_expr[2] = acos(self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[2]) 
self.p_expr[2] = cos(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[3] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[0] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[1] = factorial(self.p_expr[1]) 
self.p_expr[1] = tan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[1] 
self.p_v[0] = Symbol('b') 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_v[2] = Symbol('x') 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_poly[1] = self.p_term[3] + self.p_term[3] 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] / self.p_expr[0] 
self.p_v[0] = Symbol('z') 
self.p_expr[3] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[1] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = cancel(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = expand_power_exp(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[0] = apart(self.p_expr[0]) 
self.p_expr[0] = expand_log(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[1] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[2] = simplify(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].doit() 
