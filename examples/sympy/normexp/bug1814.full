self.p_c[0] = Integer(1) 
self.p_v[0] = Symbol('z') 
self.p_c[3] = Integer(7) 
self.p_expr[3] = E 
self.p_expr[0] = expand(self.p_expr[3],force=True) 
self.p_expr[2] = cancel(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[1] = expand_trig(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[2] 
self.p_v[3] = Symbol('c') 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[3] = expand(self.p_expr[0],force=True) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[3]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = powsimp(self.p_expr[2]) 
self.p_expr[2] = factor(self.p_expr[3]) 
self.p_term[2] = self.p_c[0] * self.p_v[0] ** self.p_c[3] 
self.p_v[2] = Symbol('e',positive=True) 
self.p_term[3] = self.p_c[0] * self.p_v[3] ** self.p_c[3] 
self.p_expr[3] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = self.p_c[0] 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[0] 
