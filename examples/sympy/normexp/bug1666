self.p_c[1] = Integer(6) 
self.p_v[2] = Symbol('f',positive=True) 
self.p_v[1] = Symbol('g',positive=True) 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[0] = asin(self.p_expr[1]) 
self.p_expr[3] = tan(self.p_expr[1]) 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_v[3] = Symbol('j',positive=True) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = trigsimp(self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[2] = simplify(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_term[2] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_c[0] = Integer(1) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_term[1] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[3] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[3] = cancel(self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[3] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = combsimp(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_v[1] = Symbol('g',positive=True) 
self.p_expr[0] = powsimp(self.p_expr[0]) 
self.p_v[0] = Symbol('h',positive=True) 
self.p_expr[0] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[1] = sin(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = self.p_expr[0].doit() 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[0] 
self.p_term[0] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_c[0] = Integer(5) 
self.p_expr[1] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_v[1] = Symbol('a') 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
