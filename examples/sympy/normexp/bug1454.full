self.p_expr[3] = I 
self.p_c[1] = Integer(4) 
self.p_c[0] = Integer(4) 
self.p_expr[2] = sin(self.p_expr[3]) 
self.p_expr[0] = simplify(self.p_expr[3]) 
self.p_expr[3] = sin(self.p_expr[2]) 
self.p_c[2] = Integer(9) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[0] 
self.p_v[1] = Symbol('c') 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[2]) 
self.p_expr[2] = asin(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[1] = expand_power_exp(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[2])) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[3] = cancel(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[2] = self.p_expr[1] - self.p_expr[0] 
self.p_expr[3] = expand_log(self.p_expr[2]) 
self.p_expr[2] = powsimp(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = expand_trig(self.p_expr[1]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[2] 
