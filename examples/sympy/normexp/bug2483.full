self.p_v[0] = Symbol('d') 
self.p_v[3] = Symbol('a') 
self.p_c[1] = Integer(10) 
self.p_c[2] = Integer(7) 
self.p_v[1] = Symbol('i',positive=True) 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[3] = expand_func(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[3] = I 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = sin(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = sqrt(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[2])) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_c[1] 
self.p_expr[1].evalf() 
self.p_c[2] = Integer(9) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[0] 
