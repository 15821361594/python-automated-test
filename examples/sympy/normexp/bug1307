self.p_c[2] = Integer(0) 
self.p_v[3] = Symbol('c') 
self.p_expr[3] = pi 
self.p_expr[3].evalf() 
self.p_v[1] = Symbol('j',positive=True) 
self.p_term[3] = self.p_c[2] * self.p_v[3] ** self.p_c[2] 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = powsimp(self.p_expr[3]) 
self.p_expr[3] = expand_trig(self.p_expr[1]) 
self.p_v[2] = Symbol('e',positive=True) 
self.p_term[2] = self.p_c[2] * self.p_v[3] ** self.p_c[2] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_v[3] = Symbol('d') 
self.p_expr[3] = cancel(self.p_expr[1]) 
self.p_expr[0] = cancel(self.p_expr[3]) 
self.p_poly[1] = self.p_term[2] + self.p_term[3] 
self.p_expr[3] = factor(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[1] = expand_func(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = sqrt(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = expand_power_base(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[3] = self.p_expr[3] / self.p_expr[1] 
self.p_poly[2] = self.p_term[2] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
