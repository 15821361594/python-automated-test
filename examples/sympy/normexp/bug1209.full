self.p_c[2] = Integer(3) 
self.p_c[1] = Integer(4) 
self.p_expr[2] = Rational(self.p_c[1],self.p_c[1]) 
self.p_v[0] = Symbol('x') 
self.p_v[2] = Symbol('z') 
self.p_expr[0] = logcombine(self.p_expr[2]) 
self.p_expr[1] = tan(self.p_expr[0]) 
self.p_c[1] = Integer(6) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_v[1] = Symbol('y') 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[2] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = simplify(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[1],self.p_c[2])) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = trigsimp(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_v[3] = Symbol('b') 
self.p_expr[2] = self.p_expr[2] % self.p_expr[3] 
