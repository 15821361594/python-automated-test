self.p_c[0] = Integer(8) 
self.p_expr[1] = self.p_c[0] 
self.p_v[0] = Symbol('z') 
self.p_c[0] = Integer(8) 
self.p_c[2] = Integer(7) 
self.p_v[2] = Symbol('j',positive=True) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[3] = acos(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].doit() 
self.p_expr[1] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[2] = powdenest(self.p_expr[1]) 
self.p_expr[1] = Rational(self.p_c[0],self.p_c[2]) 
self.p_v[0] = Symbol('j',positive=True) 
self.p_term[3] = self.p_c[0] * self.p_v[2] ** self.p_c[2] 
self.p_term[1] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_expr[2].evalf() 
self.p_expr[2] = cancel(self.p_expr[2]) 
self.p_v[0] = Symbol('i',positive=True) 
self.p_expr[2] = expand_power_exp(self.p_expr[1]) 
self.p_expr[1] = powdenest(self.p_expr[2]) 
self.p_expr[2] = combsimp(self.p_expr[3]) 
self.p_expr[3] = powsimp(self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[2] 
