self.p_expr[1] = I 
self.p_c[2] = Integer(6) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[3].evalf() 
self.p_expr[2] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[0] = factorial(self.p_expr[1]) 
self.p_expr[3] = expand_func(self.p_expr[3]) 
self.p_v[2] = Symbol('d') 
self.p_expr[1] = cancel(self.p_expr[2]) 
self.p_expr[2] = pi 
self.p_expr[2].evalf() 
self.p_expr[3] = trigsimp(self.p_expr[3]) 
self.p_c[3] = Integer(5) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[3])) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[2] 
self.p_c[3] = Integer(1) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = cos(self.p_expr[2]) 
self.p_expr[2] = factorial(self.p_expr[0]) 
self.p_term[1] = self.p_c[3] * self.p_v[2] ** self.p_c[2] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_v[0] = Symbol('z') 
self.p_v[3] = Symbol('k',positive=True) 
self.p_v[2] = Symbol('h',positive=True) 
self.p_expr[1] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[3])) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[3] = logcombine(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[3] 
