self.p_c[1] = Integer(3) 
self.p_v[0] = Symbol('j',positive=True) 
self.p_v[3] = Symbol('a') 
self.p_v[2] = Symbol('d') 
self.p_c[0] = Integer(8) 
self.p_c[3] = Integer(8) 
self.p_expr[1] = pi 
self.p_term[0] = self.p_c[0] * self.p_v[0] ** self.p_c[1] 
self.p_expr[2] = cancel(self.p_expr[1]) 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[0]) 
self.p_expr[3] = factorial(self.p_expr[1]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = acos(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[0] = cancel(self.p_expr[0]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = combsimp(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
