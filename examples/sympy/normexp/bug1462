self.p_c[0] = Integer(3) 
self.p_v[1] = Symbol('k',positive=True) 
self.p_expr[2] = self.p_c[0] 
self.p_expr[1] = expand_power_base(self.p_expr[2]) 
self.p_expr[0] = trigsimp(self.p_expr[2]) 
self.p_v[0] = Symbol('d') 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = cos(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = powsimp(self.p_expr[1]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = logcombine(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = sin(self.p_expr[1]) 
self.p_v[0] = Symbol('c') 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[3] 
self.p_c[3] = Integer(5) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = cos(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[0] = expand_power_base(self.p_expr[3]) 
self.p_expr[2] = powdenest(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = asin(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[3] 
