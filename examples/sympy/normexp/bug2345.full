self.p_v[0] = Symbol('i',positive=True) 
self.p_v[2] = Symbol('k',positive=True) 
self.p_c[2] = Integer(9) 
self.p_v[1] = Symbol('d') 
self.p_expr[0] = E 
self.p_c[3] = Integer(1) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[1] = expand_func(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[0] = sin(self.p_expr[1]) 
self.p_expr[3] = combsimp(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = powdenest(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[0] = acos(self.p_expr[2]) 
self.p_v[3] = Symbol('k',positive=True) 
self.p_expr[2] = simplify(self.p_expr[0]) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_expr[0] = expand_log(self.p_expr[0]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
