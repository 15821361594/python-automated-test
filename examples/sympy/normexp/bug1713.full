self.p_v[1] = Symbol('h',positive=True) 
self.p_v[3] = Symbol('j',positive=True) 
self.p_v[0] = Symbol('x') 
self.p_c[2] = Integer(0) 
self.p_term[0] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_v[0] = Symbol('c') 
self.p_c[1] = Integer(5) 
self.p_expr[3] = self.p_v[0] 
self.p_expr[1] = expand_trig(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[1] 
self.p_v[0] = Symbol('k',positive=True) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[3] = pi 
self.p_expr[1] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[1] = trigsimp(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_c[3] = Integer(2) 
self.p_expr[3] = acos(self.p_expr[1]) 
self.p_expr[0] = factorial(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = expand_log(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[2])) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = logcombine(self.p_expr[1]) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = expand(self.p_expr[0],force=True) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_term[1] = self.p_c[2] * self.p_v[3] ** self.p_c[3] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[2])) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[2])) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[3])) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[3])) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[2])) 
self.p_v[3] = Symbol('e',positive=True) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[3] 
self.p_term[3] = self.p_c[3] * self.p_v[3] ** self.p_c[2] 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[3])) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[1])) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[1])) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[2])) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[1])) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[1])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = cos(self.p_expr[2]) 
self.p_v[1] = Symbol('c') 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[1],self.p_c[2])) 
self.p_expr[3] = self.p_v[1] 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = expand(self.p_expr[1],force=True) 
self.p_c[3] = Integer(10) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[2] 
