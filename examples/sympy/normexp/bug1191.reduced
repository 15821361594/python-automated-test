self.p_v[3] = Symbol('k',positive=True) 
self.p_c[1] = Integer(3) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_c[3] = Integer(8) 
self.p_term[3] = self.p_c[3] * self.p_v[1] ** self.p_c[3] 
self.p_poly[2] = self.p_term[3] + self.p_term[3] 
self.p_c[2] = Integer(0) 
self.p_expr[0] = self.p_poly[2] 
self.p_v[2] = Symbol('z') 
self.p_expr[2] = trigsimp(self.p_expr[0]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[3])) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
self.p_v[0] = Symbol('c') 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[1] 
