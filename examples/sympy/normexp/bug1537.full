self.p_c[0] = Integer(3) 
self.p_v[2] = Symbol('h',positive=True) 
self.p_v[1] = Symbol('l',positive=True) 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[2] = cos(self.p_expr[0]) 
self.p_v[0] = Symbol('i',positive=True) 
self.p_expr[1] = self.p_c[0] 
self.p_c[1] = Integer(4) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_term[2] = self.p_c[1] * self.p_v[1] ** self.p_c[0] 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = expand(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_c[2] = Integer(2) 
self.p_expr[0] = sin(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = atan(self.p_expr[0]) 
self.p_expr[0] = simplify(self.p_expr[2]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[2] = expand_power_exp(self.p_expr[3]) 
self.p_v[1] = Symbol('a') 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[2])) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
