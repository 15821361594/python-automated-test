self.p_c[3] = Integer(4) 
self.p_expr[1] = self.p_c[3] 
self.p_expr[2] = Rational(self.p_c[3],self.p_c[3]) 
self.p_v[0] = Symbol('d') 
self.p_expr[0] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = expand_trig(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[2] = tan(self.p_expr[3]) 
self.p_expr[3] = tan(self.p_expr[2]) 
self.p_expr[2] = cancel(self.p_expr[0]) 
self.p_c[2] = Integer(10) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = powdenest(self.p_expr[2]) 
self.p_expr[0] = asin(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = expand_power_base(self.p_expr[1]) 
self.p_v[2] = Symbol('b') 
self.p_expr[1] = expand(self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[3] 
self.p_c[1] = Integer(5) 
self.p_term[0] = self.p_c[2] * self.p_v[2] ** self.p_c[2] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = expand_log(self.p_expr[1]) 
self.p_expr[3] = combsimp(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[3] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[2] = expand_power_base(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] % self.p_expr[3] 
