self.p_expr[3] = E 
self.p_v[1] = Symbol('b') 
self.p_expr[2] = apart(self.p_expr[3]) 
self.p_expr[0] = expand_power_exp(self.p_expr[3]) 
self.p_expr[1] = apart(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[0] = expand_power_exp(self.p_expr[2]) 
self.p_c[3] = Integer(7) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = sin(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = expand_func(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[0].evalf() 
self.p_v[0] = Symbol('l',positive=True) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[3] = asin(self.p_expr[1]) 
self.p_c[2] = Integer(1) 
self.p_expr[2] = cos(self.p_expr[1]) 
self.p_expr[0] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = expand_power_exp(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = apart(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[3] 
self.p_v[2] = Symbol('h',positive=True) 
self.p_expr[0] = asin(self.p_expr[1]) 
self.p_expr[3] = I 
self.p_expr[1] = factor(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_term[2] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[3] 
