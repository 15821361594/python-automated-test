self.p_c[1] = Integer(5) 
self.p_c[2] = Integer(4) 
self.p_expr[1] = self.p_c[2] 
self.p_v[0] = Symbol('e',positive=True) 
self.p_c[0] = Integer(7) 
self.p_expr[2] = Rational(self.p_c[2],self.p_c[0]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[2])) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = asin(self.p_expr[0]) 
self.p_expr[1] = expand_power_base(self.p_expr[2]) 
self.p_expr[2] = tan(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[0].doit() 
self.p_expr[0] = combsimp(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
