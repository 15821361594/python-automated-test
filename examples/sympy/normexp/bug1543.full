self.p_v[0] = Symbol('d') 
self.p_expr[1] = E 
self.p_v[1] = Symbol('d') 
self.p_v[3] = Symbol('a') 
self.p_v[2] = Symbol('d') 
self.p_expr[2] = I 
self.p_expr[0] = expand_log(self.p_expr[2]) 
self.p_c[0] = Integer(0) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[2] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = expand(self.p_expr[3]) 
self.p_expr[3] = cancel(self.p_expr[2]) 
self.p_expr[2] = expand_trig(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = expand(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[0].evalf() 
self.p_expr[0] = expand(self.p_expr[3],force=True) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = logcombine(self.p_expr[2]) 
self.p_expr[1] = cancel(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[3] 
