self.p_c[1] = Integer(1) 
self.p_v[0] = Symbol('y') 
self.p_expr[3] = pi 
self.p_expr[1] = expand_log(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = expand_func(self.p_expr[1]) 
self.p_expr[1] = trigsimp(self.p_expr[1]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = expand(self.p_expr[3],force=True) 
self.p_expr[1] = atan(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = expand(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[2] = simplify(self.p_expr[3]) 
self.p_expr[1] = expand_func(self.p_expr[3]) 
self.p_v[2] = Symbol('y') 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0].doit() 
self.p_expr[2] = apart(self.p_expr[3]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_v[1] = Symbol('a') 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[2] = powsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
