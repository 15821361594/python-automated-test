self.p_expr[3] = E 
self.p_v[0] = Symbol('z') 
self.p_expr[2] = E 
self.p_expr[0] = sqrt(self.p_expr[2]) 
self.p_expr[1] = factorial(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = factor(self.p_expr[0]) 
self.p_expr[2] = atan(self.p_expr[0]) 
self.p_expr[0] = sqrt(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = expand(self.p_expr[3],force=True) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_c[2] = Integer(9) 
self.p_expr[3] = cancel(self.p_expr[3]) 
self.p_expr[3] = acos(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = powsimp(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = apart(self.p_expr[2]) 
self.p_expr[0] = expand_log(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = expand(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[0] 
self.p_c[0] = Integer(2) 
self.p_expr[0] = factorial(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_v[1] = Symbol('y') 
self.p_expr[3] = expand_func(self.p_expr[1]) 
self.p_expr[2] = simplify(self.p_expr[3]) 
self.p_expr[1] = tan(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[0] 
self.p_v[3] = Symbol('g',positive=True) 
self.p_c[3] = Integer(2) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_term[3] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[2] 
self.p_term[2] = self.p_c[0] * self.p_v[1] ** self.p_c[3] 
self.p_c[3] = Integer(3) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
