self.p_v[3] = Symbol('l',positive=True) 
self.p_v[0] = Symbol('j',positive=True) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_expr[1] = self.p_v[0] 
self.p_c[1] = Integer(9) 
self.p_expr[0] = atan(self.p_expr[1]) 
self.p_expr[2] = trigsimp(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[3] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[2] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[2] = asin(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[0] 
self.p_expr[1] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = tan(self.p_expr[0]) 
self.p_expr[0] = expand_power_base(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[1] 
