self.p_expr[3] = I 
self.p_expr[1] = cos(self.p_expr[3]) 
self.p_v[3] = Symbol('z') 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[3] 
self.p_c[2] = Integer(8) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[3] 
self.p_c[0] = Integer(4) 
self.p_expr[1] = self.p_v[3] 
self.p_expr[3] = simplify(self.p_expr[3]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[3] = powsimp(self.p_expr[2]) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[2])) 
self.p_expr[2] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = sin(self.p_expr[1]) 
self.p_v[1] = Symbol('x') 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3].doit() 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_term[1] = self.p_c[2] * self.p_v[3] ** self.p_c[2] 
self.p_expr[3] = expand_func(self.p_expr[2]) 
self.p_expr[0] = factorial(self.p_expr[0]) 
self.p_expr[2] = factorial(self.p_expr[3]) 
self.p_expr[3] = factor(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[3] 
self.p_v[3] = Symbol('x') 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[1].evalf() 
self.p_expr[0] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[2] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[0] = atan(self.p_expr[1]) 
self.p_expr[1] = expand_func(self.p_expr[2]) 
self.p_expr[3] = cancel(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
