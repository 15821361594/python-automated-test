self.p_v[1] = Symbol('h',positive=True) 
self.p_c[0] = Integer(9) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_v[3] = Symbol('l',positive=True) 
self.p_term[3] = self.p_c[0] * self.p_v[3] ** self.p_c[0] 
self.p_expr[2] = pi 
self.p_expr[1] = I 
self.p_v[0] = Symbol('j',positive=True) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[2] = expand_power_exp(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[2] = trigsimp(self.p_expr[1]) 
self.p_expr[1] = logcombine(self.p_expr[0]) 
self.p_expr[0] = expand_power_exp(self.p_expr[0]) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = expand_func(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[3] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = tan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = apart(self.p_expr[1]) 
