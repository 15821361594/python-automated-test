self.p_c[2] = Integer(3) 
self.p_expr[3] = E 
self.p_v[3] = Symbol('d') 
self.p_expr[2] = simplify(self.p_expr[3]) 
self.p_expr[0] = expand_log(self.p_expr[3]) 
self.p_c[0] = Integer(9) 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[2])) 
self.p_expr[0] = combsimp(self.p_expr[0]) 
self.p_c[2] = Integer(4) 
self.p_expr[0] = combsimp(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = combsimp(self.p_expr[1]) 
self.p_c[2] = Integer(3) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[2])) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[3] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[2] = atan(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[0] 
self.p_expr[0] = expand_log(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_v[1] = Symbol('i',positive=True) 
self.p_expr[1] = powsimp(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = expand(self.p_expr[0],force=True) 
self.p_expr[2] = trigsimp(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[0])) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = expand(self.p_expr[1],force=True) 
self.p_expr[0] = logcombine(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[0])) 
self.p_expr[1] = expand_func(self.p_expr[1]) 
self.p_expr[1] = combsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[3] 
self.p_c[2] = Integer(2) 
self.p_v[0] = Symbol('c') 
self.p_expr[3] = self.p_expr[2] % self.p_expr[1] 
