self.p_v[1] = Symbol('a') 
self.p_v[0] = Symbol('b') 
self.p_c[2] = Integer(9) 
self.p_expr[3] = self.p_c[2] 
self.p_expr[2] = expand_func(self.p_expr[3]) 
self.p_expr[0] = E 
self.p_expr[3] = cancel(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = tan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = expand_power_base(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[0] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[2] = sqrt(self.p_expr[3]) 
self.p_expr[3] = sqrt(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].doit() 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[3] = powsimp(self.p_expr[3]) 
self.p_expr[0] = simplify(self.p_expr[0]) 
self.p_expr[0] = sqrt(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[2] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = powsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_v[1] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = apart(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_v[1] = Symbol('i',positive=True) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[2] = factorial(self.p_expr[0]) 
self.p_c[2] = Integer(5) 
self.p_term[1] = self.p_c[2] * self.p_v[1] ** self.p_c[2] 
self.p_expr[0] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[3] = acos(self.p_expr[1]) 
self.p_c[0] = Integer(9) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_poly[1] = self.p_term[1] + self.p_term[1] 
self.p_expr[1] = expand(self.p_expr[3],force=True) 
self.p_expr[3] = apart(self.p_expr[0]) 
