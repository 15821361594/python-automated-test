self.p_c[3] = Integer(8) 
self.p_v[2] = Symbol('i',positive=True) 
self.p_c[1] = Integer(10) 
self.p_v[0] = Symbol('d') 
self.p_term[2] = self.p_c[3] * self.p_v[0] ** self.p_c[3] 
self.p_v[0] = Symbol('k',positive=True) 
self.p_term[3] = self.p_c[1] * self.p_v[2] ** self.p_c[1] 
self.p_poly[2] = self.p_term[3] + self.p_term[3] 
self.p_expr[0] = E 
self.p_v[2] = Symbol('i',positive=True) 
self.p_expr[3] = expand_power_exp(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = apart(self.p_expr[0]) 
self.p_expr[0] = expand_func(self.p_expr[1]) 
self.p_expr[1] = logcombine(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = factor(self.p_expr[2]) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[1])) 
self.p_expr[1] = expand_power_base(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = Rational(self.p_c[1],self.p_c[3]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[3]) 
self.p_expr[3] = expand_log(self.p_expr[2]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = tan(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
