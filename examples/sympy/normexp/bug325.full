self.p_v[3] = Symbol('k',positive=True) 
self.p_v[1] = Symbol('a') 
self.p_c[2] = Integer(10) 
self.p_expr[3] = self.p_c[2] 
self.p_expr[1] = self.p_v[3] 
self.p_expr[0] = expand_trig(self.p_expr[1]) 
self.p_expr[1] = factor(self.p_expr[1]) 
self.p_term[1] = self.p_c[2] * self.p_v[3] ** self.p_c[2] 
self.p_expr[1] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[2] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[2] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[1] = self.p_expr[3].doit() 
self.p_expr[0] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = expand_log(self.p_expr[1]) 
self.p_c[1] = Integer(0) 
self.p_expr[2] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[2] = powsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[2] 
