self.p_expr[0] = pi 
self.p_expr[1] = powsimp(self.p_expr[0]) 
self.p_expr[2] = combsimp(self.p_expr[0]) 
self.p_expr[0] = expand_log(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = simplify(self.p_expr[0]) 
self.p_v[3] = Symbol('x') 
self.p_expr[0] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[0] = factor(self.p_expr[2]) 
self.p_expr[2] = atan(self.p_expr[0]) 
self.p_expr[0] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = expand_log(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[2] 
self.p_v[0] = Symbol('x') 
self.p_expr[2] = expand_power_exp(self.p_expr[2]) 
self.p_expr[3] = expand_trig(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[0] 
self.p_c[2] = Integer(8) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = expand(self.p_expr[2],force=True) 
self.p_expr[0] = combsimp(self.p_expr[2]) 
self.p_expr[2] = logcombine(self.p_expr[2]) 
self.p_expr[2] = acos(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].doit() 
self.p_expr[3] = combsimp(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
