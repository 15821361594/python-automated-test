self.p_v[2] = Symbol('b') 
self.p_v[3] = Symbol('f',positive=True) 
self.p_v[0] = Symbol('z') 
self.p_expr[3] = pi 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = simplify(self.p_expr[2]) 
self.p_c[1] = Integer(3) 
self.p_expr[2] = sqrt(self.p_expr[2]) 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[0] = expand(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_expr[1] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = expand_power_base(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = expand_func(self.p_expr[0]) 
self.p_expr[2] = acos(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = expand_power_base(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = atan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[2] 
