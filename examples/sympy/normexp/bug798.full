self.p_c[1] = Integer(0) 
self.p_expr[3] = pi 
self.p_expr[2] = logcombine(self.p_expr[3]) 
self.p_v[3] = Symbol('e',positive=True) 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_expr[3] = expand(self.p_expr[2],force=True) 
self.p_v[1] = Symbol('c') 
self.p_expr[2] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[1] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[3] = expand_trig(self.p_expr[2]) 
self.p_expr[2] = logcombine(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[2] = expand_power_base(self.p_expr[2]) 
self.p_term[0] = self.p_c[1] * self.p_v[1] ** self.p_c[1] 
self.p_c[0] = Integer(6) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[3] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[2] = acos(self.p_expr[0]) 
self.p_expr[0] = powdenest(self.p_expr[3]) 
self.p_expr[3] = cos(self.p_expr[0]) 
self.p_expr[0] = expand_trig(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_v[3] = Symbol('d') 
self.p_expr[3] = self.p_expr[1] + self.p_expr[2] 
self.p_term[3] = self.p_c[1] * self.p_v[1] ** self.p_c[1] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_term[1] = self.p_c[0] * self.p_v[1] ** self.p_c[1] 
self.p_expr[0] = factor(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_c[1] = Integer(1) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[2] 
self.p_c[3] = Integer(5) 
self.p_expr[2] = trigsimp(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[0]) 
self.p_expr[0] = apart(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = logcombine(self.p_expr[1]) 
self.p_expr[1] = tan(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = acos(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = combsimp(self.p_expr[0]) 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = tan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[2] 
