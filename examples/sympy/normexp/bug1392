self.p_v[0] = Symbol('d') 
self.p_expr[2] = I 
self.p_expr[1] = expand_log(self.p_expr[2]) 
self.p_expr[3] = powsimp(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_c[1] = Integer(6) 
self.p_expr[1] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = sin(self.p_expr[3]) 
self.p_c[2] = Integer(9) 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = sqrt(self.p_expr[0]) 
self.p_term[1] = self.p_c[1] * self.p_v[0] ** self.p_c[2] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[3] = self.p_expr[3] + self.p_expr[2] 
self.p_term[0] = self.p_c[1] * self.p_v[0] ** self.p_c[1] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[3] = expand_log(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[1] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[1])) 
self.p_c[0] = Integer(1) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
