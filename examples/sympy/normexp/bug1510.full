self.p_expr[3] = E 
self.p_c[0] = Integer(6) 
self.p_v[0] = Symbol('c') 
self.p_c[1] = Integer(0) 
self.p_expr[2] = Rational(self.p_c[1],self.p_c[0]) 
self.p_expr[0] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[0] = factor(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[2] = I 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[2] = sqrt(self.p_expr[0]) 
self.p_v[0] = Symbol('y') 
self.p_expr[3] = apart(self.p_expr[2]) 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[0] = powdenest(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[0] 
