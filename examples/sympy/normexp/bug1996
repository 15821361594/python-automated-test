self.p_v[3] = Symbol('f',positive=True) 
self.p_v[0] = Symbol('z') 
self.p_c[1] = Integer(0) 
self.p_expr[0] = E 
self.p_term[1] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_expr[2] = expand_func(self.p_expr[0]) 
self.p_v[3] = Symbol('k',positive=True) 
self.p_c[3] = Integer(8) 
self.p_c[0] = Integer(0) 
self.p_expr[0] = expand_log(self.p_expr[0]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = expand_power_exp(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[2] = sqrt(self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[2] 
