self.p_v[1] = Symbol('b') 
self.p_c[1] = Integer(8) 
self.p_v[3] = Symbol('z') 
self.p_c[0] = Integer(8) 
self.p_expr[2] = E 
self.p_expr[1] = expand_func(self.p_expr[2]) 
self.p_expr[0] = factorial(self.p_expr[2]) 
self.p_expr[3] = expand_func(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[3] = expand(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[0] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[2] = expand_power_base(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = simplify(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = asin(self.p_expr[1]) 
self.p_expr[1] = expand(self.p_expr[0],force=True) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = expand(self.p_expr[2],force=True) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[1] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = self.p_c[1] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_term[2] = self.p_c[1] * self.p_v[1] ** self.p_c[0] 
self.p_expr[0] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[1] = self.p_expr[3] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[0])) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = powsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[0] = expand_log(self.p_expr[1]) 
self.p_expr[2] = tan(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[1] 
