self.p_v[0] = Symbol('d') 
self.p_v[3] = Symbol('c') 
self.p_c[0] = Integer(0) 
self.p_expr[2] = I 
self.p_expr[1] = tan(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[2] 
self.p_c[3] = Integer(5) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[3] = expand(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[3]) 
self.p_expr[1] = cancel(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[0])) 
self.p_expr[3] = expand(self.p_expr[3]) 
self.p_expr[3] = sqrt(self.p_expr[0]) 
self.p_c[2] = Integer(3) 
self.p_expr[0] = logcombine(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[3])) 
self.p_expr[3] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[3] 
