self.p_c[2] = Integer(8) 
self.p_expr[1] = pi 
self.p_v[0] = Symbol('j',positive=True) 
self.p_c[0] = Integer(3) 
self.p_expr[2] = E 
self.p_expr[3] = cos(self.p_expr[2]) 
self.p_term[0] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_v[3] = Symbol('a') 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_v[0] = Symbol('e',positive=True) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = factor(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[2])) 
self.p_expr[3] = powsimp(self.p_expr[3]) 
self.p_expr[1] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = I 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_term[3] = self.p_c[2] * self.p_v[3] ** self.p_c[0] 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_c[0] = Integer(8) 
self.p_expr[3] = trigsimp(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
