self.p_v[2] = Symbol('z') 
self.p_expr[3] = pi 
self.p_expr[2] = expand(self.p_expr[3],force=True) 
self.p_expr[0] = expand_trig(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = expand_log(self.p_expr[2]) 
self.p_expr[2] = expand_trig(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = sqrt(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = apart(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = cos(self.p_expr[2]) 
self.p_expr[2] = expand_trig(self.p_expr[0]) 
self.p_c[2] = Integer(3) 
self.p_expr[0] = simplify(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = tan(self.p_expr[3]) 
self.p_expr[3] = expand_power_base(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[0] 
