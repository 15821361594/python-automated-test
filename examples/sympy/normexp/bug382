self.p_c[2] = Integer(7) 
self.p_expr[1] = Rational(self.p_c[2],self.p_c[2]) 
self.p_v[2] = Symbol('a') 
self.p_expr[0] = E 
self.p_expr[3] = combsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[3] = expand_log(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[2] = atan(self.p_expr[1]) 
self.p_v[0] = Symbol('x') 
self.p_expr[3] = expand(self.p_expr[2]) 
self.p_expr[1] = asin(self.p_expr[3]) 
self.p_expr[2] = cos(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[3] 
self.p_c[0] = Integer(4) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = simplify(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[1] 
