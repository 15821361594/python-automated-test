self.p_v[3] = Symbol('d') 
self.p_c[0] = Integer(8) 
self.p_c[1] = Integer(6) 
self.p_expr[2] = Rational(self.p_c[0],self.p_c[1]) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_c[2] = Integer(4) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = combsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[1] 
self.p_v[1] = Symbol('z') 
self.p_expr[1] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[0] = cos(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = acos(self.p_expr[2]) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[2])) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_c[0] = Integer(3) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[1].evalf() 
self.p_expr[2] = trigsimp(self.p_expr[1]) 
self.p_term[3] = self.p_c[1] * self.p_v[1] ** self.p_c[0] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = powdenest(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = tan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[3] 
