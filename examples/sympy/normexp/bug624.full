self.p_v[3] = Symbol('a') 
self.p_c[2] = Integer(10) 
self.p_v[0] = Symbol('g',positive=True) 
self.p_expr[1] = I 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[0] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[3] = expand_func(self.p_expr[0]) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[1] = self.p_expr[1].doit() 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = factorial(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[3] = factor(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = powsimp(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = expand_power_exp(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = asin(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[3] = powsimp(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = expand_log(self.p_expr[0]) 
self.p_expr[0] = powdenest(self.p_expr[1]) 
self.p_expr[1] = sin(self.p_expr[1]) 
self.p_c[0] = Integer(10) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[2])) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
