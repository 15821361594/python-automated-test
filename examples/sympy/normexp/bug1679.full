self.p_v[0] = Symbol('x') 
self.p_expr[3] = I 
self.p_expr[0] = trigsimp(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = I 
self.p_expr[3] = combsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = apart(self.p_expr[2]) 
self.p_c[0] = Integer(2) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[2] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[3] = sin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
self.p_v[3] = Symbol('i',positive=True) 
self.p_expr[0] = expand(self.p_expr[3],force=True) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_c[0] = Integer(10) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[3]) 
self.p_expr[3].evalf() 
self.p_expr[3] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[2] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[3] = expand_log(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0].doit() 
self.p_expr[0] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[2] = expand(self.p_expr[2],force=True) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[2] = asin(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = logcombine(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
