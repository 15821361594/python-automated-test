self.p_v[2] = Symbol('x') 
self.p_v[1] = Symbol('c') 
self.p_c[0] = Integer(0) 
self.p_expr[0] = pi 
self.p_expr[1] = expand(self.p_expr[0],force=True) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[0] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[3] = asin(self.p_expr[0]) 
self.p_expr[1] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[2] = factorial(self.p_expr[3]) 
self.p_expr[3] = expand(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = acos(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_v[0] = Symbol('h',positive=True) 
self.p_expr[1] = sqrt(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[0] = combsimp(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = apart(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[2] = expand_trig(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[3] = atan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = powsimp(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[0] 
