self.p_v[0] = Symbol('l',positive=True) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_v[1] = Symbol('l',positive=True) 
self.p_c[0] = Integer(8) 
self.p_expr[0] = I 
self.p_expr[3] = atan(self.p_expr[0]) 
self.p_expr[2] = expand(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = sin(self.p_expr[2]) 
self.p_expr[2] = powdenest(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = expand(self.p_expr[1],force=True) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[3] = acos(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[3] = sqrt(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = sqrt(self.p_expr[3]) 
self.p_expr[3] = combsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = factorial(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2].doit() 
self.p_expr[0].evalf() 
self.p_expr[2] = self.p_expr[0] % self.p_expr[1] 
