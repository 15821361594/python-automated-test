self.p_expr[2] = pi 
self.p_expr[3] = E 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[3] 
self.p_v[3] = Symbol('j',positive=True) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[3] 
self.p_v[2] = Symbol('x') 
self.p_v[1] = Symbol('a') 
self.p_expr[2] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[2] = powdenest(self.p_expr[3]) 
self.p_c[3] = Integer(5) 
self.p_expr[3] = atan(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[0] = expand_trig(self.p_expr[0]) 
self.p_expr[0] = expand_log(self.p_expr[0]) 
self.p_c[0] = Integer(5) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[2] 
self.p_term[3] = self.p_c[0] * self.p_v[2] ** self.p_c[0] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_c[0] = Integer(9) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[3] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[0] = sqrt(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].doit() 
self.p_expr[1] = self.p_expr[1] - self.p_expr[3] 
self.p_v[2] = Symbol('e',positive=True) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = factorial(self.p_expr[2]) 
self.p_expr[3] = factorial(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_v[3] = Symbol('x') 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = powsimp(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = expand_func(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[0] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[3] = pi 
self.p_expr[0] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[2] + self.p_expr[0] 
self.p_v[3] = Symbol('c') 
self.p_expr[2] = self.p_expr[0] / self.p_expr[1] 
self.p_term[2] = self.p_c[0] * self.p_v[1] ** self.p_c[3] 
self.p_expr[3] = expand_power_base(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3] - self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[2] = self.p_expr[2] % self.p_expr[0] 
self.p_expr[1] = expand_power_base(self.p_expr[0]) 
self.p_expr[0] = asin(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].doit() 
