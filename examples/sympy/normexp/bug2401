self.p_expr[2] = E 
self.p_c[2] = Integer(7) 
self.p_expr[1] = simplify(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[3] = self.p_expr[2] + self.p_expr[2] 
self.p_v[2] = Symbol('z') 
self.p_expr[2] = atan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = tan(self.p_expr[0]) 
self.p_expr[0] = sin(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_c[1] = Integer(4) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0].evalf() 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_expr[1] = cos(self.p_expr[1]) 
self.p_expr[0] = combsimp(self.p_expr[3]) 
self.p_expr[1] = self.p_v[2] 
self.p_expr[3] = factorial(self.p_expr[2]) 
self.p_v[3] = Symbol('b') 
self.p_term[3] = self.p_c[1] * self.p_v[2] ** self.p_c[2] 
self.p_expr[2] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_c[1] = Integer(0) 
self.p_expr[3] = cos(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = E 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[2])) 
self.p_expr[0] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = atan(self.p_expr[0]) 
self.p_c[3] = Integer(3) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[2])) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
