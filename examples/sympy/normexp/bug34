self.p_v[1] = Symbol('z') 
self.p_expr[1] = E 
self.p_v[0] = Symbol('c') 
self.p_v[2] = Symbol('e',positive=True) 
self.p_expr[0] = pi 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = atan(self.p_expr[0]) 
self.p_c[3] = Integer(8) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = cancel(self.p_expr[1]) 
self.p_expr[3] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[1] = sqrt(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[2] = factor(self.p_expr[3]) 
self.p_expr[3] = simplify(self.p_expr[2]) 
self.p_expr[2] = tan(self.p_expr[1]) 
self.p_c[2] = Integer(5) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
