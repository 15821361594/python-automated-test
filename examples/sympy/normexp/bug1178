self.p_expr[1] = I 
self.p_expr[0] = self.p_expr[1].doit() 
self.p_v[0] = Symbol('h',positive=True) 
self.p_v[2] = Symbol('y') 
self.p_c[1] = Integer(8) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_expr[0] = acos(self.p_expr[2]) 
self.p_expr[3] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_c[0] = Integer(4) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = powsimp(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[0])) 
self.p_expr[3] = expand_power_exp(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
