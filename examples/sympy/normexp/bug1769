self.p_c[2] = Integer(6) 
self.p_expr[0] = E 
self.p_expr[1] = I 
self.p_expr[3] = apart(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = powsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0].doit() 
self.p_expr[0] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[3] 
self.p_c[1] = Integer(6) 
self.p_expr[2] = self.p_c[2] 
self.p_expr[3] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[1] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = powsimp(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[2] = cos(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = factor(self.p_expr[1]) 
self.p_expr[0] = Rational(self.p_c[1],self.p_c[2]) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[3] 
self.p_c[1] = Integer(5) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = trigsimp(self.p_expr[0]) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_v[3] = Symbol('z') 
self.p_expr[0] = expand(self.p_expr[0],force=True) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = factor(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[0] 
