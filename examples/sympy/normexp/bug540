self.p_v[2] = Symbol('a') 
self.p_v[0] = Symbol('a') 
self.p_v[3] = Symbol('e',positive=True) 
self.p_c[1] = Integer(4) 
self.p_expr[3] = pi 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_c[3] = Integer(4) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[1])) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = self.p_v[0] 
self.p_expr[0] = expand(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[2] 
self.p_term[0] = self.p_c[3] * self.p_v[3] ** self.p_c[3] 
self.p_expr[1] = Rational(self.p_c[3],self.p_c[1]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_expr[0] = cancel(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[1])) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_v[0] = Symbol('l',positive=True) 
self.p_expr[1] = expand(self.p_expr[2]) 
self.p_expr[2] = factorial(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[2] = self.p_expr[3] + self.p_expr[1] 
self.p_v[3] = Symbol('l',positive=True) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
