self.p_expr[3] = E 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = trigsimp(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[3] = powsimp(self.p_expr[2]) 
self.p_v[2] = Symbol('c') 
self.p_expr[0] = logcombine(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = combsimp(self.p_expr[2]) 
self.p_expr[0] = powdenest(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[2] = tan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[2] = powdenest(self.p_expr[1]) 
self.p_c[2] = Integer(2) 
self.p_expr[0] = sin(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[3] = logcombine(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = atan(self.p_expr[1]) 
self.p_expr[1] = pi 
self.p_expr[2] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[2] = combsimp(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = factor(self.p_expr[0]) 
self.p_expr[0] = expand_trig(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
