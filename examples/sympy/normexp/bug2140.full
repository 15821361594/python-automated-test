self.p_v[2] = Symbol('y') 
self.p_expr[0] = self.p_v[2] 
self.p_c[2] = Integer(10) 
self.p_c[0] = Integer(7) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[2] = expand_power_base(self.p_expr[1]) 
self.p_expr[0] = logcombine(self.p_expr[0]) 
self.p_v[2] = Symbol('y') 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[3] = atan(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_v[1] = Symbol('x') 
self.p_expr[0] = tan(self.p_expr[1]) 
self.p_c[2] = Integer(7) 
self.p_c[3] = Integer(9) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[2] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = trigsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[2] = tan(self.p_expr[3]) 
self.p_term[1] = self.p_c[3] * self.p_v[2] ** self.p_c[3] 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[2])) 
self.p_expr[3] = tan(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] ** self.p_expr[0] 
self.p_poly[2] = self.p_term[1] 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[2])) 
self.p_term[1] = self.p_c[3] * self.p_v[1] ** self.p_c[0] 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = logcombine(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_c[2] = Integer(5) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[0])) 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_v[2] = Symbol('h',positive=True) 
self.p_expr[2] = trigsimp(self.p_expr[1]) 
