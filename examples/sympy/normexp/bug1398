self.p_c[2] = Integer(8) 
self.p_c[0] = Integer(2) 
self.p_c[1] = Integer(9) 
self.p_v[0] = Symbol('g',positive=True) 
self.p_expr[0] = I 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_v[0] = Symbol('z') 
self.p_expr[3] = expand_trig(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_term[2] = self.p_c[0] * self.p_v[0] ** self.p_c[1] 
self.p_expr[0] = self.p_expr[2] / self.p_expr[0] 
self.p_term[0] = self.p_c[1] * self.p_v[0] ** self.p_c[0] 
self.p_expr[2] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = expand_power_exp(self.p_expr[0]) 
self.p_expr[3] = cancel(self.p_expr[0]) 
self.p_c[1] = Integer(6) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = factor(self.p_expr[0]) 
self.p_expr[2] = cancel(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[1] = Rational(self.p_c[2],self.p_c[0]) 
self.p_expr[0] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[3] = logcombine(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = expand_trig(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].doit() 
self.p_expr[3] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
