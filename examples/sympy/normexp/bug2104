self.p_c[1] = Integer(3) 
self.p_c[0] = Integer(2) 
self.p_c[3] = Integer(10) 
self.p_v[3] = Symbol('d') 
self.p_expr[0] = pi 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[1])) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[1] = acos(self.p_expr[3]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[0] = powsimp(self.p_expr[1]) 
self.p_term[2] = self.p_c[0] * self.p_v[3] ** self.p_c[1] 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[3]) 
self.p_expr[3] = expand_trig(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] / self.p_expr[3] 
self.p_c[2] = Integer(8) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = logcombine(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[2] = powsimp(self.p_expr[3]) 
self.p_c[3] = Integer(6) 
self.p_expr[1] = expand(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = Rational(self.p_c[0],self.p_c[2]) 
self.p_expr[0] = self.p_expr[2].doit() 
self.p_expr[2] = self.p_expr[0] * self.p_expr[3] 
self.p_term[0] = self.p_c[1] * self.p_v[3] ** self.p_c[3] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[0])) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[3] 
self.p_term[3] = self.p_c[3] * self.p_v[3] ** self.p_c[0] 
self.p_expr[3] = self.p_expr[0] % self.p_expr[1] 
