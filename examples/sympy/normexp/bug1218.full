self.p_c[1] = Integer(4) 
self.p_v[2] = Symbol('z') 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[0] = I 
self.p_expr[3] = expand_func(self.p_expr[0]) 
self.p_expr[2] = expand_power_base(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = expand(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[2].doit() 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = logcombine(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = expand_log(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[0] = cancel(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[1] = asin(self.p_expr[0]) 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[2] = atan(self.p_expr[0]) 
self.p_expr[0] = trigsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = expand(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
