self.p_expr[0] = pi 
self.p_c[0] = Integer(5) 
self.p_c[3] = Integer(7) 
self.p_expr[3] = asin(self.p_expr[0]) 
self.p_c[1] = Integer(9) 
self.p_expr[1] = atan(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = expand(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[0] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[1] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[0]) 
self.p_expr[2] = sin(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[0] 
self.p_c[0] = Integer(1) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[0].doit() 
self.p_expr[2].evalf() 
self.p_expr[2] = expand_func(self.p_expr[0]) 
self.p_expr[0].evalf() 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = factorial(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = expand(self.p_expr[0]) 
self.p_expr[0] = sqrt(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = sqrt(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = powdenest(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[1] 
self.p_c[2] = Integer(7) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[0] = cancel(self.p_expr[3]) 
self.p_expr[3] = combsimp(self.p_expr[1]) 
