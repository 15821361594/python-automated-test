self.p_expr[2] = E 
self.p_c[3] = Integer(8) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[3] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[3] 
self.p_c[2] = Integer(8) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[2])) 
self.p_expr[3] = expand_trig(self.p_expr[3]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[2]) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = combsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_term[0] = self.p_c[3] * self.p_v[3] ** self.p_c[3] 
self.p_v[0] = Symbol('y') 
self.p_v[3] = Symbol('i',positive=True) 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[1] = apart(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[3] 
