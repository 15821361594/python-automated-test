self.p_expr[3] = E 
self.p_v[3] = Symbol('g',positive=True) 
self.p_expr[1] = atan(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = expand(self.p_expr[0]) 
self.p_expr[2] = apart(self.p_expr[1]) 
self.p_v[2] = Symbol('e',positive=True) 
self.p_expr[0] = asin(self.p_expr[2]) 
self.p_expr[3] = sin(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[1] = factorial(self.p_expr[2]) 
self.p_c[1] = Integer(4) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[2] 
self.p_c[0] = Integer(3) 
self.p_expr[2] = asin(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] * self.p_expr[1] 
self.p_term[3] = self.p_c[1] * self.p_v[2] ** self.p_c[1] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] * self.p_expr[1] 
self.p_v[2] = Symbol('d') 
self.p_expr[3] = powsimp(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[0] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[3] 
