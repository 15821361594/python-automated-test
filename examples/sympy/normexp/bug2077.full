self.p_v[3] = Symbol('x') 
self.p_v[2] = Symbol('a') 
self.p_c[3] = Integer(2) 
self.p_c[0] = Integer(0) 
self.p_term[1] = self.p_c[3] * self.p_v[3] ** self.p_c[0] 
self.p_c[3] = Integer(6) 
self.p_c[0] = Integer(10) 
self.p_term[2] = self.p_c[3] * self.p_v[2] ** self.p_c[0] 
self.p_expr[0] = E 
self.p_expr[2] = sqrt(self.p_expr[0]) 
self.p_expr[1] = powsimp(self.p_expr[2]) 
self.p_expr[0] = tan(self.p_expr[0]) 
self.p_expr[0] = expand_power_base(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[1] = self.p_expr[3] / self.p_expr[3] 
self.p_v[0] = Symbol('z') 
self.p_expr[2] = self.p_c[3] 
self.p_c[0] = Integer(3) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[2] = acos(self.p_expr[3]) 
self.p_expr[3] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[0] = sqrt(self.p_expr[0]) 
self.p_expr[0] = combsimp(self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[0]) 
self.p_term[3] = self.p_c[3] * self.p_v[2] ** self.p_c[0] 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_c[3] = Integer(1) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
