self.p_c[3] = Integer(4) 
self.p_v[1] = Symbol('c') 
self.p_expr[2] = E 
self.p_c[1] = Integer(1) 
self.p_expr[3] = cos(self.p_expr[2]) 
self.p_expr[2] = cos(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = self.p_c[1] 
self.p_expr[1] = logcombine(self.p_expr[3]) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[1])) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = factorial(self.p_expr[1]) 
self.p_v[3] = Symbol('x') 
self.p_expr[1] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[0] = expand_power_base(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[1])) 
self.p_term[0] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_expr[2] = apart(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
