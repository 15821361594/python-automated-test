self.p_c[2] = Integer(7) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_c[1] = Integer(8) 
self.p_expr[3] = self.p_c[2] 
self.p_expr[1] = self.p_expr[3].doit() 
self.p_term[0] = self.p_c[2] * self.p_v[2] ** self.p_c[1] 
self.p_v[0] = Symbol('z') 
self.p_expr[0] = Rational(self.p_c[1],self.p_c[2]) 
self.p_c[2] = Integer(8) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[1])) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] - self.p_expr[1] 
self.p_v[3] = Symbol('b') 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[1])) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_c[3] = Integer(2) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[3] 
