self.p_c[2] = Integer(0) 
self.p_v[3] = Symbol('x') 
self.p_c[1] = Integer(1) 
self.p_expr[2] = E 
self.p_expr[3] = sin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_v[2] = Symbol('x') 
self.p_term[2] = self.p_c[2] * self.p_v[2] ** self.p_c[1] 
self.p_c[2] = Integer(2) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_v[3] = Symbol('d') 
self.p_expr[2] = expand_log(self.p_expr[2]) 
self.p_expr[1] = expand_power_base(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = combsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[3] 
self.p_c[0] = Integer(1) 
self.p_expr[3] = cos(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_term[3] = self.p_c[2] * self.p_v[2] ** self.p_c[2] 
self.p_expr[2] = powdenest(self.p_expr[3]) 
self.p_v[2] = Symbol('j',positive=True) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = expand_log(self.p_expr[0]) 
self.p_term[0] = self.p_c[2] * self.p_v[2] ** self.p_c[2] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[0] 
