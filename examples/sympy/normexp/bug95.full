self.p_c[2] = Integer(10) 
self.p_expr[2] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[3] = expand(self.p_expr[2]) 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[0] = acos(self.p_expr[3]) 
self.p_c[0] = Integer(8) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = acos(self.p_expr[0]) 
self.p_expr[1] = powsimp(self.p_expr[0]) 
self.p_expr[0] = sqrt(self.p_expr[2]) 
self.p_expr[2] = expand(self.p_expr[0]) 
self.p_c[1] = Integer(3) 
self.p_expr[0] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[0] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = factorial(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[2] 
