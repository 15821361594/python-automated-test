self.p_c[3] = Integer(8) 
self.p_expr[1] = Rational(self.p_c[3],self.p_c[3]) 
self.p_v[1] = Symbol('y') 
self.p_expr[2] = cos(self.p_expr[1]) 
self.p_expr[1] = acos(self.p_expr[1]) 
self.p_expr[3] = expand_power_base(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[3] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = sin(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = sin(self.p_expr[2]) 
self.p_v[3] = Symbol('c') 
self.p_v[0] = Symbol('y') 
self.p_c[0] = Integer(10) 
self.p_expr[2] = powsimp(self.p_expr[2]) 
self.p_expr[2] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_c[2] = Integer(3) 
self.p_expr[1] = Rational(self.p_c[2],self.p_c[3]) 
self.p_c[3] = Integer(0) 
self.p_expr[2].evalf() 
self.p_expr[2] = atan(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_term[0] = self.p_c[0] * self.p_v[0] ** self.p_c[2] 
self.p_expr[3] = trigsimp(self.p_expr[3]) 
self.p_term[1] = self.p_c[3] * self.p_v[3] ** self.p_c[0] 
self.p_expr[0].evalf() 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[3] 
