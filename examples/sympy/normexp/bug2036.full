self.p_c[2] = Integer(4) 
self.p_expr[1] = self.p_c[2] 
self.p_expr[3] = E 
self.p_v[2] = Symbol('b') 
self.p_expr[2] = expand_power_exp(self.p_expr[3]) 
self.p_expr[0] = expand(self.p_expr[2],force=True) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[3] = simplify(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[0] 
self.p_c[2] = Integer(7) 
self.p_expr[1] = acos(self.p_expr[0]) 
self.p_expr[0] = factorial(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = powdenest(self.p_expr[2]) 
self.p_expr[2] = expand_power_base(self.p_expr[2]) 
self.p_expr[0] = apart(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[2] = expand_log(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[0] = factorial(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[1] = factorial(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[2] = atan(self.p_expr[2]) 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[1] 
