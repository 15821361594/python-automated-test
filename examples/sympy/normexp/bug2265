self.p_c[0] = Integer(0) 
self.p_v[0] = Symbol('c') 
self.p_v[1] = Symbol('k',positive=True) 
self.p_c[1] = Integer(6) 
self.p_term[3] = self.p_c[1] * self.p_v[0] ** self.p_c[1] 
self.p_v[2] = Symbol('l',positive=True) 
self.p_term[1] = self.p_c[1] * self.p_v[1] ** self.p_c[1] 
self.p_poly[2] = self.p_term[3] 
self.p_v[0] = Symbol('d') 
self.p_v[3] = Symbol('d') 
self.p_term[2] = self.p_c[1] * self.p_v[2] ** self.p_c[0] 
self.p_expr[0] = self.p_c[0] 
self.p_expr[3] = asin(self.p_expr[0]) 
self.p_c[3] = Integer(3) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = Rational(self.p_c[3],self.p_c[1]) 
self.p_expr[0] = expand(self.p_expr[3],force=True) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[3] 
