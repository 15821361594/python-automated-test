self.p_expr[3] = E 
self.p_expr[1] = powsimp(self.p_expr[3]) 
self.p_c[1] = Integer(6) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = E 
self.p_c[0] = Integer(9) 
self.p_expr[1] = atan(self.p_expr[0]) 
self.p_v[2] = Symbol('d') 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_v[2] = Symbol('j',positive=True) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[3] = cancel(self.p_expr[1]) 
self.p_expr[0] = apart(self.p_expr[2]) 
self.p_expr[1] = tan(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = tan(self.p_expr[1]) 
self.p_v[0] = Symbol('y') 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[3] 
self.p_term[2] = self.p_c[0] * self.p_v[2] ** self.p_c[0] 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_c[0] = Integer(4) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[1] 
