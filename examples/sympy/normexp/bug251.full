self.p_c[1] = Integer(8) 
self.p_expr[2] = pi 
self.p_expr[0] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[1] = combsimp(self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = acos(self.p_expr[1]) 
self.p_expr[1] = expand(self.p_expr[0]) 
self.p_expr[0] = trigsimp(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = sin(self.p_expr[1]) 
self.p_v[1] = Symbol('x') 
self.p_expr[1] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[2] = apart(self.p_expr[2]) 
self.p_expr[3] = acos(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] - self.p_expr[1] 
self.p_v[2] = Symbol('c') 
self.p_expr[2] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[1] = self.p_v[2] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = powdenest(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[2] = powsimp(self.p_expr[3]) 
self.p_v[2] = Symbol('k',positive=True) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[3] = cancel(self.p_expr[2]) 
self.p_c[3] = Integer(9) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[3] 
