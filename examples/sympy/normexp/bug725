self.p_c[3] = Integer(2) 
self.p_c[1] = Integer(10) 
self.p_expr[2] = Rational(self.p_c[3],self.p_c[3]) 
self.p_v[3] = Symbol('z') 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[0] = cancel(self.p_expr[3]) 
self.p_c[0] = Integer(4) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = expand_trig(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = factorial(self.p_expr[1]) 
self.p_term[0] = self.p_c[1] * self.p_v[3] ** self.p_c[3] 
self.p_expr[0] = acos(self.p_expr[2]) 
self.p_term[1] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = atan(self.p_expr[3]) 
self.p_expr[3] = expand(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
