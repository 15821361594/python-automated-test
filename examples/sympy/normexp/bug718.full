self.p_v[1] = Symbol('k',positive=True) 
self.p_v[0] = Symbol('j',positive=True) 
self.p_expr[1] = self.p_v[0] 
self.p_v[3] = Symbol('j',positive=True) 
self.p_v[0] = Symbol('d') 
self.p_expr[0] = cos(self.p_expr[1]) 
self.p_expr[3] = sin(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = combsimp(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[1] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[2] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = asin(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[2] = simplify(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = E 
self.p_expr[0] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = cancel(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = acos(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[2] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
