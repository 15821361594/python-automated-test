self.p_v[0] = Symbol('h',positive=True) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_c[2] = Integer(6) 
self.p_expr[3] = I 
self.p_expr[2] = sin(self.p_expr[3]) 
self.p_expr[0] = cancel(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[0] 
self.p_term[1] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[1] = pi 
self.p_v[3] = Symbol('d') 
self.p_term[2] = self.p_c[2] * self.p_v[3] ** self.p_c[2] 
self.p_expr[0] = asin(self.p_expr[0]) 
self.p_expr[2] = expand(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = cos(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_c[0] = Integer(8) 
self.p_expr[3] = logcombine(self.p_expr[3]) 
self.p_expr[2] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[3] = atan(self.p_expr[3]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = logcombine(self.p_expr[2]) 
self.p_expr[0] = self.p_c[2] 
self.p_expr[2] = expand_func(self.p_expr[1]) 
self.p_v[2] = Symbol('f',positive=True) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[1] = self.p_expr[2].doit() 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
