self.p_c[0] = Integer(9) 
self.p_c[3] = Integer(9) 
self.p_v[3] = Symbol('j',positive=True) 
self.p_c[1] = Integer(8) 
self.p_expr[2] = self.p_v[3] 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[2] = factorial(self.p_expr[0]) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_expr[0] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[1] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = simplify(self.p_expr[0]) 
self.p_term[1] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = powdenest(self.p_expr[0]) 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[3]) 
self.p_expr[0] = cancel(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_expr[1] = expand_power_exp(self.p_expr[0]) 
self.p_term[0] = self.p_c[1] * self.p_v[3] ** self.p_c[3] 
self.p_poly[0] = self.p_term[1] 
self.p_poly[1] = self.p_term[0] + self.p_term[1] 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_term[1] = self.p_c[3] * self.p_v[3] ** self.p_c[0] 
self.p_expr[1] = self.p_expr[1] % self.p_expr[0] 
