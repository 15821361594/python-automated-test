self.p_c[1] = Integer(2) 
self.p_c[2] = Integer(4) 
self.p_v[3] = Symbol('c') 
self.p_v[1] = Symbol('c') 
self.p_expr[1] = self.p_v[1] 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[1])) 
self.p_c[2] = Integer(0) 
self.p_c[3] = Integer(5) 
self.p_expr[0] = expand_log(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[0] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[3])) 
self.p_term[1] = self.p_c[1] * self.p_v[1] ** self.p_c[1] 
self.p_expr[3] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[2] = atan(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_term[2] = self.p_c[3] * self.p_v[3] ** self.p_c[1] 
self.p_expr[0] = powsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[1] = cos(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[2] 
