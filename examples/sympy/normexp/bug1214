self.p_c[3] = Integer(6) 
self.p_v[1] = Symbol('x') 
self.p_expr[0] = E 
self.p_expr[3] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[2] = expand(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = expand(self.p_expr[2]) 
self.p_expr[2] = apart(self.p_expr[3]) 
self.p_expr[0] = trigsimp(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[2] 
self.p_c[2] = Integer(6) 
self.p_expr[1] = trigsimp(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[2]) 
self.p_expr[2] = powdenest(self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = expand_power_base(self.p_expr[0]) 
self.p_expr[3] = powsimp(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[0] = apart(self.p_expr[1]) 
self.p_expr[1] = powsimp(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = expand_trig(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = powsimp(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_c[2] = Integer(8) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = expand_power_exp(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[2] = Rational(self.p_c[3],self.p_c[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[0] 
