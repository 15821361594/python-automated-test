self.p_c[3] = Integer(8) 
self.p_v[3] = Symbol('l',positive=True) 
self.p_v[2] = Symbol('d') 
self.p_v[1] = Symbol('l',positive=True) 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[3]) 
self.p_c[3] = Integer(8) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = combsimp(self.p_expr[0]) 
self.p_expr[0] = apart(self.p_expr[0]) 
self.p_expr[0] = expand(self.p_expr[1],force=True) 
self.p_expr[2] = cos(self.p_expr[0]) 
self.p_expr[1] = apart(self.p_expr[3]) 
self.p_c[3] = Integer(5) 
self.p_expr[0] = simplify(self.p_expr[3]) 
self.p_expr[3] = cancel(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = expand(self.p_expr[3],force=True) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = factorial(self.p_expr[1]) 
self.p_expr[1] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = expand(self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[0]) 
self.p_c[3] = Integer(3) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[3] 
