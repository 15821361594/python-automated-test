self.p_v[2] = Symbol('b') 
self.p_c[2] = Integer(6) 
self.p_c[3] = Integer(9) 
self.p_c[0] = Integer(5) 
self.p_expr[3] = I 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[3])) 
self.p_expr[3] = expand(self.p_expr[0]) 
self.p_v[0] = Symbol('x') 
self.p_expr[1] = expand_power_base(self.p_expr[2]) 
self.p_expr[0] = cancel(self.p_expr[1]) 
self.p_expr[2] = sqrt(self.p_expr[1]) 
self.p_c[3] = Integer(7) 
self.p_term[3] = self.p_c[3] * self.p_v[2] ** self.p_c[2] 
self.p_v[2] = Symbol('d') 
self.p_c[3] = Integer(10) 
self.p_c[0] = Integer(6) 
self.p_expr[1] = expand(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[1] = self.p_expr[1] % self.p_expr[3] 
