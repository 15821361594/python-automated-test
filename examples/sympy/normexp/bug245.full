self.p_c[3] = Integer(8) 
self.p_c[1] = Integer(9) 
self.p_c[0] = Integer(2) 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[3]) 
self.p_expr[3] = factorial(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = cancel(self.p_expr[3]) 
self.p_expr[3] = expand_log(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_c[2] = Integer(2) 
self.p_expr[3] = sin(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[0] = trigsimp(self.p_expr[1]) 
self.p_c[3] = Integer(6) 
self.p_expr[3] = I 
self.p_expr[1] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[3] = cos(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[2] + self.p_expr[2] 
self.p_v[0] = Symbol('l',positive=True) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
