self.p_c[0] = Integer(4) 
self.p_v[0] = Symbol('y') 
self.p_v[1] = Symbol('z') 
self.p_c[3] = Integer(1) 
self.p_term[0] = self.p_c[0] * self.p_v[1] ** self.p_c[3] 
self.p_v[2] = Symbol('j',positive=True) 
self.p_expr[0] = I 
self.p_v[3] = Symbol('b') 
self.p_term[3] = self.p_c[3] * self.p_v[3] ** self.p_c[3] 
self.p_expr[2] = cancel(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[3] = self.p_expr[0] - self.p_expr[0] 
self.p_c[1] = Integer(9) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_v[1] = Symbol('i',positive=True) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_poly[0] = self.p_term[3] + self.p_term[0] 
self.p_expr[0] = expand_power_base(self.p_expr[3]) 
self.p_c[2] = Integer(5) 
self.p_c[0] = Integer(10) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[3],self.p_c[0])) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
