self.p_expr[2] = E 
self.p_expr[0] = asin(self.p_expr[2]) 
self.p_expr[1] = expand(self.p_expr[0],force=True) 
self.p_expr[3] = cos(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[0] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[3] = self.p_expr[2] * self.p_expr[0] 
self.p_v[2] = Symbol('y') 
self.p_expr[2] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[1] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_v[1] = Symbol('g',positive=True) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[1] = trigsimp(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = sqrt(self.p_expr[1]) 
self.p_expr[1] = expand_trig(self.p_expr[1]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[0] = expand(self.p_expr[1],force=True) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[2] = factor(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = asin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = powsimp(self.p_expr[0]) 
self.p_v[3] = Symbol('c') 
self.p_expr[0] = cancel(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] % self.p_expr[1] 
