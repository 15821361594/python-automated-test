self.p_v[2] = Symbol('c') 
self.p_v[0] = Symbol('b') 
self.p_expr[2] = E 
self.p_c[0] = Integer(2) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = expand_trig(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] / self.p_expr[2] 
self.p_v[3] = Symbol('c') 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_c[1] = Integer(7) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = logcombine(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[2] = self.p_v[2] 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
