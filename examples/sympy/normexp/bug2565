self.p_c[2] = Integer(0) 
self.p_v[2] = Symbol('e',positive=True) 
self.p_c[1] = Integer(10) 
self.p_expr[1] = self.p_c[1] 
self.p_expr[2] = acos(self.p_expr[1]) 
self.p_expr[3] = acos(self.p_expr[2]) 
self.p_expr[1] = cancel(self.p_expr[3]) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[0] 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[2])) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[2] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_term[3] = self.p_c[2] * self.p_v[3] ** self.p_c[1] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
