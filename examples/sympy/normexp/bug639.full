self.p_v[0] = Symbol('a') 
self.p_expr[0] = pi 
self.p_c[1] = Integer(4) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[1] = expand(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[0] 
self.p_c[3] = Integer(5) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = expand_func(self.p_expr[0]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[1])) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = sin(self.p_expr[0]) 
self.p_expr[2] = powdenest(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = expand(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[1] = acos(self.p_expr[3]) 
self.p_c[1] = Integer(2) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_v[2] = Symbol('b') 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[1] 
