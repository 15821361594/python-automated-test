self.p_expr[1] = pi 
self.p_expr[3] = E 
self.p_expr[0] = acos(self.p_expr[1]) 
self.p_v[2] = Symbol('d') 
self.p_expr[1] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[3] = cancel(self.p_expr[3]) 
self.p_c[1] = Integer(2) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[3] 
self.p_v[3] = Symbol('y') 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[2] = expand_power_exp(self.p_expr[3]) 
self.p_expr[1] = sin(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[1] 
self.p_c[0] = Integer(8) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[1] = atan(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = factor(self.p_expr[1]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = atan(self.p_expr[2]) 
self.p_expr[0] = sqrt(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[3] 
