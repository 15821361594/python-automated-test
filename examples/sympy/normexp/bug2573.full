self.p_c[0] = Integer(4) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_c[2] = Integer(6) 
self.p_expr[0] = I 
self.p_expr[2] = expand_log(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[3] = apart(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[3] = apart(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[1] = combsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[2] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[3] = logcombine(self.p_expr[2]) 
self.p_expr[0] = factorial(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] - self.p_expr[2] 
self.p_v[2] = Symbol('f',positive=True) 
self.p_expr[0].evalf() 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[0] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = atan(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = expand_log(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[3] = simplify(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[0])) 
self.p_v[3] = Symbol('j',positive=True) 
self.p_c[2] = Integer(8) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[0] = simplify(self.p_expr[1]) 
self.p_expr[1] = cancel(self.p_expr[2]) 
self.p_expr[2] = logcombine(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[1] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[0] = trigsimp(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[3] 
self.p_v[1] = Symbol('e',positive=True) 
self.p_expr[1] = cos(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[2]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_c[2] = Integer(1) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[0])) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[2])) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_v[3] = Symbol('i',positive=True) 
self.p_expr[0] = self.p_expr[0].doit() 
self.p_expr[3] = expand(self.p_expr[0]) 
