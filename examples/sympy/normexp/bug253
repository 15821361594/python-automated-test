self.p_v[2] = Symbol('i',positive=True) 
self.p_expr[3] = E 
self.p_expr[2] = cancel(self.p_expr[3]) 
self.p_expr[0] = sin(self.p_expr[2]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[0] = factorial(self.p_expr[1]) 
self.p_expr[2] = cancel(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[3] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_c[1] = Integer(0) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = sqrt(self.p_expr[1]) 
self.p_c[0] = Integer(10) 
self.p_expr[0] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[1])) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
