self.p_expr[0] = pi 
self.p_expr[1] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[2] = sqrt(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_v[3] = Symbol('e',positive=True) 
self.p_v[1] = Symbol('a') 
self.p_expr[0] = expand(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_v[0] = Symbol('g',positive=True) 
self.p_expr[0] = atan(self.p_expr[0]) 
self.p_expr[2].evalf() 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[1] = atan(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = factor(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[2] = combsimp(self.p_expr[1]) 
self.p_expr[0] = acos(self.p_expr[2]) 
self.p_expr[2] = simplify(self.p_expr[2]) 
self.p_expr[1] = expand_trig(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[2] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = apart(self.p_expr[0]) 
self.p_expr[0] = powdenest(self.p_expr[0]) 
self.p_expr[0] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[3] 
