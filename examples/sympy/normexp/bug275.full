self.p_c[0] = Integer(10) 
self.p_v[1] = Symbol('e',positive=True) 
self.p_v[2] = Symbol('b') 
self.p_expr[0] = pi 
self.p_expr[1] = sqrt(self.p_expr[0]) 
self.p_term[3] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_c[0] = Integer(8) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[1] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[1] = powsimp(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[0] = expand_trig(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_v[1] = Symbol('y') 
self.p_expr[2] = atan(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_c[3] = Integer(9) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[0])) 
self.p_expr[1] = expand_trig(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = expand_func(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_poly[2] = self.p_term[3] 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[1].evalf() 
self.p_expr[0] = expand_trig(self.p_expr[0]) 
self.p_expr[2] = expand(self.p_expr[3]) 
self.p_poly[0] = self.p_term[3] + self.p_term[3] 
self.p_v[3] = Symbol('a') 
self.p_expr[3] = sqrt(self.p_expr[0]) 
self.p_v[0] = Symbol('x') 
self.p_expr[0] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[1] = factorial(self.p_expr[2]) 
self.p_term[2] = self.p_c[0] * self.p_v[0] ** self.p_c[3] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_c[2] = Integer(8) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[0] 
