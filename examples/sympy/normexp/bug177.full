self.p_v[3] = Symbol('h',positive=True) 
self.p_c[1] = Integer(6) 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[0].evalf() 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = powsimp(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3].doit() 
self.p_expr[3] = tan(self.p_expr[1]) 
self.p_expr[1] = tan(self.p_expr[2]) 
self.p_expr[0] = cancel(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_v[2] = Symbol('i',positive=True) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[2] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[0] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = cos(self.p_expr[3]) 
self.p_c[2] = Integer(10) 
self.p_expr[3] = factor(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[2],self.p_c[2],self.p_c[1])) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
