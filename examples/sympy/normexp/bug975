self.p_v[3] = Symbol('l',positive=True) 
self.p_expr[3] = E 
self.p_expr[0] = combsimp(self.p_expr[3]) 
self.p_v[1] = Symbol('k',positive=True) 
self.p_expr[3] = cancel(self.p_expr[3]) 
self.p_c[0] = Integer(3) 
self.p_expr[1] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[3] = expand_trig(self.p_expr[3]) 
self.p_expr[2] = pi 
self.p_expr[3] = powdenest(self.p_expr[1]) 
self.p_v[2] = Symbol('k',positive=True) 
self.p_expr[1] = factorial(self.p_expr[1]) 
self.p_expr[1] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = trigsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[3] = factor(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = factor(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[3] = expand_log(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = expand_func(self.p_expr[3]) 
self.p_c[0] = Integer(8) 
self.p_expr[0] = expand_log(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[3] 
