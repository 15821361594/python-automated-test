self.p_v[1] = Symbol('f',positive=True) 
self.p_v[0] = Symbol('y') 
self.p_c[3] = Integer(0) 
self.p_term[3] = self.p_c[3] * self.p_v[1] ** self.p_c[3] 
self.p_v[3] = Symbol('d') 
self.p_expr[3] = self.p_v[0] 
self.p_poly[3] = self.p_term[3] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
self.p_term[2] = self.p_c[3] * self.p_v[0] ** self.p_c[3] 
self.p_expr[2] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[3] = factorial(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[2] = cos(self.p_expr[3]) 
self.p_expr[3] = sin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[0] = self.p_expr[2] - self.p_expr[3] 
self.p_v[1] = Symbol('y') 
self.p_c[2] = Integer(5) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[3])) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].doit() 
self.p_v[0] = Symbol('b') 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[3] = simplify(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_c[3] = Integer(2) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[3] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = acos(self.p_expr[1]) 
self.p_expr[1] = expand_trig(self.p_expr[3]) 
self.p_expr[3] = apart(self.p_expr[3]) 
