self.p_c[3] = Integer(9) 
self.p_expr[1] = I 
self.p_expr[2] = cancel(self.p_expr[1]) 
self.p_c[2] = Integer(0) 
self.p_expr[1] = self.p_expr[2].doit() 
self.p_expr[3] = factor(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_v[0] = Symbol('a') 
self.p_expr[1] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[2])) 
self.p_c[0] = Integer(0) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_term[1] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = acos(self.p_expr[1]) 
self.p_expr[1] = apart(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[2] = tan(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_c[2] = Integer(1) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[2])) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = acos(self.p_expr[0]) 
self.p_expr[3] = powsimp(self.p_expr[3]) 
self.p_v[0] = Symbol('a') 
self.p_c[2] = Integer(3) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[1] = self.p_expr[2] % self.p_expr[3] 
