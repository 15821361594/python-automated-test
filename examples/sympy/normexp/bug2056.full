self.p_v[2] = Symbol('g',positive=True) 
self.p_v[3] = Symbol('l',positive=True) 
self.p_v[0] = Symbol('z') 
self.p_expr[3] = pi 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = powsimp(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = expand_log(self.p_expr[1]) 
self.p_expr[2] = factor(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[2] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[0] = self.p_expr[1].doit() 
self.p_expr[1] = self.p_expr[2] + self.p_expr[0] 
self.p_c[3] = Integer(3) 
self.p_c[1] = Integer(0) 
self.p_expr[3] = asin(self.p_expr[0]) 
self.p_expr[2] = expand_power_exp(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = simplify(self.p_expr[2]) 
self.p_term[0] = self.p_c[1] * self.p_v[0] ** self.p_c[3] 
self.p_expr[2] = expand_power_exp(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[2] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[1] = cancel(self.p_expr[3]) 
self.p_expr[0] = apart(self.p_expr[3]) 
self.p_c[3] = Integer(2) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[1] = expand_log(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] % self.p_expr[3] 
