self.p_expr[3] = pi 
self.p_c[1] = Integer(5) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[0] = expand(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = expand_power_exp(self.p_expr[3]) 
self.p_c[0] = Integer(3) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[3] = powdenest(self.p_expr[1]) 
self.p_expr[2] = cancel(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[2] 
self.p_c[1] = Integer(7) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[3] 
