self.p_c[0] = Integer(2) 
self.p_v[0] = Symbol('j',positive=True) 
self.p_expr[0] = I 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = logcombine(self.p_expr[3]) 
self.p_expr[1] = cos(self.p_expr[0]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[2] = expand_power_exp(self.p_expr[0]) 
self.p_v[1] = Symbol('g',positive=True) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[0] = expand_power_base(self.p_expr[1]) 
self.p_expr[2] = I 
self.p_expr[1] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[0] 
