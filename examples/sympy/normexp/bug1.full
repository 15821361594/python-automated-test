self.p_expr[2] = E 
self.p_v[2] = Symbol('h',positive=True) 
self.p_c[0] = Integer(4) 
self.p_expr[3] = pi 
self.p_v[0] = Symbol('g',positive=True) 
self.p_expr[1] = cancel(self.p_expr[2]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_c[3] = Integer(7) 
self.p_v[0] = Symbol('k',positive=True) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_expr[3] = tan(self.p_expr[0]) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_v[0] = Symbol('l',positive=True) 
self.p_expr[0] = combsimp(self.p_expr[0]) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = powsimp(self.p_expr[3]) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = powdenest(self.p_expr[2]) 
self.p_expr[2] = powdenest(self.p_expr[1]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = expand(self.p_expr[2]) 
self.p_v[1] = Symbol('e',positive=True) 
self.p_expr[2] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_term[1] = self.p_c[3] * self.p_v[2] ** self.p_c[0] 
self.p_expr[1] = self.p_expr[3] + self.p_expr[1] 
self.p_poly[2] = self.p_term[1] + self.p_term[1] 
self.p_term[1] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_c[0] = Integer(7) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_term[2] = self.p_c[3] * self.p_v[1] ** self.p_c[3] 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[3])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_term[0] = self.p_c[3] * self.p_v[1] ** self.p_c[0] 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = atan(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_expr[2] = asin(self.p_expr[2]) 
self.p_expr[2] = self.p_v[2] 
self.p_expr[3] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[2] 
self.p_poly[1] = self.p_term[2] 
self.p_expr[3] = self.p_expr[1] - self.p_expr[0] 
self.p_c[2] = Integer(8) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
