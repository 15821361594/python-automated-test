self.p_v[3] = Symbol('k',positive=True) 
self.p_v[0] = Symbol('x') 
self.p_v[1] = Symbol('c') 
self.p_c[2] = Integer(1) 
self.p_c[3] = Integer(5) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_expr[1] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[3]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[2] = factor(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[3])) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = combsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = E 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[3])) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[3])) 
self.p_expr[3] = factor(self.p_expr[1]) 
self.p_expr[2] = sin(self.p_expr[3]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = cos(self.p_expr[1]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[0] = expand_log(self.p_expr[3]) 
self.p_expr[3] = atan(self.p_expr[0]) 
self.p_v[3] = Symbol('l',positive=True) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[2] = factorial(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[2])) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[3] 
