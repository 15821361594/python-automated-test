self.p_c[1] = Integer(8) 
self.p_c[3] = Integer(5) 
self.p_v[3] = Symbol('y') 
self.p_v[0] = Symbol('a') 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[1] = simplify(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[3] = expand_trig(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = expand(self.p_expr[0]) 
self.p_term[0] = self.p_c[3] * self.p_v[0] ** self.p_c[1] 
self.p_expr[0] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[2] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[0] = tan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = expand(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[3] 
