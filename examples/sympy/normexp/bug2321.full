self.p_v[0] = Symbol('j',positive=True) 
self.p_expr[1] = E 
self.p_c[0] = Integer(6) 
self.p_c[1] = Integer(0) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[2] = factorial(self.p_expr[3]) 
self.p_expr[3] = factorial(self.p_expr[3]) 
self.p_term[2] = self.p_c[0] * self.p_v[0] ** self.p_c[1] 
self.p_expr[1] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[2] = expand_func(self.p_expr[3]) 
self.p_c[1] = Integer(10) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[3] = logcombine(self.p_expr[1]) 
self.p_expr[2] = trigsimp(self.p_expr[3]) 
self.p_expr[3] = sin(self.p_expr[3]) 
self.p_expr[1] = atan(self.p_expr[2]) 
self.p_expr[2] = sqrt(self.p_expr[2]) 
self.p_term[1] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_expr[0] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[2] = factor(self.p_expr[1]) 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[1] = cancel(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[2] 
