self.p_v[1] = Symbol('l',positive=True) 
self.p_expr[3] = pi 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = acos(self.p_expr[3]) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[1] = expand(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[0] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = expand_power_base(self.p_expr[2]) 
self.p_expr[3] = logcombine(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[0] = expand(self.p_expr[2],force=True) 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[3] 
self.p_v[2] = Symbol('f',positive=True) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[1] = factorial(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = cancel(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = expand_log(self.p_expr[0]) 
self.p_expr[0] = factorial(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[1] = combsimp(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[0] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_c[0] = Integer(10) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = tan(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] % self.p_expr[3] 
