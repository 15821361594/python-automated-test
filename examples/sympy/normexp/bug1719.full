self.p_c[3] = Integer(9) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[1] = E 
self.p_expr[0] = asin(self.p_expr[1]) 
self.p_c[0] = Integer(10) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[2] = E 
self.p_expr[1] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[3] = E 
self.p_expr[0] = powdenest(self.p_expr[3]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_v[1] = Symbol('c') 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_term[1] = self.p_c[3] * self.p_v[3] ** self.p_c[0] 
self.p_expr[2] = self.p_c[0] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[0] 
