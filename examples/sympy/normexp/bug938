self.p_c[2] = Integer(7) 
self.p_v[2] = Symbol('d') 
self.p_v[1] = Symbol('c') 
self.p_v[0] = Symbol('e',positive=True) 
self.p_expr[2] = Rational(self.p_c[2],self.p_c[2]) 
self.p_term[0] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_poly[3] = self.p_term[0] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = atan(self.p_expr[3]) 
self.p_c[2] = Integer(7) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = tan(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[1] = expand_trig(self.p_expr[2]) 
self.p_term[2] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = sqrt(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[2] = tan(self.p_expr[0]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = acos(self.p_expr[1]) 
self.p_c[2] = Integer(3) 
self.p_expr[1] = logcombine(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
