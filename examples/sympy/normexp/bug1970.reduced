self.p_c[2] = Integer(6) 
self.p_expr[0] = I 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[0] 
self.p_v[0] = Symbol('k',positive=True) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_c[0] = Integer(7) 
self.p_v[3] = Symbol('d') 
self.p_c[1] = Integer(9) 
self.p_c[2] = Integer(10) 
self.p_v[0] = Symbol('g',positive=True) 
self.p_expr[1] = simplify(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[1])) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = apart(self.p_expr[2]) 
