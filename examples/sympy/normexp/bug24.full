self.p_v[2] = Symbol('g',positive=True) 
self.p_c[0] = Integer(8) 
self.p_c[3] = Integer(5) 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[0]) 
self.p_v[3] = Symbol('l',positive=True) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = expand_func(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[0] 
self.p_c[1] = Integer(0) 
self.p_expr[1] = self.p_v[2] 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_term[1] = self.p_c[3] * self.p_v[3] ** self.p_c[1] 
self.p_expr[1] = factor(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[3] = logcombine(self.p_expr[3]) 
self.p_expr[3] = asin(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = logcombine(self.p_expr[0]) 
self.p_expr[0] = combsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
