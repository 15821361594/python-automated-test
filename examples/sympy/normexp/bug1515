self.p_v[3] = Symbol('e',positive=True) 
self.p_v[2] = Symbol('c') 
self.p_c[0] = Integer(10) 
self.p_c[2] = Integer(1) 
self.p_expr[0] = self.p_v[2] 
self.p_c[3] = Integer(5) 
self.p_expr[1] = Rational(self.p_c[3],self.p_c[3]) 
self.p_expr[2] = expand(self.p_expr[0]) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0].doit() 
self.p_expr[3] = simplify(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[2])) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[0])) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] % self.p_expr[1] 
