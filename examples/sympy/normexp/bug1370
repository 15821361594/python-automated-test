self.p_c[2] = Integer(8) 
self.p_v[0] = Symbol('b') 
self.p_expr[2] = E 
self.p_expr[3] = self.p_expr[2].doit() 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = expand(self.p_expr[1]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_c[3] = Integer(6) 
self.p_expr[0] = asin(self.p_expr[2]) 
self.p_expr[1] = cancel(self.p_expr[2]) 
self.p_expr[2] = expand_power_base(self.p_expr[0]) 
self.p_v[2] = Symbol('j',positive=True) 
self.p_v[3] = Symbol('g',positive=True) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = powdenest(self.p_expr[3]) 
self.p_term[0] = self.p_c[2] * self.p_v[2] ** self.p_c[2] 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[3],self.p_c[2],self.p_c[3])) 
self.p_c[1] = Integer(10) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[1])) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[2])) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[0] 
