self.p_c[2] = Integer(9) 
self.p_c[3] = Integer(4) 
self.p_expr[0] = I 
self.p_expr[1] = expand_trig(self.p_expr[0]) 
self.p_expr[0] = expand_trig(self.p_expr[1]) 
self.p_v[3] = Symbol('e',positive=True) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = expand_log(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
self.p_v[1] = Symbol('b') 
self.p_expr[1] = acos(self.p_expr[1]) 
self.p_expr[1].evalf() 
self.p_expr[2] = atan(self.p_expr[0]) 
self.p_expr[0] = expand_power_base(self.p_expr[1]) 
self.p_expr[1] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = self.p_c[3] 
self.p_c[0] = Integer(6) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[0] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[0] = logcombine(self.p_expr[0]) 
self.p_c[1] = Integer(10) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[1])) 
self.p_v[1] = Symbol('e',positive=True) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = self.p_v[3] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
