self.p_c[2] = Integer(5) 
self.p_expr[0] = E 
self.p_c[0] = Integer(8) 
self.p_v[0] = Symbol('l',positive=True) 
self.p_expr[2] = pi 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = tan(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = sin(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[0] = atan(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_c[3] = Integer(4) 
self.p_expr[0] = cos(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = expand_func(self.p_expr[2]) 
self.p_expr[3] = expand(self.p_expr[2],force=True) 
self.p_v[0] = Symbol('l',positive=True) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[3])) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
