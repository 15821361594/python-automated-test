self.p_v[3] = Symbol('b') 
self.p_c[0] = Integer(1) 
self.p_expr[3] = Rational(self.p_c[0],self.p_c[0]) 
self.p_c[2] = Integer(8) 
self.p_expr[1] = factor(self.p_expr[3]) 
self.p_expr[0] = expand(self.p_expr[3],force=True) 
self.p_c[0] = Integer(0) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = tan(self.p_expr[3]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[2])) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_c[1] = Integer(6) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2].doit() 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[1] = tan(self.p_expr[2]) 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[0]) 
self.p_expr[2] = factorial(self.p_expr[3]) 
self.p_expr[3] = sqrt(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[2])) 
self.p_v[3] = Symbol('y') 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_v[2] = Symbol('y') 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[1] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = cos(self.p_expr[2]) 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = expand(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
