self.p_v[0] = Symbol('y') 
self.p_c[2] = Integer(8) 
self.p_c[1] = Integer(7) 
self.p_expr[2] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = expand_trig(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_c[3] = Integer(1) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[0] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[1].evalf() 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = powdenest(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
