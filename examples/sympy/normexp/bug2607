self.p_expr[2] = E 
self.p_expr[1] = combsimp(self.p_expr[2]) 
self.p_expr[0] = expand_trig(self.p_expr[2]) 
self.p_expr[3] = sqrt(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = powdenest(self.p_expr[1]) 
self.p_expr[0] = expand_trig(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = apart(self.p_expr[3]) 
self.p_expr[0] = expand_log(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = expand_power_exp(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_v[0] = Symbol('x') 
self.p_expr[2] = trigsimp(self.p_expr[0]) 
self.p_expr[3] = cancel(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_v[2] = Symbol('c') 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3].doit() 
self.p_expr[1] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[0] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = atan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[2] = factor(self.p_expr[1]) 
self.p_expr[1] = cos(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = expand_log(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = expand_trig(self.p_expr[1]) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[0] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = combsimp(self.p_expr[2]) 
