self.p_v[1] = Symbol('i',positive=True) 
self.p_c[0] = Integer(8) 
self.p_expr[1] = I 
self.p_v[0] = Symbol('c') 
self.p_expr[0] = expand_power_base(self.p_expr[1]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = cancel(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = expand_trig(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = factor(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[0] 
self.p_v[2] = Symbol('c') 
self.p_expr[0] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[1] = E 
self.p_expr[3] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[3] = pi 
self.p_expr[1] = sin(self.p_expr[0]) 
self.p_expr[0] = factorial(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = asin(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_c[2] = Integer(2) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[0] 
