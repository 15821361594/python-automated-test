self.p_c[3] = Integer(5) 
self.p_v[3] = Symbol('c') 
self.p_expr[3] = I 
self.p_v[0] = Symbol('j',positive=True) 
self.p_c[0] = Integer(10) 
self.p_expr[2] = combsimp(self.p_expr[3]) 
self.p_expr[1] = sqrt(self.p_expr[3]) 
self.p_expr[3] = trigsimp(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[1] = sin(self.p_expr[1]) 
self.p_expr[1] = asin(self.p_expr[1]) 
self.p_expr[3] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[1] = factor(self.p_expr[2]) 
self.p_term[1] = self.p_c[0] * self.p_v[3] ** self.p_c[3] 
self.p_expr[2] = expand(self.p_expr[0],force=True) 
self.p_term[0] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_expr[0] = self.p_expr[3] + self.p_expr[3] 
self.p_poly[3] = self.p_term[1] + self.p_term[0] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = factor(self.p_expr[2]) 
self.p_expr[1] = expand_trig(self.p_expr[2]) 
self.p_v[3] = Symbol('a') 
self.p_expr[2] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = factor(self.p_expr[1]) 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = combsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_v[3] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_poly[2] = self.p_term[1] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = sin(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[3] = apart(self.p_expr[0]) 
self.p_term[0] = self.p_c[3] * self.p_v[0] ** self.p_c[0] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[3] 
