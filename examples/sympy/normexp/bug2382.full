self.p_c[2] = Integer(2) 
self.p_v[2] = Symbol('j',positive=True) 
self.p_v[0] = Symbol('x') 
self.p_expr[1] = self.p_c[2] 
self.p_expr[2] = factorial(self.p_expr[1]) 
self.p_c[0] = Integer(4) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[1] = apart(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[2])) 
self.p_expr[3] = sin(self.p_expr[0]) 
self.p_expr[0] = expand_power_base(self.p_expr[2]) 
self.p_c[0] = Integer(1) 
self.p_v[0] = Symbol('c') 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = combsimp(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[3] 
self.p_term[3] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
