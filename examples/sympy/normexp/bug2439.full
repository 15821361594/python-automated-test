self.p_v[0] = Symbol('d') 
self.p_v[2] = Symbol('c') 
self.p_c[1] = Integer(10) 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[1]) 
self.p_v[3] = Symbol('i',positive=True) 
self.p_c[1] = Integer(6) 
self.p_expr[2] = expand(self.p_expr[3],force=True) 
self.p_c[0] = Integer(7) 
self.p_expr[3] = logcombine(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = cancel(self.p_expr[2]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = factor(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[2] = expand_log(self.p_expr[3]) 
self.p_term[2] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[1] 
