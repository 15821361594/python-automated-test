self.p_c[1] = Integer(3) 
self.p_c[2] = Integer(9) 
self.p_v[3] = Symbol('z') 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[2]) 
self.p_c[1] = Integer(2) 
self.p_expr[2] = pi 
self.p_expr[0] = expand_func(self.p_expr[2]) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = logcombine(self.p_expr[3]) 
self.p_expr[3] = expand_func(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_c[1] = Integer(5) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = sqrt(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[1] 
self.p_v[3] = Symbol('e',positive=True) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = expand(self.p_expr[3]) 
self.p_c[1] = Integer(5) 
self.p_expr[2] = powdenest(self.p_expr[0]) 
self.p_v[1] = Symbol('h',positive=True) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_c[1] 
self.p_expr[3] = self.p_expr[2] % self.p_expr[3] 
