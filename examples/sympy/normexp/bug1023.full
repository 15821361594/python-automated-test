self.p_c[2] = Integer(2) 
self.p_c[1] = Integer(6) 
self.p_c[0] = Integer(1) 
self.p_expr[1] = Rational(self.p_c[2],self.p_c[0]) 
self.p_c[2] = Integer(6) 
self.p_v[3] = Symbol('d') 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[0])) 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_expr[0] = sin(self.p_expr[1]) 
self.p_expr[0].evalf() 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[1] = expand_power_exp(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3] - self.p_expr[3] 
self.p_c[1] = Integer(7) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[2])) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[2])) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[3] 
