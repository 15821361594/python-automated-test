self.p_v[0] = Symbol('k',positive=True) 
self.p_expr[0] = I 
self.p_c[0] = Integer(6) 
self.p_expr[2] = expand_trig(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = pi 
self.p_expr[3] = factor(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] + self.p_expr[3] 
self.p_v[1] = Symbol('g',positive=True) 
self.p_expr[0] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[1] = atan(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[3] = expand_power_exp(self.p_expr[2]) 
self.p_expr[0].evalf() 
self.p_c[3] = Integer(10) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[2] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[0] 
self.p_term[0] = self.p_c[3] * self.p_v[1] ** self.p_c[0] 
self.p_c[3] = Integer(4) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[1] = combsimp(self.p_expr[0]) 
self.p_expr[0] = expand_power_base(self.p_expr[2]) 
self.p_v[1] = Symbol('e',positive=True) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_poly[3] = self.p_term[0] + self.p_term[0] 
self.p_expr[2] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_term[1] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_expr[3] = apart(self.p_expr[2]) 
