self.p_v[2] = Symbol('z') 
self.p_v[3] = Symbol('f',positive=True) 
self.p_c[2] = Integer(9) 
self.p_v[0] = Symbol('l',positive=True) 
self.p_c[3] = Integer(2) 
self.p_expr[1] = self.p_c[3] 
self.p_expr[3] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[2])) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[3])) 
self.p_expr[0] = expand_func(self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_term[1] = self.p_c[2] * self.p_v[2] ** self.p_c[3] 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_c[1] = Integer(2) 
self.p_expr[3] = atan(self.p_expr[3]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[2])) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[1] 
