self.p_v[2] = Symbol('j',positive=True) 
self.p_expr[2] = E 
self.p_expr[0] = trigsimp(self.p_expr[2]) 
self.p_expr[1] = expand(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2].doit() 
self.p_expr[3] = E 
self.p_c[0] = Integer(4) 
self.p_expr[2] = powdenest(self.p_expr[0]) 
self.p_v[3] = Symbol('e',positive=True) 
self.p_v[0] = Symbol('c') 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = E 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[1] 
self.p_c[1] = Integer(4) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[3] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = asin(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
