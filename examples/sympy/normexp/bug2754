self.p_v[1] = Symbol('h',positive=True) 
self.p_c[3] = Integer(2) 
self.p_expr[3] = E 
self.p_c[2] = Integer(1) 
self.p_c[0] = Integer(6) 
self.p_term[3] = self.p_c[2] * self.p_v[1] ** self.p_c[0] 
self.p_c[0] = Integer(0) 
self.p_term[2] = self.p_c[3] * self.p_v[1] ** self.p_c[3] 
self.p_expr[0] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[0])) 
self.p_expr[2] = logcombine(self.p_expr[3]) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[3] = acos(self.p_expr[1]) 
self.p_expr[1] = self.p_v[1] 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = expand_func(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
