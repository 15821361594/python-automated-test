self.p_v[2] = Symbol('l',positive=True) 
self.p_c[0] = Integer(6) 
self.p_expr[0] = pi 
self.p_expr[3] = cancel(self.p_expr[0]) 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[1] = expand_log(self.p_expr[3]) 
self.p_v[0] = Symbol('b') 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = simplify(self.p_expr[3]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_v[1] = Symbol('e',positive=True) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[2] = E 
self.p_expr[1] = cancel(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[2] = expand(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[2] = trigsimp(self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[1] = asin(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
