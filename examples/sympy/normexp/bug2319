self.p_v[0] = Symbol('i',positive=True) 
self.p_c[0] = Integer(6) 
self.p_c[3] = Integer(6) 
self.p_expr[3] = self.p_c[0] 
self.p_expr[2] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[1] = acos(self.p_expr[3]) 
self.p_expr[3] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[2] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[1] = self.p_c[0] 
self.p_expr[2] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[0] = powsimp(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[0])) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = tan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[1] = factor(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
