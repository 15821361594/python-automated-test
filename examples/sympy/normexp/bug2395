self.p_c[1] = Integer(2) 
self.p_expr[2] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[0] = expand_power_exp(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[2] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = factor(self.p_expr[0]) 
self.p_expr[0] = apart(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = acos(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[3] 
self.p_c[0] = Integer(6) 
self.p_expr[0] = self.p_expr[1].doit() 
self.p_expr[1] = expand_log(self.p_expr[3]) 
self.p_c[2] = Integer(10) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[3] = self.p_expr[1] - self.p_expr[1] 
self.p_v[2] = Symbol('k',positive=True) 
self.p_expr[1] = factorial(self.p_expr[2]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = factorial(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[2])) 
self.p_term[2] = self.p_c[2] * self.p_v[2] ** self.p_c[0] 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[0] = expand(self.p_expr[3],force=True) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[1])) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
