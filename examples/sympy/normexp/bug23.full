self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[2] = E 
self.p_c[0] = Integer(6) 
self.p_v[2] = Symbol('f',positive=True) 
self.p_expr[0] = trigsimp(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0].doit() 
self.p_expr[3] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[0] = expand_power_exp(self.p_expr[3]) 
self.p_c[2] = Integer(0) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[3] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[2],self.p_c[0])) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = expand(self.p_expr[1],force=True) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[0] = apart(self.p_expr[1]) 
self.p_expr[3] = powsimp(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = powdenest(self.p_expr[0]) 
self.p_c[0] = Integer(7) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
