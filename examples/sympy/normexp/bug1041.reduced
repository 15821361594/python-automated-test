self.p_v[0] = Symbol('i',positive=True) 
self.p_expr[1] = I 
self.p_expr[2] = self.p_expr[1] / self.p_expr[1] 
self.p_c[0] = Integer(5) 
self.p_expr[0] = expand(self.p_expr[2],force=True) 
self.p_expr[1] = self.p_v[0] 
self.p_v[2] = Symbol('g',positive=True) 
self.p_c[2] = Integer(2) 
self.p_c[1] = Integer(5) 
self.p_c[3] = Integer(6) 
self.p_expr[3] = expand_power_exp(self.p_expr[0]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[3] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[0] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_expr[2] = sqrt(self.p_expr[1]) 
self.p_expr[1] = expand_trig(self.p_expr[2]) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[1] = asin(self.p_expr[3]) 
