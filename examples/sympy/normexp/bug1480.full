self.p_v[0] = Symbol('b') 
self.p_v[1] = Symbol('a') 
self.p_expr[1] = pi 
self.p_expr[2] = asin(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[0] = self.p_v[1] 
self.p_expr[3] = cos(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[3] = factor(self.p_expr[1]) 
self.p_expr[1] = atan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_c[3] = Integer(8) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = cancel(self.p_expr[2]) 
self.p_expr[0] = factor(self.p_expr[1]) 
self.p_expr[3] = expand_trig(self.p_expr[3]) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[2] = expand_trig(self.p_expr[0]) 
self.p_expr[3] = acos(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[3] = apart(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[0] 
self.p_expr[0] = E 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[0] = simplify(self.p_expr[1]) 
self.p_expr[3] = expand(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[2] 
