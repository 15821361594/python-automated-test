self.p_v[0] = Symbol('j',positive=True) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_c[1] = Integer(4) 
self.p_term[0] = self.p_c[1] * self.p_v[2] ** self.p_c[1] 
self.p_c[1] = Integer(10) 
self.p_term[2] = self.p_c[1] * self.p_v[0] ** self.p_c[1] 
self.p_poly[0] = self.p_term[2] + self.p_term[0] 
self.p_expr[2] = pi 
self.p_c[2] = Integer(8) 
self.p_expr[3] = self.p_expr[2].doit() 
self.p_v[1] = Symbol('d') 
self.p_c[1] = Integer(4) 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = expand_log(self.p_expr[2]) 
self.p_expr[0] = self.p_v[2] 
self.p_v[2] = Symbol('e',positive=True) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[3] 
