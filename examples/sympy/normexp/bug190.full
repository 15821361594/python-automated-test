self.p_v[2] = Symbol('h',positive=True) 
self.p_expr[0] = E 
self.p_expr[3] = expand_log(self.p_expr[0]) 
self.p_expr[1] = sin(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[3] = cos(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[0] 
self.p_v[3] = Symbol('y') 
self.p_expr[2] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[0] = factorial(self.p_expr[0]) 
self.p_expr[0] = expand(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[3] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[0] = sin(self.p_expr[2]) 
self.p_expr[2] = cancel(self.p_expr[0]) 
self.p_expr[0] = cos(self.p_expr[2]) 
self.p_expr[3] = E 
self.p_expr[2] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = logcombine(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = atan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[1] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = expand(self.p_expr[0]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = acos(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[1] = expand(self.p_expr[2]) 
self.p_expr[3] = expand(self.p_expr[1],force=True) 
self.p_expr[0] = expand_trig(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = apart(self.p_expr[3]) 
self.p_expr[3] = expand(self.p_expr[1]) 
self.p_expr[1] = expand(self.p_expr[2]) 
self.p_expr[2] = logcombine(self.p_expr[1]) 
self.p_expr[1] = combsimp(self.p_expr[1]) 
self.p_expr[1] = expand_func(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[1] = apart(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = expand_power_base(self.p_expr[3]) 
self.p_c[3] = Integer(2) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[3] = asin(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = atan(self.p_expr[1]) 
self.p_c[2] = Integer(8) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = sqrt(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = powsimp(self.p_expr[3]) 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = expand_log(self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = expand_log(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[2] 
