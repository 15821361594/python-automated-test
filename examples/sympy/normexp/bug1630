self.p_v[2] = Symbol('f',positive=True) 
self.p_v[0] = Symbol('z') 
self.p_expr[0] = self.p_v[0] 
self.p_v[0] = Symbol('y') 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[2] = logcombine(self.p_expr[0]) 
self.p_expr[3] = tan(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[3] = acos(self.p_expr[0]) 
self.p_expr[0] = self.p_v[3] 
self.p_expr[2] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[0] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = expand_func(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[0] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[2] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[1] = factor(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[0] = apart(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[2] = combsimp(self.p_expr[1]) 
self.p_expr[3] = sin(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[0] = asin(self.p_expr[2]) 
self.p_expr[1] = acos(self.p_expr[3]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1].evalf() 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[1] = simplify(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_c[2] = Integer(0) 
self.p_expr[3] = sin(self.p_expr[2]) 
self.p_expr[2] = tan(self.p_expr[2]) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = expand_func(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = expand_log(self.p_expr[0]) 
self.p_v[3] = Symbol('c') 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[3] 
