self.p_expr[2] = E 
self.p_v[2] = Symbol('x') 
self.p_c[1] = Integer(6) 
self.p_v[3] = Symbol('a') 
self.p_expr[3] = factorial(self.p_expr[2]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = logcombine(self.p_expr[0]) 
self.p_c[2] = Integer(8) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = tan(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[1])) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = expand_log(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[1] 
