self.p_expr[3] = pi 
self.p_v[2] = Symbol('f',positive=True) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = tan(self.p_expr[3]) 
self.p_expr[1] = expand_func(self.p_expr[3]) 
self.p_c[0] = Integer(6) 
self.p_expr[3] = expand_func(self.p_expr[1]) 
self.p_v[3] = Symbol('a') 
self.p_expr[1] = tan(self.p_expr[1]) 
self.p_c[3] = Integer(1) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_c[3] = Integer(6) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[2] = expand(self.p_expr[0],force=True) 
self.p_expr[1] = expand_log(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[0] = simplify(self.p_expr[0]) 
self.p_expr[0] = sqrt(self.p_expr[1]) 
self.p_expr[1] = powdenest(self.p_expr[2]) 
self.p_term[2] = self.p_c[3] * self.p_v[3] ** self.p_c[0] 
self.p_expr[2] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[3] = tan(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = powsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[1] = Rational(self.p_c[3],self.p_c[0]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2] - self.p_expr[2] 
self.p_v[3] = Symbol('k',positive=True) 
self.p_expr[2] = expand_log(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_c[0] = Integer(10) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
