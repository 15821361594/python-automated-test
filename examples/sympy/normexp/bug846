self.p_v[3] = Symbol('c') 
self.p_c[0] = Integer(2) 
self.p_v[2] = Symbol('j',positive=True) 
self.p_c[3] = Integer(2) 
self.p_term[3] = self.p_c[3] * self.p_v[2] ** self.p_c[0] 
self.p_poly[0] = self.p_term[3] 
self.p_expr[2] = self.p_v[3] 
self.p_expr[0] = apart(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[0] = expand(self.p_expr[0],force=True) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] + self.p_expr[0] 
self.p_v[0] = Symbol('z') 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[0]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[2] = expand(self.p_expr[3]) 
self.p_expr[3] = tan(self.p_expr[1]) 
self.p_term[1] = self.p_c[0] * self.p_v[0] ** self.p_c[3] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = trigsimp(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = sqrt(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[0] = trigsimp(self.p_expr[0]) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[0])) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[3])) 
self.p_v[2] = Symbol('i',positive=True) 
self.p_expr[1] = powdenest(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[0] = expand(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[1] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[3] = factorial(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[3] 
