self.p_v[0] = Symbol('j',positive=True) 
self.p_v[1] = Symbol('h',positive=True) 
self.p_v[3] = Symbol('y') 
self.p_c[2] = Integer(0) 
self.p_v[2] = Symbol('a') 
self.p_expr[1] = self.p_v[3] 
self.p_expr[3] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = factor(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = sin(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = expand_log(self.p_expr[0]) 
self.p_expr[0] = atan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[3] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = E 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = expand(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = factorial(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = E 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[0] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[2] 
