self.p_expr[1] = pi 
self.p_v[2] = Symbol('l',positive=True) 
self.p_c[0] = Integer(8) 
self.p_expr[0] = expand_log(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[0] 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[0] = logcombine(self.p_expr[1]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[1] = factor(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].doit() 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = logcombine(self.p_expr[3]) 
self.p_expr[1] = cancel(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_v[0] = Symbol('j',positive=True) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[3] = apart(self.p_expr[3]) 
self.p_c[3] = Integer(4) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[2].doit() 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = powdenest(self.p_expr[3]) 
self.p_expr[3] = apart(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[0])) 
self.p_expr[3] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[3] 
self.p_v[1] = Symbol('k',positive=True) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[0] 
