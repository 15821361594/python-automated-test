self.p_c[0] = Integer(5) 
self.p_expr[2] = E 
self.p_v[1] = Symbol('g',positive=True) 
self.p_expr[3] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[1] = tan(self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[0] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = sin(self.p_expr[0]) 
self.p_term[0] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[0] = expand_power_base(self.p_expr[0]) 
self.p_expr[3] = expand_log(self.p_expr[2]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_v[0] = Symbol('z') 
self.p_expr[3] = powdenest(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[3] = simplify(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
