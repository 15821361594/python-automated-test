self.p_c[1] = Integer(8) 
self.p_v[3] = Symbol('c') 
self.p_v[2] = Symbol('j',positive=True) 
self.p_expr[0] = E 
self.p_expr[1] = atan(self.p_expr[0]) 
self.p_expr[0] = powsimp(self.p_expr[1]) 
self.p_v[1] = Symbol('l',positive=True) 
self.p_v[0] = Symbol('z') 
self.p_expr[1] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_expr[3] = cancel(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[0] = expand(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[1] = powsimp(self.p_expr[1]) 
self.p_term[0] = self.p_c[1] * self.p_v[1] ** self.p_c[1] 
self.p_expr[2] = expand_func(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = sin(self.p_expr[3]) 
self.p_expr[0] = powdenest(self.p_expr[2]) 
self.p_expr[1] = atan(self.p_expr[0]) 
self.p_expr[0] = powdenest(self.p_expr[0]) 
self.p_expr[2] = simplify(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[3] = factorial(self.p_expr[1]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = expand_func(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = cos(self.p_expr[2]) 
self.p_expr[1] = powdenest(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[1] = factor(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[2] - self.p_expr[3] 
self.p_term[1] = self.p_c[1] * self.p_v[2] ** self.p_c[1] 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[0] 
