self.p_v[0] = Symbol('h',positive=True) 
self.p_c[1] = Integer(8) 
self.p_v[2] = Symbol('e',positive=True) 
self.p_c[2] = Integer(9) 
self.p_v[3] = Symbol('e',positive=True) 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[2]) 
self.p_term[3] = self.p_c[2] * self.p_v[2] ** self.p_c[2] 
self.p_v[1] = Symbol('y') 
self.p_expr[0] = Rational(self.p_c[1],self.p_c[2]) 
self.p_expr[1] = self.p_v[3] 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_v[2] = Symbol('b') 
self.p_expr[1] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = expand_func(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[1])) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[0] = self.p_expr[2].doit() 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = expand_power_base(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
