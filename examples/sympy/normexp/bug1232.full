self.p_c[3] = Integer(8) 
self.p_v[0] = Symbol('j',positive=True) 
self.p_v[3] = Symbol('i',positive=True) 
self.p_c[0] = Integer(9) 
self.p_term[2] = self.p_c[0] * self.p_v[0] ** self.p_c[3] 
self.p_expr[0] = pi 
self.p_expr[2] = Rational(self.p_c[3],self.p_c[0]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_v[3] = Symbol('i',positive=True) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_v[2] = Symbol('f',positive=True) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[1].evalf() 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[0] = acos(self.p_expr[1]) 
self.p_expr[1] = cancel(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[2] = combsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
