self.p_expr[3] = I 
self.p_expr[1] = tan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = expand(self.p_expr[3],force=True) 
self.p_v[3] = Symbol('b') 
self.p_c[2] = Integer(2) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[3] 
self.p_v[2] = Symbol('a') 
self.p_expr[1] = acos(self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = apart(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[1] = cancel(self.p_expr[1]) 
self.p_expr[3] = expand_func(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[0] = logcombine(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_c[1] = Integer(6) 
self.p_expr[3] = cos(self.p_expr[1]) 
self.p_expr[0] = cancel(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[0] = simplify(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[2],self.p_c[2],self.p_c[1])) 
self.p_expr[3] = self.p_c[1] 
self.p_expr[1] = self.p_expr[3] - self.p_expr[2] 
self.p_v[0] = Symbol('c') 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] % self.p_expr[3] 
