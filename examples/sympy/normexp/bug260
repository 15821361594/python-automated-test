self.p_c[3] = Integer(7) 
self.p_v[1] = Symbol('z') 
self.p_expr[1] = pi 
self.p_expr[0] = factorial(self.p_expr[1]) 
self.p_c[0] = Integer(6) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[1] 
self.p_v[2] = Symbol('z') 
self.p_expr[0] = self.p_expr[0].doit() 
self.p_expr[0] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[3] = asin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[0] 
self.p_expr[1] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[2] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = tan(self.p_expr[2]) 
self.p_term[3] = self.p_c[3] * self.p_v[1] ** self.p_c[3] 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_v[0] = Symbol('d') 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = simplify(self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = apart(self.p_expr[1]) 
self.p_v[0] = Symbol('z') 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[1] 
