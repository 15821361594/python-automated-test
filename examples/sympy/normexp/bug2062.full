self.p_expr[3] = pi 
self.p_v[0] = Symbol('b') 
self.p_expr[2] = self.p_expr[3] - self.p_expr[3] 
self.p_v[3] = Symbol('j',positive=True) 
self.p_expr[3] = simplify(self.p_expr[3]) 
self.p_expr[0] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = powdenest(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[0] = expand_power_base(self.p_expr[3]) 
self.p_expr[2] = acos(self.p_expr[3]) 
self.p_expr[1] = expand_log(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = expand_func(self.p_expr[3]) 
self.p_c[0] = Integer(10) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = tan(self.p_expr[3]) 
self.p_expr[2] = logcombine(self.p_expr[0]) 
self.p_c[2] = Integer(3) 
self.p_term[3] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = sin(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[2] = factorial(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = factorial(self.p_expr[2]) 
self.p_expr[2] = atan(self.p_expr[3]) 
self.p_expr[3] = expand_trig(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[3] = tan(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[3] = powdenest(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[0] 
