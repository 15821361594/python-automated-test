self.p_v[1] = Symbol('f',positive=True) 
self.p_v[0] = Symbol('k',positive=True) 
self.p_c[2] = Integer(10) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_term[2] = self.p_c[2] * self.p_v[2] ** self.p_c[2] 
self.p_expr[2] = self.p_c[2] 
self.p_v[3] = Symbol('e',positive=True) 
self.p_expr[3] = expand_func(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[2] = sin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = expand_power_base(self.p_expr[3]) 
self.p_expr[3] = factorial(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[0].evalf() 
self.p_expr[0] = logcombine(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2].doit() 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = acos(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = logcombine(self.p_expr[2]) 
self.p_expr[0] = acos(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
