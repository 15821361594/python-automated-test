self.p_c[1] = Integer(9) 
self.p_v[1] = Symbol('d') 
self.p_expr[2] = I 
self.p_expr[0] = expand_func(self.p_expr[2]) 
self.p_expr[1] = expand_func(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[0] 
self.p_v[0] = Symbol('x') 
self.p_expr[0] = expand_func(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[2] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[0] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[1] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[1] 
