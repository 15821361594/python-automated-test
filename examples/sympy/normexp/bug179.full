self.p_c[3] = Integer(4) 
self.p_c[1] = Integer(10) 
self.p_v[1] = Symbol('k',positive=True) 
self.p_expr[2] = I 
self.p_term[0] = self.p_c[1] * self.p_v[1] ** self.p_c[3] 
self.p_expr[3] = combsimp(self.p_expr[2]) 
self.p_c[1] = Integer(0) 
self.p_expr[2] = cos(self.p_expr[2]) 
self.p_expr[2] = acos(self.p_expr[3]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[1])) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = cos(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[3] = Rational(self.p_c[3],self.p_c[1]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_v[1] = Symbol('a') 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[1])) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[2] = cos(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = cancel(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[2] 
