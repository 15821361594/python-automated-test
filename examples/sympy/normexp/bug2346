self.p_c[3] = Integer(9) 
self.p_v[2] = Symbol('x') 
self.p_expr[2] = I 
self.p_expr[3] = atan(self.p_expr[2]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = powdenest(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = tan(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[2] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[1] = cos(self.p_expr[1]) 
self.p_v[1] = Symbol('c') 
self.p_expr[1] = expand_func(self.p_expr[0]) 
self.p_expr[3] = factor(self.p_expr[0]) 
self.p_term[2] = self.p_c[3] * self.p_v[2] ** self.p_c[3] 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[3].evalf() 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[2] = self.p_expr[2] - self.p_expr[0] 
self.p_v[3] = Symbol('j',positive=True) 
self.p_v[2] = Symbol('d') 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = expand_func(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[2] 
