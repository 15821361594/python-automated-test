self.p_v[1] = Symbol('a') 
self.p_c[0] = Integer(8) 
self.p_c[2] = Integer(3) 
self.p_v[0] = Symbol('j',positive=True) 
self.p_expr[2] = pi 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[0])) 
self.p_c[3] = Integer(10) 
self.p_expr[0] = factorial(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[0])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = cos(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = expand_func(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[2])) 
self.p_expr[3] = expand_power_base(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
