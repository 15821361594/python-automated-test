self.p_c[1] = Integer(10) 
self.p_expr[1] = self.p_c[1] 
self.p_expr[3] = powdenest(self.p_expr[1]) 
self.p_expr[1] = sqrt(self.p_expr[1]) 
self.p_expr[2] = powsimp(self.p_expr[1]) 
self.p_v[1] = Symbol('b') 
self.p_expr[0] = cancel(self.p_expr[1]) 
self.p_term[2] = self.p_c[1] * self.p_v[1] ** self.p_c[1] 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_expr[2] = sqrt(self.p_expr[3]) 
self.p_expr[3] = factorial(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_c[1] = Integer(6) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[0] = expand_trig(self.p_expr[0]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[0] 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[1] 
