self.p_c[3] = Integer(8) 
self.p_expr[1] = self.p_c[3] 
self.p_c[1] = Integer(3) 
self.p_expr[0] = cancel(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[0] 
self.p_v[3] = Symbol('a') 
self.p_expr[2] = expand_log(self.p_expr[0]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_c[0] = Integer(0) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[2] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[1] = powdenest(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_c[3] = Integer(1) 
self.p_expr[2] = sin(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_term[0] = self.p_c[0] * self.p_v[3] ** self.p_c[0] 
self.p_expr[0] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[0] 
