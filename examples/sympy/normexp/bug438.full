self.p_c[1] = Integer(9) 
self.p_v[2] = Symbol('e',positive=True) 
self.p_v[0] = Symbol('b') 
self.p_expr[0] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[3] = expand(self.p_expr[0]) 
self.p_expr[2] = expand_power_base(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = expand_log(self.p_expr[0]) 
self.p_c[3] = Integer(4) 
self.p_v[2] = Symbol('h',positive=True) 
self.p_expr[0] = factorial(self.p_expr[2]) 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[0] 
self.p_expr[0] = tan(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[3] = trigsimp(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[2] = self.p_expr[2] % self.p_expr[1] 
