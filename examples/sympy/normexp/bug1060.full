self.p_v[3] = Symbol('j',positive=True) 
self.p_c[0] = Integer(9) 
self.p_v[0] = Symbol('c') 
self.p_v[2] = Symbol('k',positive=True) 
self.p_v[1] = Symbol('x') 
self.p_c[1] = Integer(9) 
self.p_expr[2] = self.p_v[1] 
self.p_expr[1] = sin(self.p_expr[2]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = I 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[2] 
self.p_term[3] = self.p_c[0] * self.p_v[2] ** self.p_c[1] 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = sqrt(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[3] = powsimp(self.p_expr[2]) 
self.p_expr[2] = factorial(self.p_expr[2]) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
