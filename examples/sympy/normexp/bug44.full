self.p_c[1] = Integer(1) 
self.p_c[2] = Integer(0) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_c[3] = Integer(9) 
self.p_expr[1] = Rational(self.p_c[3],self.p_c[3]) 
self.p_term[2] = self.p_c[2] * self.p_v[3] ** self.p_c[2] 
self.p_expr[2] = asin(self.p_expr[1]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = powdenest(self.p_expr[1]) 
self.p_term[1] = self.p_c[2] * self.p_v[3] ** self.p_c[1] 
self.p_c[3] = Integer(4) 
self.p_v[3] = Symbol('c') 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = powsimp(self.p_expr[1]) 
self.p_expr[1] = acos(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[2] = expand_power_base(self.p_expr[0]) 
self.p_v[3] = Symbol('d') 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[3],self.p_c[1])) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = factorial(self.p_expr[1]) 
self.p_expr[3] = powsimp(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[1] = expand_log(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[2] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[1] = trigsimp(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] % self.p_expr[3] 
