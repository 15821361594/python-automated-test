self.p_v[3] = Symbol('h',positive=True) 
self.p_c[0] = Integer(1) 
self.p_expr[3] = self.p_v[3] 
self.p_v[2] = Symbol('b') 
self.p_expr[0] = expand_power_exp(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[3] = cos(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[2] = tan(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[2] = apart(self.p_expr[1]) 
self.p_expr[0] = factorial(self.p_expr[3]) 
self.p_c[1] = Integer(10) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] - self.p_expr[0] 
self.p_term[2] = self.p_c[0] * self.p_v[3] ** self.p_c[1] 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = cancel(self.p_expr[2]) 
self.p_expr[1] = trigsimp(self.p_expr[3]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[0].doit() 
self.p_v[1] = Symbol('k',positive=True) 
self.p_expr[1] = powsimp(self.p_expr[1]) 
self.p_expr[0] = trigsimp(self.p_expr[1]) 
self.p_c[0] = Integer(6) 
self.p_expr[1] = factorial(self.p_expr[1]) 
self.p_c[1] = Integer(6) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
