self.p_expr[3] = I 
self.p_c[0] = Integer(0) 
self.p_expr[2] = apart(self.p_expr[3]) 
self.p_expr[1] = apart(self.p_expr[3]) 
self.p_expr[0] = powdenest(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = factorial(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[3] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[2] = cos(self.p_expr[0]) 
self.p_expr[0] = factorial(self.p_expr[0]) 
self.p_expr[0] = logcombine(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[3] = powsimp(self.p_expr[2]) 
self.p_expr[0] = expand(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[3] = expand_func(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[2] - self.p_expr[3] 
self.p_c[1] = Integer(3) 
self.p_expr[2] = tan(self.p_expr[1]) 
self.p_expr[1] = sqrt(self.p_expr[1]) 
self.p_expr[3] = atan(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[3] = factorial(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[1] = expand_trig(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = atan(self.p_expr[1]) 
self.p_expr[0] = sqrt(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[1] = simplify(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = cos(self.p_expr[1]) 
self.p_expr[3] = factorial(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = factorial(self.p_expr[2]) 
self.p_expr[0] = tan(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[0] = factor(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[2] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[2] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = expand_func(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[1] = sin(self.p_expr[2]) 
self.p_expr[0] = expand_log(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[3] = tan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[0] = simplify(self.p_expr[2]) 
