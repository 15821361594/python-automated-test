self.p_v[2] = Symbol('l',positive=True) 
self.p_c[1] = Integer(7) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_c[0] = Integer(9) 
self.p_expr[2] = self.p_c[1] 
self.p_c[1] = Integer(0) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = atan(self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_term[2] = self.p_c[1] * self.p_v[1] ** self.p_c[0] 
self.p_expr[1] = self.p_expr[2] - self.p_expr[2] 
self.p_term[0] = self.p_c[1] * self.p_v[1] ** self.p_c[0] 
self.p_c[0] = Integer(9) 
self.p_poly[0] = self.p_term[0] 
self.p_c[1] = Integer(4) 
self.p_expr[2] = tan(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[0] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[3] = factor(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[1])) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[1])) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_expr[3] = cancel(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[2] = E 
self.p_c[0] = Integer(3) 
self.p_poly[2] = self.p_term[0] + self.p_term[2] 
self.p_expr[1] = powdenest(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
