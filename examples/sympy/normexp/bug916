self.p_v[1] = Symbol('y') 
self.p_expr[3] = pi 
self.p_v[3] = Symbol('y') 
self.p_expr[0] = powdenest(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_c[1] = Integer(6) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[3] = expand_func(self.p_expr[3]) 
self.p_expr[1] = powdenest(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[3] 
self.p_v[0] = Symbol('y') 
self.p_expr[3] = expand_trig(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[3] 
self.p_v[2] = Symbol('x') 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[1] 
self.p_c[0] = Integer(6) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[2] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[1],self.p_c[0])) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = expand(self.p_expr[0],force=True) 
self.p_term[3] = self.p_c[0] * self.p_v[1] ** self.p_c[1] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
