self.p_c[1] = Integer(4) 
self.p_c[2] = Integer(6) 
self.p_expr[0] = Rational(self.p_c[1],self.p_c[1]) 
self.p_c[0] = Integer(10) 
self.p_expr[1] = expand_trig(self.p_expr[0]) 
self.p_expr[3] = acos(self.p_expr[1]) 
self.p_expr[2] = cancel(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_c[1] = Integer(2) 
self.p_expr[2] = pi 
self.p_expr[0] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = expand_log(self.p_expr[2]) 
self.p_v[2] = Symbol('i',positive=True) 
self.p_expr[2] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[3] = I 
self.p_expr[1] = tan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[3] 
