self.p_c[0] = Integer(1) 
self.p_v[0] = Symbol('e',positive=True) 
self.p_v[2] = Symbol('x') 
self.p_v[1] = Symbol('d') 
self.p_term[1] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_poly[0] = self.p_term[1] + self.p_term[1] 
self.p_v[3] = Symbol('j',positive=True) 
self.p_c[0] = Integer(2) 
self.p_c[3] = Integer(9) 
self.p_expr[2] = Rational(self.p_c[0],self.p_c[0]) 
self.p_c[0] = Integer(1) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_v[2] 
self.p_v[2] = Symbol('k',positive=True) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_term[1] = self.p_c[3] * self.p_v[0] ** self.p_c[0] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_v[0] = Symbol('h',positive=True) 
self.p_expr[1] = factor(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[2] = atan(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[3] 
