self.p_c[2] = Integer(2) 
self.p_expr[0] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[2] = trigsimp(self.p_expr[0]) 
self.p_expr[1] = apart(self.p_expr[0]) 
self.p_expr[0] = atan(self.p_expr[0]) 
self.p_expr[0] = logcombine(self.p_expr[2]) 
self.p_c[2] = Integer(6) 
self.p_expr[2] = expand_power_base(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = logcombine(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[1] = acos(self.p_expr[0]) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = asin(self.p_expr[0]) 
self.p_expr[2].evalf() 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = acos(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[3] = expand(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[2] = simplify(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[0] = logcombine(self.p_expr[3]) 
self.p_c[1] = Integer(3) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[0] = asin(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[2] = cancel(self.p_expr[1]) 
self.p_expr[1] = cos(self.p_expr[3]) 
self.p_expr[0] = expand_power_base(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[0] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = expand_power_exp(self.p_expr[1]) 
self.p_expr[0] = expand(self.p_expr[3]) 
self.p_expr[3] = acos(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3].doit() 
self.p_v[2] = Symbol('b') 
self.p_expr[3] = Rational(self.p_c[2],self.p_c[1]) 
self.p_c[1] = Integer(4) 
self.p_expr[3].evalf() 
self.p_expr[0] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[0] = sin(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[3] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = expand_power_base(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[0] = sin(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[1] 
self.p_v[0] = Symbol('e',positive=True) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = tan(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[0],self.p_c[1],self.p_c[2])) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[0],self.p_c[1],self.p_c[2])) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
