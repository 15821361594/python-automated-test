self.p_v[2] = Symbol('x') 
self.p_c[2] = Integer(10) 
self.p_c[3] = Integer(6) 
self.p_term[3] = self.p_c[2] * self.p_v[2] ** self.p_c[3] 
self.p_term[0] = self.p_c[2] * self.p_v[2] ** self.p_c[2] 
self.p_v[1] = Symbol('z') 
self.p_v[2] = Symbol('z') 
self.p_expr[0] = self.p_c[3] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_v[0] = Symbol('h',positive=True) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[1] = sin(self.p_expr[3]) 
self.p_expr[3] = powsimp(self.p_expr[3]) 
self.p_term[2] = self.p_c[3] * self.p_v[2] ** self.p_c[3] 
self.p_poly[0] = self.p_term[2] + self.p_term[2] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = asin(self.p_expr[2]) 
self.p_c[2] = Integer(0) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[2])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[0] = factorial(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[0] 
