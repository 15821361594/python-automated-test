self.p_c[2] = Integer(3) 
self.p_c[0] = Integer(3) 
self.p_v[2] = Symbol('y') 
self.p_term[0] = self.p_c[0] * self.p_v[2] ** self.p_c[0] 
self.p_expr[2] = pi 
self.p_c[0] = Integer(8) 
self.p_v[3] = Symbol('k',positive=True) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[2] = sqrt(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[1] = factor(self.p_expr[1]) 
self.p_c[3] = Integer(3) 
self.p_v[2] = Symbol('h',positive=True) 
self.p_v[1] = Symbol('g',positive=True) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[0])) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[3] = expand_power_base(self.p_expr[1]) 
self.p_expr[2] = expand_trig(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[0] 
