self.p_v[1] = Symbol('g',positive=True) 
self.p_c[2] = Integer(2) 
self.p_expr[1] = self.p_v[1] 
self.p_expr[2] = sqrt(self.p_expr[1]) 
self.p_v[3] = Symbol('i',positive=True) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[1] 
self.p_c[1] = Integer(1) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = sin(self.p_expr[2]) 
self.p_expr[2] = sin(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[0] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[2])) 
self.p_v[2] = Symbol('i',positive=True) 
self.p_expr[1] = self.p_expr[3].doit() 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_term[3] = self.p_c[2] * self.p_v[3] ** self.p_c[1] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[2])) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[1] 
