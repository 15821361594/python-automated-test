self.p_c[1] = Integer(5) 
self.p_v[0] = Symbol('b') 
self.p_v[3] = Symbol('a') 
self.p_c[0] = Integer(2) 
self.p_expr[0] = self.p_v[0] 
self.p_term[3] = self.p_c[1] * self.p_v[3] ** self.p_c[0] 
self.p_expr[3] = tan(self.p_expr[0]) 
self.p_expr[2] = tan(self.p_expr[3]) 
self.p_expr[3] = factorial(self.p_expr[3]) 
self.p_expr[1] = simplify(self.p_expr[0]) 
self.p_expr[3] = expand_power_base(self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] * self.p_expr[3] 
self.p_c[1] = Integer(6) 
self.p_expr[3] = expand(self.p_expr[1]) 
self.p_c[2] = Integer(2) 
self.p_expr[0] = expand_power_base(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[2])) 
self.p_expr[0] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[1] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[2] = logcombine(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = powsimp(self.p_expr[3]) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[0])) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[0] = expand_func(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
