self.p_v[2] = Symbol('c') 
self.p_expr[3] = self.p_v[2] 
self.p_c[1] = Integer(10) 
self.p_c[0] = Integer(2) 
self.p_c[3] = Integer(9) 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[3]) 
self.p_term[2] = self.p_c[1] * self.p_v[2] ** self.p_c[0] 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[0] 
self.p_poly[3] = self.p_term[2] 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[1]) 
self.p_expr[1] = expand(self.p_expr[0],force=True) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_expr[1] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[1] = cos(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[1] = acos(self.p_expr[1]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[1])) 
self.p_expr[1] = acos(self.p_expr[0]) 
self.p_c[2] = Integer(1) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_c[2] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
