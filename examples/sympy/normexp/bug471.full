self.p_v[0] = Symbol('z') 
self.p_v[1] = Symbol('b') 
self.p_expr[0] = pi 
self.p_expr[3] = apart(self.p_expr[0]) 
self.p_expr[0] = powsimp(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[3] = expand(self.p_expr[3]) 
self.p_expr[0] = logcombine(self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_v[2] = Symbol('y') 
self.p_expr[1] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[1].evalf() 
self.p_c[2] = Integer(6) 
self.p_expr[3] = sqrt(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[1] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[0] = atan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[2] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_term[3] = self.p_c[2] * self.p_v[1] ** self.p_c[2] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[2] 
self.p_c[2] = Integer(0) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[0] 
