self.p_c[1] = Integer(7) 
self.p_c[2] = Integer(6) 
self.p_c[0] = Integer(8) 
self.p_expr[2] = self.p_c[0] 
self.p_expr[2].evalf() 
self.p_c[3] = Integer(0) 
self.p_expr[0] = tan(self.p_expr[2]) 
self.p_v[0] = Symbol('k',positive=True) 
self.p_expr[2] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[0] = self.p_c[1] 
self.p_expr[1] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[3] = apart(self.p_expr[2]) 
self.p_c[1] = Integer(7) 
self.p_expr[2] = atan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_v[3] = Symbol('b') 
self.p_expr[3] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[2] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[2])) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = sqrt(self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_term[3] = self.p_c[1] * self.p_v[0] ** self.p_c[0] 
self.p_expr[1] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] % self.p_expr[0] 
