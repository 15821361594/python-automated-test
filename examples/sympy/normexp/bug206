self.p_v[0] = Symbol('a') 
self.p_v[3] = Symbol('e',positive=True) 
self.p_v[2] = Symbol('e',positive=True) 
self.p_c[3] = Integer(2) 
self.p_expr[1] = I 
self.p_expr[0] = atan(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[3] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = factorial(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = tan(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = combsimp(self.p_expr[3]) 
self.p_v[3] = Symbol('i',positive=True) 
self.p_expr[3] = powsimp(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = asin(self.p_expr[0]) 
self.p_expr[2] = self.p_c[3] 
self.p_expr[0] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = apart(self.p_expr[0]) 
self.p_expr[0] = expand_power_base(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
