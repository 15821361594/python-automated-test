self.p_c[3] = Integer(10) 
self.p_c[2] = Integer(10) 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[3]) 
self.p_c[0] = Integer(5) 
self.p_v[3] = Symbol('y') 
self.p_c[3] = Integer(8) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[3] = expand_power_base(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = expand_func(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[2] 
self.p_c[0] = Integer(7) 
self.p_expr[2] = trigsimp(self.p_expr[3]) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[2])) 
self.p_expr[3] = atan(self.p_expr[2]) 
self.p_c[1] = Integer(7) 
self.p_term[1] = self.p_c[2] * self.p_v[3] ** self.p_c[1] 
self.p_v[2] = Symbol('y') 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[0] 
