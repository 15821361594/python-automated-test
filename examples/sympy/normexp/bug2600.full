self.p_v[1] = Symbol('f',positive=True) 
self.p_c[3] = Integer(6) 
self.p_v[0] = Symbol('g',positive=True) 
self.p_expr[0] = self.p_v[0] 
self.p_expr[1] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[3] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[2] = combsimp(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = simplify(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[3] = cancel(self.p_expr[3]) 
self.p_expr[2] = sin(self.p_expr[2]) 
self.p_expr[3] = apart(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_v[2] = Symbol('z') 
self.p_expr[1] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[3] = cos(self.p_expr[1]) 
self.p_v[3] = Symbol('b') 
self.p_v[0] = Symbol('z') 
self.p_expr[1] = self.p_expr[1] % self.p_expr[3] 
