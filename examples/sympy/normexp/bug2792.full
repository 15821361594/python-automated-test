self.p_c[0] = Integer(7) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_v[3] = Symbol('c') 
self.p_term[0] = self.p_c[0] * self.p_v[2] ** self.p_c[0] 
self.p_poly[2] = self.p_term[0] + self.p_term[0] 
self.p_c[1] = Integer(4) 
self.p_expr[2] = E 
self.p_v[2] = Symbol('k',positive=True) 
self.p_expr[1] = self.p_c[0] 
self.p_term[3] = self.p_c[1] * self.p_v[2] ** self.p_c[0] 
self.p_expr[0] = apart(self.p_expr[2]) 
self.p_expr[2] = trigsimp(self.p_expr[2]) 
self.p_c[0] = Integer(0) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = atan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[3] 
self.p_v[1] = Symbol('f',positive=True) 
self.p_term[0] = self.p_c[1] * self.p_v[2] ** self.p_c[0] 
self.p_expr[3] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
