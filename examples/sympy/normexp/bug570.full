self.p_c[3] = Integer(4) 
self.p_expr[0] = self.p_c[3] 
self.p_c[1] = Integer(3) 
self.p_expr[2] = powsimp(self.p_expr[0]) 
self.p_v[1] = Symbol('z') 
self.p_v[2] = Symbol('g',positive=True) 
self.p_expr[0] = cancel(self.p_expr[2]) 
self.p_expr[2] = expand(self.p_expr[2],force=True) 
self.p_expr[1] = powsimp(self.p_expr[0]) 
self.p_v[3] = Symbol('y') 
self.p_expr[2] = powdenest(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[1],self.p_c[3])) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[0] 
self.p_term[3] = self.p_c[3] * self.p_v[2] ** self.p_c[1] 
self.p_expr[2] = acos(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = powdenest(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = expand(self.p_expr[3],force=True) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = asin(self.p_expr[3]) 
self.p_v[2] = Symbol('i',positive=True) 
self.p_expr[1] = expand(self.p_expr[1],force=True) 
self.p_expr[2] = expand(self.p_expr[1],force=True) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
