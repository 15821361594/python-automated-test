self.p_c[2] = Integer(5) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_v[1] = Symbol('i',positive=True) 
self.p_v[3] = Symbol('z') 
self.p_expr[2] = I 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[1] = combsimp(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[0] 
self.p_c[2] = Integer(3) 
self.p_expr[0] = self.p_expr[1].doit() 
self.p_expr[1] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] - self.p_expr[1] 
self.p_v[0] = Symbol('e',positive=True) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_c[0] = Integer(5) 
self.p_expr[2] = powsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].doit() 
self.p_expr[3] = acos(self.p_expr[0]) 
self.p_expr[0] = powdenest(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[0] 
