self.p_v[1] = Symbol('h',positive=True) 
self.p_v[2] = Symbol('d') 
self.p_v[3] = Symbol('c') 
self.p_c[3] = Integer(4) 
self.p_c[1] = Integer(3) 
self.p_term[0] = self.p_c[1] * self.p_v[2] ** self.p_c[1] 
self.p_c[1] = Integer(4) 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[3]) 
self.p_expr[3] = cos(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[3] = factor(self.p_expr[2]) 
self.p_expr[0] = self.p_c[3] 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_term[3] = self.p_c[3] * self.p_v[1] ** self.p_c[3] 
self.p_expr[1] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[0] 
self.p_v[1] = Symbol('j',positive=True) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_v[3] = Symbol('g',positive=True) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[3] = self.p_expr[0] % self.p_expr[1] 
