self.p_expr[2] = I 
self.p_expr[0] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[2] = expand_trig(self.p_expr[0]) 
self.p_expr[3] = I 
self.p_c[0] = Integer(8) 
self.p_c[2] = Integer(0) 
self.p_v[0] = Symbol('i',positive=True) 
self.p_expr[1] = powsimp(self.p_expr[2]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_v[1] = Symbol('a') 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[0] = combsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[2] = asin(self.p_expr[3]) 
self.p_expr[0] = powsimp(self.p_expr[2]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[0])) 
self.p_expr[3] = expand_power_base(self.p_expr[2]) 
self.p_term[1] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = atan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
