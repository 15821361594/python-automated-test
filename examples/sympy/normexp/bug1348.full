self.p_v[3] = Symbol('c') 
self.p_v[1] = Symbol('y') 
self.p_c[3] = Integer(4) 
self.p_expr[0] = self.p_c[3] 
self.p_expr[3] = pi 
self.p_expr[1] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = expand_log(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[2] = self.p_expr[3].doit() 
self.p_expr[0] = sqrt(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[3] = self.p_expr[0] / self.p_expr[2] 
self.p_v[2] = Symbol('b') 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = cancel(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[0] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_c[2] = Integer(4) 
self.p_expr[0] = acos(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[2])) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[2])) 
self.p_v[3] = Symbol('b') 
self.p_v[2] = Symbol('i',positive=True) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[1] 
