self.p_c[0] = Integer(7) 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[3] = powdenest(self.p_expr[0]) 
self.p_expr[0].evalf() 
self.p_c[3] = Integer(8) 
self.p_v[0] = Symbol('h',positive=True) 
self.p_expr[0].evalf() 
self.p_v[3] = Symbol('l',positive=True) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[3] = expand(self.p_expr[3],force=True) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = expand(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = expand(self.p_expr[3]) 
self.p_c[1] = Integer(0) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = tan(self.p_expr[3]) 
self.p_expr[3] = atan(self.p_expr[2]) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[3] 
