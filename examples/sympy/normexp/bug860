self.p_c[0] = Integer(6) 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[1] = logcombine(self.p_expr[0]) 
self.p_expr[3] = atan(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_c[2] = Integer(6) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[3] 
self.p_v[1] = Symbol('c') 
self.p_c[0] = Integer(6) 
self.p_term[1] = self.p_c[2] * self.p_v[1] ** self.p_c[2] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = factorial(self.p_expr[3]) 
self.p_v[1] = Symbol('g',positive=True) 
self.p_expr[1] = expand_power_base(self.p_expr[0]) 
self.p_expr[3] = factorial(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] - self.p_expr[0] 
self.p_c[3] = Integer(6) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_expr[0] = sqrt(self.p_expr[1]) 
self.p_expr[1] = combsimp(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_v[1] = Symbol('k',positive=True) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = expand_power_base(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[0] 
