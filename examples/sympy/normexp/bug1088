self.p_v[3] = Symbol('x') 
self.p_expr[0] = E 
self.p_expr[3] = asin(self.p_expr[0]) 
self.p_expr[2] = powsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[1] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = tan(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = combsimp(self.p_expr[2]) 
self.p_c[1] = Integer(9) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[3] 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[2] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[1] = sqrt(self.p_expr[1]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = acos(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = self.p_c[1] 
self.p_expr[2] = factor(self.p_expr[1]) 
self.p_expr[1] = factorial(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[2].evalf() 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = I 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_v[3] = Symbol('y') 
self.p_expr[3] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[1] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_c[2] = Integer(9) 
self.p_expr[2] = expand(self.p_expr[2]) 
self.p_c[0] = Integer(1) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
