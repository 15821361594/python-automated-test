self.p_v[2] = Symbol('h',positive=True) 
self.p_c[2] = Integer(1) 
self.p_expr[3] = self.p_v[2] 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = expand_trig(self.p_expr[3]) 
self.p_expr[2] = expand_trig(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = expand(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2].doit() 
self.p_expr[2] = powsimp(self.p_expr[0]) 
self.p_expr[3] = cos(self.p_expr[2]) 
self.p_expr[2] = sin(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[0].evalf() 
self.p_expr[1] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[1] = cos(self.p_expr[1]) 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[1] = expand_power_base(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = expand_trig(self.p_expr[3]) 
self.p_v[2] = Symbol('h',positive=True) 
self.p_expr[3] = sqrt(self.p_expr[3]) 
self.p_c[0] = Integer(3) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[3] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[1] 
self.p_c[0] = Integer(1) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[1] = atan(self.p_expr[1]) 
self.p_expr[0] = sin(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = factor(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[3] 
