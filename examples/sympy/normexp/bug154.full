self.p_v[0] = Symbol('b') 
self.p_c[2] = Integer(6) 
self.p_v[3] = Symbol('k',positive=True) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_c[0] = Integer(5) 
self.p_term[3] = self.p_c[0] * self.p_v[0] ** self.p_c[2] 
self.p_c[1] = Integer(9) 
self.p_expr[3] = self.p_v[0] 
self.p_expr[2] = Rational(self.p_c[2],self.p_c[2]) 
self.p_c[2] = Integer(5) 
self.p_expr[1] = expand_log(self.p_expr[2]) 
self.p_expr[0] = tan(self.p_expr[2]) 
self.p_term[0] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_poly[0] = self.p_term[3] 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[0])) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[0] = expand_power_exp(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = factor(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_c[0] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
