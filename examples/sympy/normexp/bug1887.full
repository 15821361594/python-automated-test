self.p_v[2] = Symbol('f',positive=True) 
self.p_v[3] = Symbol('l',positive=True) 
self.p_expr[1] = pi 
self.p_expr[3] = acos(self.p_expr[1]) 
self.p_c[2] = Integer(9) 
self.p_expr[2] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[1] = powdenest(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = expand_log(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[3] = simplify(self.p_expr[0]) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[3] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[2] = acos(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[1] 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = logcombine(self.p_expr[3]) 
self.p_c[1] = Integer(9) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[2] 
self.p_c[3] = Integer(8) 
self.p_term[2] = self.p_c[3] * self.p_v[3] ** self.p_c[2] 
self.p_term[1] = self.p_c[2] * self.p_v[2] ** self.p_c[2] 
self.p_expr[2] = cos(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[0] 
