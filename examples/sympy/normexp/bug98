self.p_v[0] = Symbol('h',positive=True) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_v[3] = Symbol('k',positive=True) 
self.p_v[2] = Symbol('i',positive=True) 
self.p_expr[1] = pi 
self.p_expr[3] = expand_trig(self.p_expr[1]) 
self.p_expr[0] = expand(self.p_expr[3],force=True) 
self.p_expr[1] = powdenest(self.p_expr[3]) 
self.p_c[2] = Integer(0) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = trigsimp(self.p_expr[0]) 
self.p_expr[3] = atan(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[3] = expand_log(self.p_expr[2]) 
self.p_expr[1] = cancel(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = tan(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
