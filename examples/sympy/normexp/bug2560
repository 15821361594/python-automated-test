self.p_expr[1] = E 
self.p_expr[3] = trigsimp(self.p_expr[1]) 
self.p_expr[2] = simplify(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = expand(self.p_expr[1],force=True) 
self.p_expr[2] = expand_power_base(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[2] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = trigsimp(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0].doit() 
self.p_expr[0] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[2] = sin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[3] 
self.p_c[3] = Integer(8) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[3] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = logcombine(self.p_expr[0]) 
self.p_c[2] = Integer(7) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_v[3] = Symbol('c') 
self.p_expr[1] = expand_log(self.p_expr[2]) 
self.p_expr[2] = tan(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[3])) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[0] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[3] = self.p_c[3] 
self.p_expr[1] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[2] 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
