self.p_v[1] = Symbol('d') 
self.p_expr[2] = E 
self.p_expr[0] = cos(self.p_expr[2]) 
self.p_expr[3] = expand_log(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[2] = apart(self.p_expr[2]) 
self.p_expr[2] = expand_log(self.p_expr[2]) 
self.p_expr[1] = expand_power_exp(self.p_expr[3]) 
self.p_v[3] = Symbol('c') 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[1] = sqrt(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[3] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[2] = logcombine(self.p_expr[3]) 
self.p_expr[3] = acos(self.p_expr[0]) 
self.p_expr[1] = expand_func(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = expand_power_base(self.p_expr[1]) 
self.p_expr[1] = acos(self.p_expr[3]) 
self.p_expr[0] = tan(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[3] 
