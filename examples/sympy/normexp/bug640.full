self.p_v[0] = Symbol('y') 
self.p_c[2] = Integer(7) 
self.p_term[0] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_c[0] = Integer(9) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_term[1] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_poly[1] = self.p_term[1] + self.p_term[1] 
self.p_poly[3] = self.p_term[0] 
self.p_v[1] = Symbol('g',positive=True) 
self.p_term[3] = self.p_c[2] * self.p_v[2] ** self.p_c[2] 
self.p_expr[3] = Rational(self.p_c[0],self.p_c[2]) 
self.p_expr[1] = pi 
self.p_expr[0] = asin(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_v[2] = Symbol('f',positive=True) 
self.p_expr[3] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[0])) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[2])) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
