self.p_v[3] = Symbol('h',positive=True) 
self.p_c[2] = Integer(1) 
self.p_expr[3] = pi 
self.p_term[0] = self.p_c[2] * self.p_v[3] ** self.p_c[2] 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[1] = apart(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3].doit() 
self.p_expr[3] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[2] 
self.p_c[3] = Integer(3) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = expand(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = factorial(self.p_expr[2]) 
self.p_expr[2] = self.p_c[2] 
self.p_expr[3] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = expand_power_base(self.p_expr[0]) 
self.p_expr[0] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[0].evalf() 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
