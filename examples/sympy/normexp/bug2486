self.p_expr[1] = E 
self.p_v[3] = Symbol('z') 
self.p_expr[2] = pi 
self.p_expr[3] = logcombine(self.p_expr[2]) 
self.p_expr[2] = acos(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = acos(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = apart(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = expand_func(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = asin(self.p_expr[1]) 
self.p_expr[1] = asin(self.p_expr[2]) 
self.p_expr[2] = expand_log(self.p_expr[2]) 
self.p_expr[0] = sin(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_c[2] = Integer(2) 
self.p_expr[2].evalf() 
self.p_expr[3] = self.p_expr[0].doit() 
self.p_expr[2] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[1] = self.p_expr[1] % self.p_expr[0] 
