self.p_expr[3] = I 
self.p_c[3] = Integer(9) 
self.p_expr[0] = expand_power_exp(self.p_expr[3]) 
self.p_expr[2] = powsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[3] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = acos(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[1] = self.p_expr[3] / self.p_expr[3] 
self.p_c[1] = Integer(2) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[0] 
