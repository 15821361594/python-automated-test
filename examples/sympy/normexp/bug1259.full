self.p_v[1] = Symbol('l',positive=True) 
self.p_v[2] = Symbol('z') 
self.p_expr[0] = self.p_v[2] 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[0] + self.p_expr[0] 
self.p_c[3] = Integer(8) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = expand_func(self.p_expr[3]) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = E 
self.p_c[3] = Integer(10) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_v[0] = Symbol('c') 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[0] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = trigsimp(self.p_expr[2]) 
self.p_expr[3] = pi 
self.p_expr[2] = expand_func(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = powsimp(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = logcombine(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[1] 
self.p_v[1] = Symbol('g',positive=True) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[3] = sqrt(self.p_expr[1]) 
self.p_expr[1] = apart(self.p_expr[3]) 
self.p_expr[0] = expand_log(self.p_expr[0]) 
self.p_c[3] = Integer(6) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_v[2] = Symbol('k',positive=True) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1].doit() 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[3] = atan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = factorial(self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[0]) 
