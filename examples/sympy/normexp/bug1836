self.p_c[3] = Integer(8) 
self.p_c[1] = Integer(9) 
self.p_c[0] = Integer(1) 
self.p_expr[2] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[1] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[1] = expand_log(self.p_expr[1]) 
self.p_expr[2] = expand_power_exp(self.p_expr[2]) 
self.p_expr[1] = factor(self.p_expr[1]) 
self.p_expr[3] = logcombine(self.p_expr[2]) 
self.p_expr[2] = expand_trig(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = factor(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = cos(self.p_expr[3]) 
self.p_expr[2] = cos(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[0] 
self.p_c[0] = Integer(0) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[2] 
self.p_v[2] = Symbol('y') 
self.p_expr[3] = powdenest(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[3] = factorial(self.p_expr[1]) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[0] 
self.p_v[2] = Symbol('k',positive=True) 
self.p_expr[1] = logcombine(self.p_expr[2]) 
self.p_expr[2] = factor(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[3] = cos(self.p_expr[0]) 
self.p_expr[1] = powdenest(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = expand_log(self.p_expr[0]) 
self.p_v[1] = Symbol('z') 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[2] = sin(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[2] 
