self.p_c[1] = Integer(1) 
self.p_v[1] = Symbol('z') 
self.p_v[3] = Symbol('b') 
self.p_c[3] = Integer(6) 
self.p_expr[3] = self.p_c[1] 
self.p_expr[1] = atan(self.p_expr[3]) 
self.p_expr[3] = powsimp(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_c[2] = Integer(4) 
self.p_expr[2] = E 
self.p_expr[3] = expand(self.p_expr[1],force=True) 
self.p_term[3] = self.p_c[1] * self.p_v[3] ** self.p_c[3] 
self.p_expr[1] = sqrt(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[1],self.p_c[3],self.p_c[1])) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[3])) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[1] = expand_trig(self.p_expr[3]) 
self.p_v[1] = Symbol('x') 
self.p_term[1] = self.p_c[2] * self.p_v[1] ** self.p_c[2] 
self.p_expr[2] = logcombine(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[2])) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = logcombine(self.p_expr[2]) 
self.p_expr[2] = asin(self.p_expr[2]) 
self.p_expr[2] = trigsimp(self.p_expr[3]) 
self.p_c[1] = Integer(10) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
