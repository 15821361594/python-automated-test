self.p_v[0] = Symbol('k',positive=True) 
self.p_c[0] = Integer(5) 
self.p_c[2] = Integer(2) 
self.p_term[2] = self.p_c[0] * self.p_v[0] ** self.p_c[2] 
self.p_expr[1] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_expr[1] = self.p_c[0] 
self.p_expr[3] = trigsimp(self.p_expr[2]) 
self.p_v[2] = Symbol('z') 
self.p_expr[2] = atan(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = cancel(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[1] = expand(self.p_expr[2],force=True) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[2] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = atan(self.p_expr[0]) 
self.p_v[0] = Symbol('i',positive=True) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = apart(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
