self.p_v[2] = Symbol('z') 
self.p_expr[1] = I 
self.p_v[3] = Symbol('l',positive=True) 
self.p_c[3] = Integer(5) 
self.p_v[0] = Symbol('e',positive=True) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[0] = self.p_expr[2] + self.p_expr[1] 
self.p_v[1] = Symbol('j',positive=True) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = powsimp(self.p_expr[3]) 
self.p_expr[3] = powdenest(self.p_expr[3]) 
self.p_expr[3] = combsimp(self.p_expr[3]) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[1] = cos(self.p_expr[0]) 
self.p_expr[0] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = self.p_v[3] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = cos(self.p_expr[2]) 
self.p_c[2] = Integer(8) 
self.p_c[0] = Integer(5) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[2] 
