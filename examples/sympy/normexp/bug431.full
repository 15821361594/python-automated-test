self.p_expr[1] = pi 
self.p_expr[2] = cancel(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[0] = cos(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = expand_log(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_v[1] = Symbol('z') 
self.p_expr[3] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[0] = I 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] + self.p_expr[1] 
self.p_v[3] = Symbol('a') 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[1] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = expand_trig(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[0] = combsimp(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = expand(self.p_expr[1],force=True) 
self.p_expr[3] = tan(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1].evalf() 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[1] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[2] = tan(self.p_expr[1]) 
self.p_expr[0] = expand_log(self.p_expr[0]) 
self.p_expr[0] = tan(self.p_expr[3]) 
self.p_expr[1] = cancel(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[3] / self.p_expr[2] 
self.p_c[2] = Integer(6) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[3] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[1] = self.p_expr[1].doit() 
self.p_term[0] = self.p_c[2] * self.p_v[3] ** self.p_c[2] 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = combsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = trigsimp(self.p_expr[2]) 
