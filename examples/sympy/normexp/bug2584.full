self.p_v[1] = Symbol('k',positive=True) 
self.p_v[3] = Symbol('g',positive=True) 
self.p_v[0] = Symbol('z') 
self.p_expr[1] = I 
self.p_expr[2] = self.p_expr[1] + self.p_expr[1] 
self.p_v[2] = Symbol('b') 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[2] 
self.p_c[3] = Integer(9) 
self.p_expr[0] = expand(self.p_expr[1],force=True) 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[0] = factorial(self.p_expr[0]) 
self.p_expr[3] = expand_log(self.p_expr[1]) 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = factorial(self.p_expr[2]) 
self.p_expr[3] = sin(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] % self.p_expr[3] 
