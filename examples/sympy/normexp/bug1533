self.p_v[0] = Symbol('f',positive=True) 
self.p_c[1] = Integer(9) 
self.p_expr[0] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[3] = factorial(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = factor(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = simplify(self.p_expr[0]) 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[3] 
self.p_v[3] = Symbol('d') 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = trigsimp(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[3] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[0] = cos(self.p_expr[0]) 
self.p_expr[0] = powsimp(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = powdenest(self.p_expr[0]) 
self.p_expr[1] = sqrt(self.p_expr[2]) 
self.p_expr[2] = expand_trig(self.p_expr[1]) 
self.p_expr[1] = cos(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[3] = asin(self.p_expr[3]) 
self.p_expr[3] = self.p_v[0] 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = logcombine(self.p_expr[0]) 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = factor(self.p_expr[2]) 
self.p_expr[3] = self.p_c[1] 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[1] = self.p_expr[1] + self.p_expr[2] 
self.p_c[2] = Integer(5) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = factorial(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[2])) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
