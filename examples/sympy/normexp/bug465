self.p_v[1] = Symbol('c') 
self.p_v[0] = Symbol('z') 
self.p_c[1] = Integer(6) 
self.p_term[1] = self.p_c[1] * self.p_v[1] ** self.p_c[1] 
self.p_v[3] = Symbol('e',positive=True) 
self.p_term[2] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_c[2] = Integer(5) 
self.p_v[1] = Symbol('d') 
self.p_expr[2] = I 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[1])) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = factor(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = powdenest(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[1] 
