self.p_v[1] = Symbol('k',positive=True) 
self.p_v[3] = Symbol('y') 
self.p_expr[3] = pi 
self.p_v[2] = Symbol('h',positive=True) 
self.p_c[3] = Integer(6) 
self.p_expr[0] = logcombine(self.p_expr[3]) 
self.p_expr[2] = expand_log(self.p_expr[3]) 
self.p_c[0] = Integer(8) 
self.p_expr[1] = apart(self.p_expr[0]) 
self.p_expr[0] = factor(self.p_expr[0]) 
self.p_expr[0] = expand_func(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = expand(self.p_expr[0],force=True) 
self.p_term[2] = self.p_c[3] * self.p_v[2] ** self.p_c[0] 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[1] 
