self.p_c[0] = Integer(3) 
self.p_v[1] = Symbol('d') 
self.p_term[1] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_v[0] = Symbol('a') 
self.p_expr[0] = self.p_v[0] 
self.p_expr[3] = sin(self.p_expr[0]) 
self.p_expr[0] = expand_trig(self.p_expr[0]) 
self.p_expr[0] = E 
self.p_expr[1] = self.p_expr[3] - self.p_expr[3] 
self.p_expr[3] = I 
self.p_expr[2] = acos(self.p_expr[1]) 
self.p_v[3] = Symbol('d') 
self.p_expr[1] = sqrt(self.p_expr[1]) 
self.p_v[0] = Symbol('b') 
self.p_expr[1] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = atan(self.p_expr[0]) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].doit() 
self.p_expr[2] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[3] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[0] = expand_log(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[2] = asin(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[1] = expand_func(self.p_expr[3]) 
self.p_term[2] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_expr[0] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = expand_power_base(self.p_expr[1]) 
self.p_expr[2] = apart(self.p_expr[3]) 
self.p_v[3] = Symbol('g',positive=True) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = expand_log(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[3] = atan(self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[2] = expand(self.p_expr[2]) 
self.p_expr[2] = tan(self.p_expr[2]) 
self.p_poly[0] = self.p_term[2] 
self.p_expr[3].evalf() 
self.p_expr[0] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[0] = apart(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[1] 
