self.p_expr[1] = I 
self.p_expr[3] = acos(self.p_expr[1]) 
self.p_c[0] = Integer(3) 
self.p_c[1] = Integer(8) 
self.p_expr[1] = powdenest(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[2] = pi 
self.p_expr[3] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[0] = cancel(self.p_expr[1]) 
self.p_expr[2] = expand_func(self.p_expr[1]) 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = tan(self.p_expr[2]) 
self.p_expr[2] = expand_func(self.p_expr[3]) 
self.p_expr[0] = cos(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[1] = expand_power_base(self.p_expr[1]) 
self.p_expr[3] = simplify(self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_c[2] = Integer(1) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = factor(self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[3]) 
self.p_expr[3] = expand_func(self.p_expr[2]) 
self.p_v[0] = Symbol('k',positive=True) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
