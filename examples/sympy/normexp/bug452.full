self.p_expr[3] = pi 
self.p_expr[1] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[0] = self.p_expr[3].doit() 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = combsimp(self.p_expr[2]) 
self.p_expr[1] = atan(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[2] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[0] = expand_func(self.p_expr[3]) 
self.p_expr[3] = asin(self.p_expr[0]) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = combsimp(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[0] = expand(self.p_expr[0],force=True) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[1] = sin(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[3] = factorial(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = powsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[0] = powsimp(self.p_expr[1]) 
self.p_c[0] = Integer(4) 
self.p_expr[1] = simplify(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_c[0] = Integer(6) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_c[2] = Integer(9) 
self.p_expr[2] = expand(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = cancel(self.p_expr[3]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[3] 
