self.p_v[2] = Symbol('k',positive=True) 
self.p_v[3] = Symbol('j',positive=True) 
self.p_c[3] = Integer(2) 
self.p_expr[1] = self.p_c[3] 
self.p_c[1] = Integer(10) 
self.p_c[3] = Integer(0) 
self.p_expr[3] = logcombine(self.p_expr[1]) 
self.p_expr[2] = powdenest(self.p_expr[3]) 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[3]) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[3] = self.p_v[2] 
self.p_c[1] = Integer(5) 
self.p_expr[1] = sin(self.p_expr[3]) 
self.p_expr[3] = expand(self.p_expr[0]) 
self.p_term[3] = self.p_c[3] * self.p_v[2] ** self.p_c[1] 
self.p_expr[0] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[3] = powdenest(self.p_expr[3]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[1])) 
self.p_c[3] = Integer(6) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[1] 
