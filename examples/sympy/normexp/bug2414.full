self.p_v[3] = Symbol('l',positive=True) 
self.p_v[1] = Symbol('e',positive=True) 
self.p_c[2] = Integer(2) 
self.p_c[0] = Integer(9) 
self.p_expr[1] = Rational(self.p_c[0],self.p_c[0]) 
self.p_c[3] = Integer(1) 
self.p_expr[2] = powsimp(self.p_expr[1]) 
self.p_expr[1] = asin(self.p_expr[2]) 
self.p_term[0] = self.p_c[3] * self.p_v[3] ** self.p_c[2] 
self.p_expr[0] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[0] = atan(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[3])) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[2])) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = acos(self.p_expr[1]) 
self.p_c[0] = Integer(6) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[0] = asin(self.p_expr[3]) 
self.p_expr[3] = atan(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[0].evalf() 
self.p_expr[0] = combsimp(self.p_expr[1]) 
