self.p_c[1] = Integer(8) 
self.p_v[1] = Symbol('z') 
self.p_v[0] = Symbol('y') 
self.p_c[3] = Integer(2) 
self.p_expr[1] = Rational(self.p_c[3],self.p_c[1]) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[3]) 
self.p_expr[2] = sqrt(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[0] = cos(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = cancel(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = factor(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[0] = expand_log(self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = sqrt(self.p_expr[3]) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[1])) 
self.p_c[1] = Integer(4) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[0] 
