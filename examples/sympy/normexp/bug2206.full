self.p_v[0] = Symbol('y') 
self.p_c[1] = Integer(6) 
self.p_c[3] = Integer(7) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_term[3] = self.p_c[1] * self.p_v[0] ** self.p_c[1] 
self.p_v[0] = Symbol('z') 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[0] = self.p_expr[1].doit() 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[1])) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_c[2] = Integer(9) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_c[1] = Integer(7) 
self.p_v[2] = Symbol('z') 
self.p_v[1] = Symbol('k',positive=True) 
self.p_expr[3] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = apart(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[1])) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[3])) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[1] = simplify(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_term[0] = self.p_c[2] * self.p_v[2] ** self.p_c[1] 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = E 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[1])) 
self.p_expr[0] = atan(self.p_expr[0]) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[2])) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[0] 
