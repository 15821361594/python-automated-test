self.p_c[2] = Integer(7) 
self.p_expr[0] = E 
self.p_c[3] = Integer(8) 
self.p_expr[3] = powsimp(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[0] = factorial(self.p_expr[1]) 
self.p_expr[1] = powsimp(self.p_expr[2]) 
self.p_expr[2] = acos(self.p_expr[2]) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_term[3] = self.p_c[3] * self.p_v[1] ** self.p_c[3] 
self.p_expr[2] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[0] = sqrt(self.p_expr[3]) 
self.p_expr[2].evalf() 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[1] = expand_power_base(self.p_expr[2]) 
self.p_expr[0] = simplify(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_v[0] = Symbol('j',positive=True) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[1] = expand_power_base(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[3] = cancel(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_term[2] = self.p_c[2] * self.p_v[0] ** self.p_c[3] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[0] 
