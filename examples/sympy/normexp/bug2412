self.p_v[1] = Symbol('h',positive=True) 
self.p_v[0] = Symbol('f',positive=True) 
self.p_c[2] = Integer(10) 
self.p_c[0] = Integer(4) 
self.p_term[3] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_v[0] = Symbol('y') 
self.p_term[0] = self.p_c[2] * self.p_v[1] ** self.p_c[2] 
self.p_term[2] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_expr[0] = self.p_c[0] 
self.p_c[2] = Integer(8) 
self.p_v[0] = Symbol('b') 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = expand(self.p_expr[0],force=True) 
self.p_expr[0].evalf() 
self.p_expr[3] = apart(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = powdenest(self.p_expr[0]) 
self.p_expr[1] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = powdenest(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = cancel(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] / self.p_expr[2] 
self.p_v[0] = Symbol('e',positive=True) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
