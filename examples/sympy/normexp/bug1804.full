self.p_expr[3] = E 
self.p_v[2] = Symbol('f',positive=True) 
self.p_expr[0] = pi 
self.p_expr[2] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = atan(self.p_expr[2]) 
self.p_expr[3] = cancel(self.p_expr[3]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[3] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[3] = cancel(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = expand_log(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[3] = asin(self.p_expr[3]) 
self.p_expr[0] = expand(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
