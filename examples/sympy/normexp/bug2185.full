self.p_v[1] = Symbol('d') 
self.p_c[2] = Integer(6) 
self.p_c[3] = Integer(2) 
self.p_expr[3] = pi 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[1] = expand_power_exp(self.p_expr[3]) 
self.p_expr[0] = combsimp(self.p_expr[2]) 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[2] 
self.p_c[1] = Integer(9) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].doit() 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_term[0] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_term[3] = self.p_c[1] * self.p_v[3] ** self.p_c[3] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = powsimp(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
