self.p_expr[2] = E 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].doit() 
self.p_expr[2] = logcombine(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_c[3] = Integer(1) 
self.p_expr[0] = factor(self.p_expr[2]) 
self.p_expr[3] = simplify(self.p_expr[0]) 
self.p_expr[2] = cancel(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[1] 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[1] = cos(self.p_expr[3]) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_v[0] = Symbol('g',positive=True) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = atan(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = factor(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_v[0] = Symbol('h',positive=True) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] * self.p_expr[1] 
self.p_c[1] = Integer(8) 
self.p_term[2] = self.p_c[3] * self.p_v[3] ** self.p_c[1] 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = expand(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[2] = factorial(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = logcombine(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[2] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[3] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[1] = tan(self.p_expr[2]) 
self.p_expr[3] = expand_log(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = expand_power_exp(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
