self.p_c[0] = Integer(7) 
self.p_v[3] = Symbol('y') 
self.p_c[3] = Integer(3) 
self.p_term[1] = self.p_c[3] * self.p_v[3] ** self.p_c[0] 
self.p_expr[2] = Rational(self.p_c[0],self.p_c[3]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[3].evalf() 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_poly[3] = self.p_term[1] + self.p_term[1] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[2] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = expand_power_base(self.p_expr[0]) 
self.p_c[0] = Integer(3) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
