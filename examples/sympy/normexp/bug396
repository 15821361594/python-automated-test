self.p_c[2] = Integer(0) 
self.p_expr[1] = self.p_c[2] 
self.p_v[1] = Symbol('h',positive=True) 
self.p_v[3] = Symbol('g',positive=True) 
self.p_expr[3] = expand_trig(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[0] = apart(self.p_expr[3]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[0] = expand(self.p_expr[0],force=True) 
self.p_expr[1] = sin(self.p_expr[1]) 
self.p_c[2] = Integer(8) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[3] = self.p_c[2] 
self.p_expr[1] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[0] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[3] = expand(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[3] = expand_trig(self.p_expr[0]) 
self.p_expr[2] = logcombine(self.p_expr[1]) 
self.p_expr[1].evalf() 
self.p_expr[1] = sin(self.p_expr[1]) 
self.p_expr[0] = cos(self.p_expr[1]) 
self.p_c[2] = Integer(9) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[1] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = cos(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
