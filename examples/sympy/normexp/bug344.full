self.p_v[2] = Symbol('b') 
self.p_v[0] = Symbol('j',positive=True) 
self.p_expr[2] = E 
self.p_c[0] = Integer(0) 
self.p_expr[1] = expand_func(self.p_expr[2]) 
self.p_expr[3] = tan(self.p_expr[2]) 
self.p_expr[1].evalf() 
self.p_expr[1] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[3] = expand(self.p_expr[2],force=True) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[0] = expand(self.p_expr[2]) 
self.p_expr[2] = expand_power_base(self.p_expr[1]) 
self.p_expr[1] = expand(self.p_expr[0],force=True) 
self.p_expr[0] = expand_power_base(self.p_expr[2]) 
self.p_expr[2] = acos(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = expand_power_base(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_v[3] = Symbol('b') 
self.p_expr[1] = self.p_expr[2] % self.p_expr[0] 
