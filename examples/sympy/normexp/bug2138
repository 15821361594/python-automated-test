self.p_v[0] = Symbol('h',positive=True) 
self.p_v[3] = Symbol('k',positive=True) 
self.p_v[2] = Symbol('y') 
self.p_expr[2] = self.p_v[0] 
self.p_expr[3] = expand(self.p_expr[2],force=True) 
self.p_v[0] = Symbol('c') 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].doit() 
self.p_expr[2] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[1] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[0] = expand_log(self.p_expr[3]) 
self.p_c[1] = Integer(2) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_term[3] = self.p_c[1] * self.p_v[0] ** self.p_c[1] 
self.p_expr[3] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[2] = self.p_c[1] 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_term[0] = self.p_c[1] * self.p_v[2] ** self.p_c[1] 
self.p_c[1] = Integer(9) 
self.p_expr[3] = combsimp(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_v[3] = Symbol('e',positive=True) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
