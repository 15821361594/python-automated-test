self.p_v[1] = Symbol('x') 
self.p_c[1] = Integer(6) 
self.p_c[3] = Integer(4) 
self.p_v[3] = Symbol('e',positive=True) 
self.p_c[2] = Integer(6) 
self.p_expr[0] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[1],self.p_c[2])) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[1])) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[0] = factor(self.p_expr[3]) 
self.p_c[2] = Integer(8) 
self.p_expr[3] = factorial(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[1],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[3] = sqrt(self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[3])) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = atan(self.p_expr[1]) 
