self.p_c[3] = Integer(3) 
self.p_v[0] = Symbol('g',positive=True) 
self.p_expr[0] = self.p_c[3] 
self.p_c[1] = Integer(10) 
self.p_expr[1] = factor(self.p_expr[0]) 
self.p_expr[2] = logcombine(self.p_expr[0]) 
self.p_expr[3] = expand_trig(self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[0]) 
self.p_v[3] = Symbol('l',positive=True) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[1])) 
self.p_c[0] = Integer(2) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = asin(self.p_expr[2]) 
self.p_expr[2] = expand_trig(self.p_expr[1]) 
self.p_expr[1] = acos(self.p_expr[0]) 
self.p_c[2] = Integer(3) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[2])) 
self.p_expr[2] = combsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[3] = sqrt(self.p_expr[0]) 
self.p_term[0] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[1] = self.p_c[2] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[1] 
