self.p_v[3] = Symbol('i',positive=True) 
self.p_expr[2] = E 
self.p_expr[0] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] / self.p_expr[0] 
self.p_c[3] = Integer(5) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[1] = factorial(self.p_expr[2]) 
self.p_v[2] = Symbol('f',positive=True) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_expr[2] = expand_func(self.p_expr[1]) 
self.p_expr[0] = logcombine(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[2] 
self.p_c[1] = Integer(1) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[2] = expand_power_exp(self.p_expr[2]) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[1] 
