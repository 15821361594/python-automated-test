self.p_expr[1] = I 
self.p_c[1] = Integer(1) 
self.p_v[0] = Symbol('z') 
self.p_v[3] = Symbol('x') 
self.p_c[0] = Integer(8) 
self.p_c[2] = Integer(8) 
self.p_expr[3] = self.p_v[3] 
self.p_c[3] = Integer(10) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[1])) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[1])) 
self.p_expr[3] = trigsimp(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[1] = expand_power_base(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[2] 
