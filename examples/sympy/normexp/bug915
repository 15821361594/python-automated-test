self.p_expr[1] = E 
self.p_v[3] = Symbol('d') 
self.p_c[3] = Integer(8) 
self.p_c[1] = Integer(10) 
self.p_expr[0] = self.p_c[3] 
self.p_expr[2] = apart(self.p_expr[0]) 
self.p_expr[0] = expand_func(self.p_expr[0]) 
self.p_expr[3] = sqrt(self.p_expr[2]) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[2] 
self.p_v[0] = Symbol('z') 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = expand_func(self.p_expr[1]) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[1] = powdenest(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = sin(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[2].doit() 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_v[0] = Symbol('j',positive=True) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[0] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[3] = expand(self.p_expr[0]) 
self.p_expr[2] = combsimp(self.p_expr[3]) 
self.p_expr[0] = combsimp(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_v[3] = Symbol('d') 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_c[3] = Integer(4) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[1] = cos(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = atan(self.p_expr[3]) 
self.p_expr[1] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[3] 
