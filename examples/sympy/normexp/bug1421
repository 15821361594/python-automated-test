self.p_c[3] = Integer(5) 
self.p_v[2] = Symbol('x') 
self.p_expr[1] = self.p_c[3] 
self.p_c[1] = Integer(3) 
self.p_expr[2] = asin(self.p_expr[1]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = cancel(self.p_expr[1]) 
self.p_expr[3] = combsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = combsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[3] = factor(self.p_expr[3]) 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[3]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_v[0] = Symbol('y') 
self.p_expr[3] = expand_trig(self.p_expr[3]) 
self.p_v[3] = Symbol('x') 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = self.p_c[3] 
self.p_term[3] = self.p_c[3] * self.p_v[0] ** self.p_c[3] 
self.p_expr[3] = self.p_expr[1] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = I 
self.p_expr[2] = apart(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
