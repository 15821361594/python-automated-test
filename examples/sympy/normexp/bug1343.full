self.p_v[1] = Symbol('x') 
self.p_expr[1] = I 
self.p_c[3] = Integer(9) 
self.p_v[0] = Symbol('l',positive=True) 
self.p_expr[3] = logcombine(self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = sqrt(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[3] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[1] 
self.p_c[2] = Integer(7) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[0] = factor(self.p_expr[2]) 
self.p_expr[2] = logcombine(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[2])) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_c[3] = Integer(8) 
self.p_expr[2] = Rational(self.p_c[2],self.p_c[3]) 
self.p_expr[1] = expand_trig(self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[2])) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[1] = expand_power_base(self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[2])) 
self.p_term[1] = self.p_c[3] * self.p_v[0] ** self.p_c[3] 
self.p_term[3] = self.p_c[3] * self.p_v[0] ** self.p_c[3] 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[0] = apart(self.p_expr[3]) 
