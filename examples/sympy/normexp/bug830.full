self.p_c[2] = Integer(6) 
self.p_c[0] = Integer(3) 
self.p_v[0] = Symbol('x') 
self.p_expr[1] = self.p_c[0] 
self.p_expr[0] = expand_trig(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[1] 
self.p_c[1] = Integer(2) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[1] = tan(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = cancel(self.p_expr[0]) 
self.p_expr[0] = acos(self.p_expr[1]) 
self.p_expr[1] = apart(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_term[1] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_c[1] = Integer(0) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[1])) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = logcombine(self.p_expr[2]) 
self.p_expr[0] = cos(self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
