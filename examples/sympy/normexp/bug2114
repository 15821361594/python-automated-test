self.p_c[3] = Integer(3) 
self.p_expr[1] = Rational(self.p_c[3],self.p_c[3]) 
self.p_v[3] = Symbol('x') 
self.p_c[0] = Integer(4) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[1] 
self.p_term[2] = self.p_c[0] * self.p_v[3] ** self.p_c[3] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[2] = apart(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[1] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[2] = simplify(self.p_expr[1]) 
self.p_expr[1] = expand(self.p_expr[3]) 
self.p_v[3] = Symbol('e',positive=True) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[0] = powdenest(self.p_expr[1]) 
self.p_expr[3] = expand(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[2] = sin(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = factor(self.p_expr[3]) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[0] = atan(self.p_expr[2]) 
self.p_expr[1] = asin(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[3] 
