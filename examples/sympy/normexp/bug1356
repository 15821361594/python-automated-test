self.p_c[3] = Integer(5) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_v[0] = Symbol('f',positive=True) 
self.p_v[1] = Symbol('i',positive=True) 
self.p_expr[2] = I 
self.p_expr[1] = cancel(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_c[2] = Integer(4) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[3])) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = factor(self.p_expr[1]) 
self.p_expr[3] = asin(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_c[0] = Integer(7) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[2])) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[3])) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_expr[1] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_term[1] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[0] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[2])) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_term[0] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_expr[2] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[0] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[3])) 
self.p_expr[2] = I 
self.p_expr[3] = tan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[3] 
