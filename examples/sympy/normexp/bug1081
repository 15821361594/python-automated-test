self.p_c[3] = Integer(9) 
self.p_v[0] = Symbol('c') 
self.p_c[2] = Integer(4) 
self.p_c[1] = Integer(5) 
self.p_expr[3] = E 
self.p_v[3] = Symbol('d') 
self.p_expr[2] = expand(self.p_expr[3],force=True) 
self.p_expr[3] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[2])) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = combsimp(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[3])) 
self.p_expr[0] = cos(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = sin(self.p_expr[0]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[3])) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = cos(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_v[0] = Symbol('g',positive=True) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[0] 
self.p_c[3] = Integer(6) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[2])) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = sqrt(self.p_expr[2]) 
self.p_term[2] = self.p_c[1] * self.p_v[0] ** self.p_c[2] 
self.p_c[2] = Integer(5) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[1] = combsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
