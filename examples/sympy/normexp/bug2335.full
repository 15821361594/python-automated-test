self.p_c[3] = Integer(1) 
self.p_v[0] = Symbol('e',positive=True) 
self.p_expr[2] = self.p_c[3] 
self.p_term[3] = self.p_c[3] * self.p_v[0] ** self.p_c[3] 
self.p_expr[0] = self.p_v[0] 
self.p_expr[3] = expand_power_base(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = expand_func(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_v[3] = Symbol('z') 
self.p_expr[0] = expand_log(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_c[1] = Integer(9) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_c[3] = Integer(0) 
self.p_expr[3] = expand_power_exp(self.p_expr[2]) 
self.p_term[0] = self.p_c[3] * self.p_v[3] ** self.p_c[3] 
self.p_poly[0] = self.p_term[3] + self.p_term[0] 
self.p_v[0] = Symbol('i',positive=True) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[0] = cos(self.p_expr[2]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = sqrt(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[3] = apart(self.p_expr[1]) 
self.p_v[3] = Symbol('y') 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_v[3] = Symbol('l',positive=True) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[2] = tan(self.p_expr[0]) 
self.p_term[1] = self.p_c[3] * self.p_v[3] ** self.p_c[1] 
self.p_expr[0] = simplify(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = simplify(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
