self.p_v[1] = Symbol('i',positive=True) 
self.p_v[0] = Symbol('e',positive=True) 
self.p_c[2] = Integer(10) 
self.p_v[3] = Symbol('x') 
self.p_c[0] = Integer(9) 
self.p_expr[3] = self.p_c[0] 
self.p_expr[1] = powdenest(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].doit() 
self.p_term[3] = self.p_c[2] * self.p_v[0] ** self.p_c[0] 
self.p_expr[2] = factor(self.p_expr[3]) 
self.p_v[0] = Symbol('k',positive=True) 
self.p_expr[3] = expand_power_base(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[3] = sqrt(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_poly[3] = self.p_term[3] + self.p_term[3] 
self.p_expr[0] = expand_func(self.p_expr[2]) 
self.p_c[3] = Integer(5) 
self.p_expr[1] = cos(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] - self.p_expr[3] 
self.p_term[3] = self.p_c[2] * self.p_v[1] ** self.p_c[0] 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_c[2] = Integer(1) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[3] 
self.p_v[1] = Symbol('c') 
self.p_expr[0] = self.p_expr[2] % self.p_expr[3] 
