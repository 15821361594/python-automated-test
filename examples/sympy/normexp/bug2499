self.p_expr[1] = E 
self.p_expr[3] = sin(self.p_expr[1]) 
self.p_expr[1] = I 
self.p_expr[0] = expand_trig(self.p_expr[3]) 
self.p_expr[2] = pi 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = powdenest(self.p_expr[3]) 
self.p_expr[3] = factor(self.p_expr[0]) 
self.p_v[3] = Symbol('x') 
self.p_v[2] = Symbol('k',positive=True) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[0] = sin(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_c[1] = Integer(10) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[1] = simplify(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[3] = expand_trig(self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = cancel(self.p_expr[3]) 
self.p_c[3] = Integer(2) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_term[0] = self.p_c[3] * self.p_v[2] ** self.p_c[3] 
self.p_expr[2] = expand_power_base(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
