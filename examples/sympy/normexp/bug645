self.p_v[1] = Symbol('b') 
self.p_v[0] = Symbol('k',positive=True) 
self.p_expr[1] = self.p_v[0] 
self.p_expr[2] = self.p_expr[1].doit() 
self.p_expr[0] = pi 
self.p_expr[1] = self.p_expr[0] + self.p_expr[0] 
self.p_v[0] = Symbol('g',positive=True) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[0] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = cancel(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[0] = acos(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[1] = powdenest(self.p_expr[1]) 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[3] = tan(self.p_expr[0]) 
self.p_expr[0] = expand(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].doit() 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = pi 
self.p_expr[2] = powsimp(self.p_expr[0]) 
self.p_expr[0] = expand_power_exp(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[3] 
self.p_c[2] = Integer(3) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[1] 
self.p_term[2] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_v[0] = Symbol('d') 
self.p_expr[0] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[2] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[0] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[0] = self.p_expr[1] - self.p_expr[0] 
self.p_expr[1] = trigsimp(self.p_expr[2]) 
self.p_expr[0] = I 
self.p_expr[3] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[2] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[1] = atan(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[0] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = asin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[3] = cos(self.p_expr[1]) 
self.p_expr[2] = combsimp(self.p_expr[2]) 
self.p_v[2] = Symbol('x') 
self.p_expr[2] = tan(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[0] = cos(self.p_expr[0]) 
