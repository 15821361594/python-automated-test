self.p_v[0] = Symbol('f',positive=True) 
self.p_c[3] = Integer(6) 
self.p_c[0] = Integer(7) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_term[2] = self.p_c[3] * self.p_v[1] ** self.p_c[3] 
self.p_term[3] = self.p_c[3] * self.p_v[1] ** self.p_c[0] 
self.p_term[1] = self.p_c[3] * self.p_v[1] ** self.p_c[3] 
self.p_expr[3] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[2] = cos(self.p_expr[3]) 
self.p_expr[3] = cos(self.p_expr[2]) 
self.p_expr[1] = E 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[2] = expand_power_exp(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[1] = tan(self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[1]) 
self.p_expr[1] = acos(self.p_expr[3]) 
self.p_v[1] = Symbol('l',positive=True) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_v[2] = Symbol('e',positive=True) 
self.p_expr[0] = asin(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = expand_log(self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_expr[1] = expand_log(self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_poly[3] = self.p_term[2] + self.p_term[1] 
self.p_poly[0] = self.p_term[2] + self.p_term[3] 
self.p_expr[2] = self.p_expr[0] % self.p_expr[1] 
