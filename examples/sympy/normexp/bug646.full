self.p_c[0] = Integer(1) 
self.p_v[1] = Symbol('c') 
self.p_expr[2] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[0] = sin(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[3] = simplify(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[2] = combsimp(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = powsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[1] = cos(self.p_expr[0]) 
self.p_expr[0] = atan(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[1] 
self.p_v[2] = Symbol('g',positive=True) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[3] = trigsimp(self.p_expr[0]) 
self.p_expr[0] = expand_log(self.p_expr[2]) 
self.p_expr[2] = factor(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[1] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[2] = powdenest(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = factorial(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].doit() 
self.p_expr[0] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_term[1] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_v[2] = Symbol('k',positive=True) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[3] 
