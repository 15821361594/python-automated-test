self.p_expr[2] = I 
self.p_expr[1] = expand_trig(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[1] 
self.p_c[2] = Integer(4) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[1] = pi 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] + self.p_expr[1] 
self.p_v[3] = Symbol('y') 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[2] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = acos(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[1] = factor(self.p_expr[3]) 
self.p_expr[3] = expand_power_base(self.p_expr[3]) 
self.p_expr[0].evalf() 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_v[2] = Symbol('b') 
self.p_expr[3] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[3] 
