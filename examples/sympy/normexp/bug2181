self.p_c[2] = Integer(5) 
self.p_v[3] = Symbol('l',positive=True) 
self.p_v[0] = Symbol('f',positive=True) 
self.p_v[2] = Symbol('c') 
self.p_c[0] = Integer(5) 
self.p_c[3] = Integer(1) 
self.p_term[3] = self.p_c[3] * self.p_v[2] ** self.p_c[2] 
self.p_term[0] = self.p_c[3] * self.p_v[2] ** self.p_c[0] 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[0]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = expand_trig(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[0])) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[0] 
