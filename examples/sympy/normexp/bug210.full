self.p_v[2] = Symbol('k',positive=True) 
self.p_c[0] = Integer(4) 
self.p_c[1] = Integer(6) 
self.p_expr[1] = self.p_c[0] 
self.p_expr[0] = atan(self.p_expr[1]) 
self.p_expr[3] = powsimp(self.p_expr[1]) 
self.p_c[3] = Integer(0) 
self.p_term[1] = self.p_c[3] * self.p_v[2] ** self.p_c[1] 
self.p_c[1] = Integer(6) 
self.p_c[3] = Integer(4) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[0] = Rational(self.p_c[1],self.p_c[0]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[0] = expand_trig(self.p_expr[1]) 
self.p_expr[2] = apart(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_term[2] = self.p_c[1] * self.p_v[2] ** self.p_c[1] 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = simplify(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = expand_func(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[3] 
