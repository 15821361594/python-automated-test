self.p_expr[2] = E 
self.p_expr[0] = acos(self.p_expr[2]) 
self.p_c[2] = Integer(4) 
self.p_expr[3] = cancel(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = simplify(self.p_expr[3]) 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[3] 
self.p_v[1] = Symbol('y') 
self.p_expr[0] = cos(self.p_expr[0]) 
self.p_expr[0] = expand_power_base(self.p_expr[1]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = combsimp(self.p_expr[0]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[1] = asin(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[1].doit() 
self.p_expr[2] = powsimp(self.p_expr[0]) 
self.p_expr[1] = powdenest(self.p_expr[1]) 
self.p_expr[1] = factorial(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[0] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_v[1] = Symbol('k',positive=True) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[3] 
