self.p_v[3] = Symbol('k',positive=True) 
self.p_v[0] = Symbol('h',positive=True) 
self.p_expr[1] = I 
self.p_expr[2] = self.p_v[0] 
self.p_v[1] = Symbol('g',positive=True) 
self.p_expr[0] = expand_power_exp(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = asin(self.p_expr[0]) 
self.p_expr[3] = expand_power_base(self.p_expr[0]) 
self.p_expr[0] = factor(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = expand(self.p_expr[2],force=True) 
self.p_c[2] = Integer(8) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = sqrt(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[3] 
self.p_v[2] = Symbol('j',positive=True) 
self.p_expr[3] = cos(self.p_expr[0]) 
self.p_expr[0] = trigsimp(self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[2] = factorial(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = expand_power_exp(self.p_expr[1]) 
self.p_v[3] = Symbol('j',positive=True) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] % self.p_expr[3] 
