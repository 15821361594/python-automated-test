self.p_expr[1] = pi 
self.p_expr[3] = self.p_expr[1].doit() 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = logcombine(self.p_expr[3]) 
self.p_expr[3] = simplify(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] * self.p_expr[1] 
self.p_c[2] = Integer(9) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[1] = trigsimp(self.p_expr[1]) 
self.p_c[3] = Integer(7) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_v[0] = Symbol('i',positive=True) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = expand(self.p_expr[3],force=True) 
self.p_expr[3] = cancel(self.p_expr[2]) 
self.p_expr[1] = cos(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = combsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[1] = atan(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = sqrt(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = cos(self.p_expr[1]) 
self.p_v[2] = Symbol('j',positive=True) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[1] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[0] = expand_func(self.p_expr[1]) 
self.p_expr[2] = simplify(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[2] = expand_log(self.p_expr[2]) 
self.p_term[1] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = expand(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[3])) 
self.p_expr[2] = powsimp(self.p_expr[0]) 
self.p_v[1] = Symbol('g',positive=True) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[3])) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[1] = Rational(self.p_c[2],self.p_c[2]) 
self.p_c[2] = Integer(9) 
self.p_expr[2] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[0] 
