self.p_c[0] = Integer(2) 
self.p_c[2] = Integer(2) 
self.p_c[3] = Integer(5) 
self.p_expr[2] = self.p_c[2] 
self.p_expr[1] = simplify(self.p_expr[2]) 
self.p_expr[2] = Rational(self.p_c[2],self.p_c[3]) 
self.p_v[3] = Symbol('y') 
self.p_c[3] = Integer(2) 
self.p_expr[0] = Rational(self.p_c[2],self.p_c[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[2] 
self.p_term[0] = self.p_c[3] * self.p_v[3] ** self.p_c[0] 
self.p_expr[1] = tan(self.p_expr[3]) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[3] = logcombine(self.p_expr[3]) 
self.p_c[1] = Integer(7) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = expand_power_exp(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[2] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[0] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[2] = sin(self.p_expr[0]) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[2])) 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[1]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[3] 
