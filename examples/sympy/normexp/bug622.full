self.p_c[3] = Integer(4) 
self.p_v[2] = Symbol('z') 
self.p_expr[1] = self.p_v[2] 
self.p_expr[2] = self.p_c[3] 
self.p_c[3] = Integer(1) 
self.p_expr[0] = powdenest(self.p_expr[2]) 
self.p_v[3] = Symbol('y') 
self.p_expr[2] = combsimp(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[0] = atan(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[0] = expand_trig(self.p_expr[1]) 
self.p_term[1] = self.p_c[3] * self.p_v[2] ** self.p_c[3] 
self.p_expr[1] = trigsimp(self.p_expr[0]) 
self.p_expr[3] = expand_func(self.p_expr[0]) 
self.p_expr[0] = expand_log(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[0] = apart(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[0] 
