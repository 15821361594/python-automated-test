self.p_v[3] = Symbol('a') 
self.p_c[3] = Integer(9) 
self.p_c[1] = Integer(2) 
self.p_term[2] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_v[1] = Symbol('h',positive=True) 
self.p_v[2] = Symbol('b') 
self.p_v[0] = Symbol('z') 
self.p_expr[2] = Rational(self.p_c[1],self.p_c[1]) 
self.p_poly[0] = self.p_term[2] 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = Rational(self.p_c[1],self.p_c[3]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_term[1] = self.p_c[3] * self.p_v[2] ** self.p_c[3] 
self.p_poly[2] = self.p_term[2] + self.p_term[2] 
self.p_expr[3] = asin(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[2] 
self.p_v[2] = Symbol('x') 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_term[2] = self.p_c[1] * self.p_v[0] ** self.p_c[3] 
self.p_expr[1] = tan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[2] = tan(self.p_expr[0]) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[3])) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[1] 
