self.p_v[3] = Symbol('i',positive=True) 
self.p_c[2] = Integer(3) 
self.p_c[3] = Integer(7) 
self.p_v[0] = Symbol('i',positive=True) 
self.p_expr[1] = pi 
self.p_expr[3] = self.p_expr[1].doit() 
self.p_expr[1] = atan(self.p_expr[1]) 
self.p_expr[1] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = factorial(self.p_expr[3]) 
self.p_term[1] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[3])) 
self.p_expr[3] = trigsimp(self.p_expr[1]) 
self.p_term[3] = self.p_c[3] * self.p_v[0] ** self.p_c[2] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = pi 
self.p_expr[2] = self.p_expr[0] % self.p_expr[1] 
self.p_term[2] = self.p_c[2] * self.p_v[3] ** self.p_c[2] 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[2])) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].doit() 
self.p_v[1] = Symbol('l',positive=True) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_v[0] = Symbol('z') 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[2])) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = atan(self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_c[1] = Integer(5) 
self.p_expr[1] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
