self.p_c[3] = Integer(5) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_v[0] = Symbol('g',positive=True) 
self.p_c[0] = Integer(2) 
self.p_expr[2] = self.p_v[0] 
self.p_expr[0] = expand_power_base(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = atan(self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[1] = combsimp(self.p_expr[0]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[3] 
self.p_v[2] = Symbol('h',positive=True) 
self.p_v[0] = Symbol('y') 
self.p_term[3] = self.p_c[0] * self.p_v[3] ** self.p_c[0] 
self.p_c[1] = Integer(0) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[2] 
