self.p_v[2] = Symbol('c') 
self.p_v[1] = Symbol('e',positive=True) 
self.p_expr[3] = I 
self.p_expr[0] = expand_power_exp(self.p_expr[3]) 
self.p_expr[2] = expand_trig(self.p_expr[3]) 
self.p_expr[1] = powsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[3] = simplify(self.p_expr[3]) 
self.p_expr[2] = simplify(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[3] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[1] = expand_log(self.p_expr[1]) 
self.p_expr[1] = expand_func(self.p_expr[2]) 
self.p_expr[3] = atan(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[1] = powsimp(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[1] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[0] = factorial(self.p_expr[0]) 
self.p_expr[3] = logcombine(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = sqrt(self.p_expr[3]) 
self.p_expr[2] = expand_power_base(self.p_expr[2]) 
self.p_expr[2] = expand_power_base(self.p_expr[2]) 
self.p_v[3] = Symbol('a') 
self.p_expr[3] = sin(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[1] 
self.p_c[2] = Integer(5) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = powsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[2] 
self.p_v[1] = Symbol('j',positive=True) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
