self.p_v[0] = Symbol('c') 
self.p_c[1] = Integer(4) 
self.p_expr[1] = self.p_c[1] 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[3] 
self.p_c[1] = Integer(7) 
self.p_expr[3] = trigsimp(self.p_expr[1]) 
self.p_expr[1] = powsimp(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[0] = atan(self.p_expr[1]) 
self.p_c[0] = Integer(10) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[0])) 
self.p_v[0] = Symbol('a') 
self.p_expr[0] = atan(self.p_expr[3]) 
self.p_c[0] = Integer(7) 
self.p_expr[3] = factor(self.p_expr[3]) 
self.p_c[1] = Integer(1) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = asin(self.p_expr[1]) 
self.p_v[1] = Symbol('x') 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = trigsimp(self.p_expr[3]) 
self.p_expr[0] = self.p_v[0] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = acos(self.p_expr[2]) 
self.p_expr[0] = combsimp(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[2] = factorial(self.p_expr[1]) 
self.p_expr[3] = powsimp(self.p_expr[3]) 
self.p_expr[0] = self.p_v[1] 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[0] 
