self.p_v[0] = Symbol('h',positive=True) 
self.p_expr[3] = I 
self.p_expr[1] = expand_log(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[2] = factor(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2].doit() 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[1] = expand_log(self.p_expr[3]) 
self.p_expr[0] = acos(self.p_expr[2]) 
self.p_expr[3] = expand_power_exp(self.p_expr[0]) 
self.p_expr[2] = factorial(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = expand_log(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_v[0] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[1] = trigsimp(self.p_expr[3]) 
self.p_expr[3] = powsimp(self.p_expr[0]) 
self.p_c[3] = Integer(8) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_v[0] = Symbol('c') 
self.p_expr[2].evalf() 
self.p_expr[2] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[0] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[3] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[1] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[2] = apart(self.p_expr[2]) 
self.p_expr[3] = powdenest(self.p_expr[1]) 
self.p_expr[0] = cancel(self.p_expr[3]) 
self.p_expr[1] = cancel(self.p_expr[3]) 
self.p_expr[2] = factor(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = expand(self.p_expr[1],force=True) 
self.p_c[0] = Integer(2) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[0] 
self.p_v[2] = Symbol('y') 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_term[2] = self.p_c[3] * self.p_v[0] ** self.p_c[3] 
self.p_expr[2] = expand_trig(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[0])) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = tan(self.p_expr[3]) 
self.p_expr[1] = apart(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = simplify(self.p_expr[0]) 
self.p_expr[0] = expand_func(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[3] = acos(self.p_expr[3]) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
