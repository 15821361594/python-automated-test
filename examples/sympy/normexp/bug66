self.p_expr[0] = E 
self.p_v[2] = Symbol('y') 
self.p_expr[1] = cos(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[2] = expand_log(self.p_expr[3]) 
self.p_expr[3] = expand_power_base(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_c[1] = Integer(5) 
self.p_expr[2] = expand_trig(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[0] = expand(self.p_expr[2],force=True) 
self.p_c[0] = Integer(0) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = simplify(self.p_expr[3]) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[1])) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
