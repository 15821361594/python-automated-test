self.p_c[0] = Integer(8) 
self.p_v[0] = Symbol('i',positive=True) 
self.p_term[3] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_v[1] = Symbol('a') 
self.p_c[0] = Integer(4) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[1] = Rational(self.p_c[0],self.p_c[0]) 
self.p_c[1] = Integer(9) 
self.p_expr[0] = expand_power_base(self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[1],self.p_c[0])) 
self.p_expr[3] = combsimp(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[1] = cancel(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
