self.p_v[3] = Symbol('x') 
self.p_v[0] = Symbol('z') 
self.p_c[3] = Integer(3) 
self.p_expr[1] = Rational(self.p_c[3],self.p_c[3]) 
self.p_term[3] = self.p_c[3] * self.p_v[0] ** self.p_c[3] 
self.p_expr[3] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[2] = tan(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_c[0] = Integer(7) 
self.p_expr[1] = logcombine(self.p_expr[3]) 
self.p_c[1] = Integer(9) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = expand_power_exp(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_term[0] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = logcombine(self.p_expr[2]) 
self.p_expr[2] = logcombine(self.p_expr[0]) 
self.p_expr[0] = factor(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[3] = asin(self.p_expr[0]) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = combsimp(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = expand_power_base(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[0] = powdenest(self.p_expr[1]) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_v[0] = Symbol('k',positive=True) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[1] = asin(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[3] 
