self.p_v[3] = Symbol('a') 
self.p_expr[2] = I 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[1] = cos(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[3] = simplify(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[1].evalf() 
self.p_expr[0] = cos(self.p_expr[1]) 
self.p_expr[2] = tan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = expand_trig(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[1] = cancel(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = expand_func(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_c[3] = Integer(10) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[0] = expand_log(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = expand_log(self.p_expr[3]) 
self.p_expr[0] = apart(self.p_expr[3]) 
self.p_expr[1] = trigsimp(self.p_expr[3]) 
self.p_v[0] = Symbol('a') 
self.p_c[1] = Integer(6) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_c[1] = Integer(0) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[1] = sin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[2] 
self.p_v[2] = Symbol('h',positive=True) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[0] = atan(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
