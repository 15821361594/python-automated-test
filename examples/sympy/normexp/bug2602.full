self.p_c[3] = Integer(3) 
self.p_c[1] = Integer(5) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_expr[1] = self.p_c[1] 
self.p_c[1] = Integer(4) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[3] = self.p_expr[1].doit() 
self.p_expr[1] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = factorial(self.p_expr[1]) 
self.p_expr[2] = expand_func(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[2] = asin(self.p_expr[2]) 
self.p_c[2] = Integer(5) 
self.p_expr[1] = atan(self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[2])) 
self.p_expr[2].evalf() 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[2],self.p_c[2],self.p_c[3])) 
self.p_term[2] = self.p_c[1] * self.p_v[2] ** self.p_c[1] 
self.p_v[3] = Symbol('e',positive=True) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
