self.p_expr[2] = pi 
self.p_v[3] = Symbol('g',positive=True) 
self.p_expr[1] = expand_trig(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[1] = cancel(self.p_expr[1]) 
self.p_expr[2] = E 
self.p_expr[1] = cos(self.p_expr[0]) 
self.p_expr[3] = sqrt(self.p_expr[1]) 
self.p_expr[1] = cancel(self.p_expr[1]) 
self.p_expr[0] = logcombine(self.p_expr[1]) 
self.p_expr[1] = expand(self.p_expr[1],force=True) 
self.p_v[0] = Symbol('x') 
self.p_expr[1] = sin(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[1] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[0] = factorial(self.p_expr[0]) 
self.p_expr[0] = apart(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[0] = factorial(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = expand(self.p_expr[2],force=True) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[2] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
