self.p_v[2] = Symbol('f',positive=True) 
self.p_c[1] = Integer(4) 
self.p_c[2] = Integer(8) 
self.p_term[0] = self.p_c[1] * self.p_v[2] ** self.p_c[2] 
self.p_poly[0] = self.p_term[0] + self.p_term[0] 
self.p_v[1] = Symbol('c') 
self.p_expr[2] = E 
self.p_c[1] = Integer(10) 
self.p_expr[0] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[1] = powsimp(self.p_expr[2]) 
self.p_expr[2] = powsimp(self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[1])) 
self.p_expr[0] = self.p_expr[0].doit() 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[0] 
self.p_poly[3] = self.p_term[0] + self.p_term[0] 
self.p_expr[0] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = atan(self.p_expr[0]) 
self.p_expr[2].evalf() 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[2] 
self.p_c[2] = Integer(1) 
self.p_expr[1] = sqrt(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[1] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = combsimp(self.p_expr[3]) 
self.p_expr[2] = expand_power_base(self.p_expr[3]) 
self.p_expr[3] = cos(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[2],self.p_c[1])) 
self.p_expr[0] = apart(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = apart(self.p_expr[2]) 
