self.p_c[2] = Integer(7) 
self.p_c[3] = Integer(1) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_expr[1] = self.p_v[1] 
self.p_expr[0] = expand_log(self.p_expr[1]) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[3] = tan(self.p_expr[1]) 
self.p_expr[2] = atan(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[3] = powsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[2] = expand_power_exp(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = sqrt(self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_term[3] = self.p_c[3] * self.p_v[1] ** self.p_c[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[0] 
