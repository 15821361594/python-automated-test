self.p_c[3] = Integer(1) 
self.p_c[0] = Integer(1) 
self.p_v[0] = Symbol('z') 
self.p_v[2] = Symbol('b') 
self.p_expr[3] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[2] = trigsimp(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[3] 
self.p_term[2] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_v[0] = Symbol('d') 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[0].evalf() 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[0] 
self.p_c[3] = Integer(1) 
self.p_expr[2] = expand_trig(self.p_expr[3]) 
self.p_poly[2] = self.p_term[2] 
self.p_expr[0] = trigsimp(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[2] 
