self.p_v[3] = Symbol('c') 
self.p_v[1] = Symbol('a') 
self.p_expr[0] = self.p_v[1] 
self.p_expr[2] = asin(self.p_expr[0]) 
self.p_expr[1] = factor(self.p_expr[2]) 
self.p_expr[0] = powdenest(self.p_expr[2]) 
self.p_c[3] = Integer(2) 
self.p_expr[3] = apart(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = expand_trig(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[1] 
