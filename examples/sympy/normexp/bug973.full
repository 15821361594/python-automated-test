self.p_expr[1] = pi 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[0] = cos(self.p_expr[1]) 
self.p_expr[2] = expand(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[0] = atan(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = cancel(self.p_expr[2]) 
self.p_expr[2] = factorial(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[1] = cancel(self.p_expr[1]) 
self.p_v[3] = Symbol('k',positive=True) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = apart(self.p_expr[0]) 
self.p_expr[1] = cancel(self.p_expr[0]) 
self.p_c[2] = Integer(6) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[2] = powdenest(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = factorial(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = factor(self.p_expr[2]) 
self.p_expr[1] = apart(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = asin(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = expand_func(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = expand_log(self.p_expr[3]) 
self.p_v[1] = Symbol('c') 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = sin(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[0] = powdenest(self.p_expr[3]) 
self.p_expr[1] = atan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[2] = tan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = sin(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[0] = self.p_expr[2].doit() 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = expand(self.p_expr[0]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[2] 
self.p_c[2] = Integer(4) 
self.p_expr[1] = atan(self.p_expr[0]) 
self.p_expr[0] = expand_power_exp(self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = factorial(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_c[2] = Integer(7) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[2] = self.p_expr[2] % self.p_expr[0] 
self.p_expr[1] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[2] 
self.p_term[3] = self.p_c[2] * self.p_v[2] ** self.p_c[2] 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
