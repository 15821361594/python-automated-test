self.p_v[1] = Symbol('d') 
self.p_v[3] = Symbol('i',positive=True) 
self.p_c[1] = Integer(6) 
self.p_expr[2] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[3] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[1] = powsimp(self.p_expr[3]) 
self.p_c[0] = Integer(0) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = powdenest(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].doit() 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[2] = powsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[2] = sin(self.p_expr[2]) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[1],self.p_c[1],self.p_c[0])) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] - self.p_expr[0] 
self.p_c[3] = Integer(6) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_v[3] = Symbol('i',positive=True) 
self.p_c[1] = Integer(1) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
