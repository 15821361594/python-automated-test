self.p_c[1] = Integer(7) 
self.p_c[3] = Integer(6) 
self.p_v[2] = Symbol('a') 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[1]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = powdenest(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_c[1] = Integer(9) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = acos(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3].doit() 
self.p_v[3] = Symbol('y') 
self.p_expr[3] = expand_power_exp(self.p_expr[1]) 
self.p_expr[2] = expand_power_base(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[3])) 
self.p_expr[2].evalf() 
self.p_expr[2] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[1] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = Rational(self.p_c[3],self.p_c[1]) 
self.p_expr[0] = expand_func(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[3] - self.p_expr[1] 
self.p_term[2] = self.p_c[3] * self.p_v[3] ** self.p_c[1] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[1])) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[3] 
self.p_c[0] = Integer(9) 
self.p_expr[0] = cancel(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[3] 
