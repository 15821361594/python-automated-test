self.p_v[0] = Symbol('i',positive=True) 
self.p_v[3] = Symbol('x') 
self.p_c[2] = Integer(0) 
self.p_c[1] = Integer(2) 
self.p_term[2] = self.p_c[1] * self.p_v[3] ** self.p_c[2] 
self.p_v[3] = Symbol('c') 
self.p_c[2] = Integer(6) 
self.p_c[0] = Integer(1) 
self.p_c[1] = Integer(7) 
self.p_term[3] = self.p_c[2] * self.p_v[0] ** self.p_c[0] 
self.p_c[0] = Integer(0) 
self.p_poly[0] = self.p_term[2] 
self.p_c[3] = Integer(7) 
self.p_v[0] = Symbol('y') 
self.p_term[1] = self.p_c[1] * self.p_v[3] ** self.p_c[3] 
self.p_expr[0] = pi 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[3])) 
self.p_expr[1] = expand_log(self.p_expr[0]) 
self.p_term[2] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_v[0] = Symbol('j',positive=True) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[1] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = factorial(self.p_expr[2]) 
self.p_term[0] = self.p_c[1] * self.p_v[0] ** self.p_c[2] 
self.p_poly[3] = self.p_term[2] + self.p_term[3] 
self.p_term[2] = self.p_c[3] * self.p_v[0] ** self.p_c[0] 
self.p_expr[2] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[1] 
