self.p_v[1] = Symbol('e',positive=True) 
self.p_v[2] = Symbol('b') 
self.p_v[3] = Symbol('d') 
self.p_c[2] = Integer(8) 
self.p_expr[3] = self.p_v[3] 
self.p_expr[2] = factor(self.p_expr[3]) 
self.p_expr[1] = acos(self.p_expr[3]) 
self.p_expr[3] = sqrt(self.p_expr[2]) 
self.p_c[1] = Integer(9) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = combsimp(self.p_expr[0]) 
self.p_expr[0] = apart(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[3] 
self.p_c[0] = Integer(1) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2].doit() 
self.p_expr[2] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[1] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[2] = tan(self.p_expr[1]) 
