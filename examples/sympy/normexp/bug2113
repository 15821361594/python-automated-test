self.p_v[2] = Symbol('x') 
self.p_v[0] = Symbol('j',positive=True) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_v[3] = Symbol('j',positive=True) 
self.p_c[1] = Integer(5) 
self.p_c[0] = Integer(4) 
self.p_term[2] = self.p_c[1] * self.p_v[1] ** self.p_c[0] 
self.p_c[0] = Integer(4) 
self.p_term[3] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_poly[2] = self.p_term[3] 
self.p_expr[0] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[1] = expand_power_exp(self.p_expr[0]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[3] 
