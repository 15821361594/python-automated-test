self.p_v[2] = Symbol('x') 
self.p_v[1] = Symbol('c') 
self.p_expr[3] = pi 
self.p_expr[2] = combsimp(self.p_expr[3]) 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[1] = powdenest(self.p_expr[3]) 
self.p_expr[3] = apart(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[0] = simplify(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[1] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = combsimp(self.p_expr[2]) 
self.p_expr[0] = acos(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[2] = powsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = expand_power_exp(self.p_expr[1]) 
self.p_expr[1] = cancel(self.p_expr[3]) 
self.p_expr[3] = logcombine(self.p_expr[2]) 
self.p_expr[2] = expand_power_base(self.p_expr[3]) 
self.p_c[1] = Integer(6) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[3] 
