self.p_v[3] = Symbol('d') 
self.p_expr[0] = I 
self.p_v[1] = Symbol('c') 
self.p_expr[2] = cos(self.p_expr[0]) 
self.p_expr[0] = atan(self.p_expr[2]) 
self.p_expr[1] = powsimp(self.p_expr[0]) 
self.p_expr[3] = expand_log(self.p_expr[2]) 
self.p_c[2] = Integer(5) 
self.p_expr[2] = expand_power_base(self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[3] = self.p_expr[0] * self.p_expr[0] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = combsimp(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = tan(self.p_expr[3]) 
self.p_expr[3] = tan(self.p_expr[0]) 
self.p_expr[2] = expand(self.p_expr[3]) 
self.p_expr[1] = expand(self.p_expr[2]) 
self.p_expr[2] = apart(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[2] = simplify(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = expand(self.p_expr[0]) 
self.p_expr[0] = tan(self.p_expr[0]) 
self.p_expr[0] = expand_log(self.p_expr[2]) 
self.p_expr[2] = expand_power_exp(self.p_expr[3]) 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_expr[3] = simplify(self.p_expr[1]) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = expand_func(self.p_expr[0]) 
self.p_c[3] = Integer(6) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[2] 
