self.p_v[2] = Symbol('e',positive=True) 
self.p_expr[0] = pi 
self.p_expr[1] = combsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = I 
self.p_c[2] = Integer(8) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_v[1] = Symbol('l',positive=True) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[1] = atan(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].doit() 
self.p_expr[0] = atan(self.p_expr[0]) 
self.p_c[0] = Integer(8) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = expand_trig(self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_v[0] = Symbol('e',positive=True) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
