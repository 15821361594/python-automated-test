self.p_v[2] = Symbol('k',positive=True) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_v[3] = Symbol('i',positive=True) 
self.p_c[3] = Integer(5) 
self.p_v[0] = Symbol('z') 
self.p_c[2] = Integer(8) 
self.p_term[2] = self.p_c[3] * self.p_v[0] ** self.p_c[3] 
self.p_c[3] = Integer(8) 
self.p_expr[1] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[2])) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = acos(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[2])) 
self.p_expr[0] = trigsimp(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = expand(self.p_expr[1]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[3])) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[3] 
