self.p_v[2] = Symbol('j',positive=True) 
self.p_expr[0] = E 
self.p_v[1] = Symbol('g',positive=True) 
self.p_c[3] = Integer(2) 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = cancel(self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = logcombine(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = sqrt(self.p_expr[0]) 
self.p_expr[1] = simplify(self.p_expr[0]) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_v[2] = Symbol('y') 
self.p_expr[3] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[3] = expand_trig(self.p_expr[2]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = powsimp(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
