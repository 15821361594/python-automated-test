self.p_c[0] = Integer(2) 
self.p_expr[2] = E 
self.p_c[3] = Integer(9) 
self.p_v[2] = Symbol('a') 
self.p_v[1] = Symbol('z') 
self.p_v[3] = Symbol('a') 
self.p_expr[3] = self.p_v[3] 
self.p_expr[0] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = apart(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = trigsimp(self.p_expr[2]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = tan(self.p_expr[0]) 
self.p_v[3] = Symbol('g',positive=True) 
self.p_expr[0] = sin(self.p_expr[0]) 
self.p_expr[0] = trigsimp(self.p_expr[3]) 
self.p_c[3] = Integer(10) 
self.p_expr[3] = cancel(self.p_expr[0]) 
self.p_expr[0] = trigsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = logcombine(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = cancel(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_expr[0] = cos(self.p_expr[3]) 
self.p_expr[2] = sqrt(self.p_expr[0]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = acos(self.p_expr[2]) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_v[0] = Symbol('b') 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
