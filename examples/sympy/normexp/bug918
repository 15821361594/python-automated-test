self.p_expr[2] = pi 
self.p_expr[0] = logcombine(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[0] 
self.p_v[0] = Symbol('e',positive=True) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[3] = logcombine(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[1] = sqrt(self.p_expr[0]) 
self.p_expr[2] = apart(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[0] 
self.p_expr[0] = apart(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_c[0] = Integer(10) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[0] = expand(self.p_expr[2],force=True) 
self.p_expr[1] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
self.p_c[1] = Integer(0) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_term[0] = self.p_c[1] * self.p_v[0] ** self.p_c[1] 
self.p_expr[3] = expand_trig(self.p_expr[0]) 
self.p_term[2] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_expr[1] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[2] = cos(self.p_expr[0]) 
self.p_c[1] = Integer(3) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[1] = logcombine(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
