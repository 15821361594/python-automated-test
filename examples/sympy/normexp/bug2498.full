self.p_c[0] = Integer(4) 
self.p_expr[3] = self.p_c[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_c[1] = Integer(7) 
self.p_expr[3] = cancel(self.p_expr[0]) 
self.p_v[0] = Symbol('c') 
self.p_expr[1] = self.p_expr[3] - self.p_expr[3] 
self.p_expr[2] = powdenest(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[2] = powsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = combsimp(self.p_expr[1]) 
self.p_c[0] = Integer(1) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = expand_func(self.p_expr[3]) 
self.p_c[2] = Integer(5) 
self.p_expr[3] = factor(self.p_expr[0]) 
self.p_expr[0] = simplify(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[2] = expand_func(self.p_expr[3]) 
self.p_expr[0] = tan(self.p_expr[2]) 
self.p_expr[3] = acos(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[2] = simplify(self.p_expr[3]) 
self.p_v[2] = Symbol('b') 
self.p_term[0] = self.p_c[1] * self.p_v[0] ** self.p_c[1] 
self.p_expr[3] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = trigsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[2] 
