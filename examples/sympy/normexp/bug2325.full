self.p_v[0] = Symbol('h',positive=True) 
self.p_c[1] = Integer(10) 
self.p_v[2] = Symbol('h',positive=True) 
self.p_expr[1] = Rational(self.p_c[1],self.p_c[1]) 
self.p_v[3] = Symbol('a') 
self.p_expr[2] = atan(self.p_expr[1]) 
self.p_expr[3] = trigsimp(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[1] = sin(self.p_expr[1]) 
self.p_expr[1] = powdenest(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].doit() 
self.p_expr[0] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = self.p_v[0] 
self.p_expr[1] = expand_func(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_c[3] = Integer(1) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[3])) 
self.p_expr[1] = expand_log(self.p_expr[0]) 
self.p_expr[2] = factor(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = expand_power_base(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[1])) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[0] 
self.p_v[0] = Symbol('z') 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[1])) 
self.p_expr[3] = factor(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[0] 
