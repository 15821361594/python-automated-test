self.p_v[2] = Symbol('f',positive=True) 
self.p_c[0] = Integer(8) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[3] = pi 
self.p_term[2] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_expr[0] = atan(self.p_expr[3]) 
self.p_expr[2] = expand_trig(self.p_expr[3]) 
self.p_expr[3] = expand_log(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_v[0] = Symbol('l',positive=True) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = expand_log(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[0] 
self.p_c[0] = Integer(5) 
self.p_expr[0] = expand(self.p_expr[0]) 
self.p_expr[0] = tan(self.p_expr[3]) 
self.p_expr[3] = cos(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[0] = sqrt(self.p_expr[2]) 
self.p_c[3] = Integer(8) 
self.p_expr[2] = simplify(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[3] = tan(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_term[0] = self.p_c[0] * self.p_v[2] ** self.p_c[0] 
self.p_expr[3] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[2] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[1] 
self.p_poly[2] = self.p_term[2] 
self.p_expr[2] = simplify(self.p_expr[3]) 
self.p_expr[1] = apart(self.p_expr[1]) 
