self.p_c[3] = Integer(3) 
self.p_expr[0] = pi 
self.p_expr[3] = cancel(self.p_expr[0]) 
self.p_expr[2] = expand_power_base(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = expand_power_base(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = powsimp(self.p_expr[2]) 
self.p_v[1] = Symbol('b') 
self.p_v[3] = Symbol('d') 
self.p_expr[2] = I 
self.p_expr[3] = simplify(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = combsimp(self.p_expr[0]) 
self.p_expr[0] = expand(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[1] = expand_func(self.p_expr[3]) 
self.p_expr[0] = acos(self.p_expr[1]) 
self.p_expr[2] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[3] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[2] = self.p_expr[0] % self.p_expr[3] 
