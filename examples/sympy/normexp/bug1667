self.p_v[0] = Symbol('h',positive=True) 
self.p_expr[0] = E 
self.p_expr[1] = sin(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] * self.p_expr[1] 
self.p_v[2] = Symbol('x') 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = tan(self.p_expr[1]) 
self.p_expr[0] = sin(self.p_expr[0]) 
self.p_expr[3] = acos(self.p_expr[2]) 
self.p_expr[0] = asin(self.p_expr[1]) 
self.p_expr[2] = factorial(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = acos(self.p_expr[3]) 
self.p_expr[1] = sin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = factor(self.p_expr[3]) 
self.p_expr[3] = tan(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[3] = factor(self.p_expr[2]) 
self.p_c[0] = Integer(2) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = factor(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[3] 
self.p_v[3] = Symbol('j',positive=True) 
self.p_c[3] = Integer(3) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[3] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[1] 
self.p_term[0] = self.p_c[3] * self.p_v[3] ** self.p_c[0] 
self.p_poly[0] = self.p_term[0] + self.p_term[0] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_v[1] = Symbol('j',positive=True) 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = atan(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[0] = self.p_expr[0] / self.p_expr[2] 
self.p_v[3] = Symbol('c') 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = self.p_expr[0] % self.p_expr[3] 
