self.p_v[1] = Symbol('d') 
self.p_expr[3] = I 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_v[2] = Symbol('e',positive=True) 
self.p_v[3] = Symbol('g',positive=True) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = cos(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[2] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = cos(self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[2] = combsimp(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0].doit() 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[2] = expand_power_exp(self.p_expr[1]) 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[3] = atan(self.p_expr[0]) 
self.p_c[2] = Integer(7) 
self.p_expr[2] = cancel(self.p_expr[3]) 
self.p_v[0] = Symbol('d') 
self.p_expr[0] = apart(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[3] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = powdenest(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[1] = sin(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[3] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = I 
self.p_c[2] = Integer(10) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[0] 
