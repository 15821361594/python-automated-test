self.p_v[3] = Symbol('z') 
self.p_v[0] = Symbol('k',positive=True) 
self.p_v[1] = Symbol('g',positive=True) 
self.p_v[2] = Symbol('h',positive=True) 
self.p_c[0] = Integer(6) 
self.p_c[2] = Integer(1) 
self.p_term[0] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_expr[3] = self.p_c[2] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[2],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = expand_trig(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[2] = trigsimp(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[0] 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[2] 
