self.p_c[1] = Integer(4) 
self.p_expr[3] = I 
self.p_expr[2] = expand_log(self.p_expr[3]) 
self.p_expr[3] = expand_power_base(self.p_expr[3]) 
self.p_v[0] = Symbol('b') 
self.p_expr[1] = self.p_expr[3].doit() 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[3] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[0] = expand_func(self.p_expr[0]) 
self.p_expr[0] = expand_log(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[0] = factor(self.p_expr[2]) 
self.p_v[0] = Symbol('e',positive=True) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_v[2] = Symbol('c') 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = combsimp(self.p_expr[3]) 
self.p_expr[3] = combsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = combsimp(self.p_expr[0]) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[0] = tan(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
self.p_c[1] = Integer(8) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = powdenest(self.p_expr[0]) 
self.p_expr[0] = factorial(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = powdenest(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = acos(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[0] 
