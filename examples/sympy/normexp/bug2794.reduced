self.p_expr[1] = I 
self.p_expr[0] = cancel(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_v[0] = Symbol('i',positive=True) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[1] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[3] 
self.p_c[2] = Integer(5) 
self.p_c[0] = Integer(9) 
self.p_v[3] = Symbol('k',positive=True) 
self.p_v[2] = Symbol('y') 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[0])) 
self.p_c[3] = Integer(8) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[3] = factorial(self.p_expr[1]) 
self.p_expr[1] = asin(self.p_expr[3]) 
