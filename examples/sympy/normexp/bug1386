self.p_v[2] = Symbol('c') 
self.p_c[1] = Integer(4) 
self.p_v[0] = Symbol('z') 
self.p_v[3] = Symbol('j',positive=True) 
self.p_expr[0] = self.p_c[1] 
self.p_c[0] = Integer(0) 
self.p_term[2] = self.p_c[0] * self.p_v[2] ** self.p_c[0] 
self.p_expr[1] = tan(self.p_expr[0]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_v[1] = Symbol('d') 
self.p_expr[2] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = apart(self.p_expr[3]) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[2] = expand_func(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2].doit() 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[3] = logcombine(self.p_expr[3]) 
self.p_expr[0] = sin(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
