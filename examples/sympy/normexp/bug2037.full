self.p_c[3] = Integer(8) 
self.p_v[2] = Symbol('c') 
self.p_v[1] = Symbol('i',positive=True) 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[3]) 
self.p_c[3] = Integer(4) 
self.p_expr[3] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = sqrt(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_c[2] = Integer(1) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_c[1] = Integer(5) 
self.p_expr[1] = combsimp(self.p_expr[1]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[1] = self.p_c[3] 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[2] = trigsimp(self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[2])) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[3] = tan(self.p_expr[3]) 
self.p_expr[3] = expand_log(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
