self.p_v[1] = Symbol('x') 
self.p_v[0] = Symbol('c') 
self.p_c[2] = Integer(8) 
self.p_expr[2] = pi 
self.p_expr[1] = Rational(self.p_c[2],self.p_c[2]) 
self.p_expr[3] = cancel(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[3].evalf() 
self.p_expr[1] = E 
self.p_expr[0] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[1] = expand(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = expand_trig(self.p_expr[2]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_c[3] = Integer(5) 
self.p_term[1] = self.p_c[3] * self.p_v[1] ** self.p_c[3] 
self.p_expr[3] = self.p_expr[2] * self.p_expr[3] 
self.p_c[3] = Integer(0) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_v[1] = Symbol('y') 
self.p_expr[3] = simplify(self.p_expr[3]) 
self.p_expr[3] = expand_trig(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[1] = trigsimp(self.p_expr[0]) 
self.p_c[2] = Integer(6) 
self.p_expr[0] = expand_func(self.p_expr[3]) 
self.p_expr[3] = sqrt(self.p_expr[0]) 
self.p_c[1] = Integer(2) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[1])) 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
