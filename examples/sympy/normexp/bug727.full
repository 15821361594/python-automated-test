self.p_c[0] = Integer(3) 
self.p_v[2] = Symbol('c') 
self.p_c[3] = Integer(1) 
self.p_expr[2] = E 
self.p_term[0] = self.p_c[0] * self.p_v[2] ** self.p_c[0] 
self.p_c[0] = Integer(2) 
self.p_term[3] = self.p_c[3] * self.p_v[2] ** self.p_c[3] 
self.p_poly[3] = self.p_term[3] + self.p_term[0] 
self.p_v[3] = Symbol('z') 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = atan(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
