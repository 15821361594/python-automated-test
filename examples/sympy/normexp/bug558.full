self.p_c[2] = Integer(7) 
self.p_c[0] = Integer(5) 
self.p_v[2] = Symbol('g',positive=True) 
self.p_v[3] = Symbol('l',positive=True) 
self.p_term[0] = self.p_c[0] * self.p_v[2] ** self.p_c[2] 
self.p_expr[1] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[0] = cancel(self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[0])) 
self.p_expr[2] = sqrt(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = expand_power_base(self.p_expr[0]) 
self.p_poly[1] = self.p_term[0] 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = tan(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] * self.p_expr[3] 
self.p_c[0] = Integer(10) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_c[2] = Integer(1) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_v[2] = Symbol('b') 
self.p_term[2] = self.p_c[2] * self.p_v[3] ** self.p_c[0] 
self.p_c[2] = Integer(8) 
self.p_poly[3] = self.p_term[2] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
