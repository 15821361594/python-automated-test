self.p_expr[3] = E 
self.p_expr[1] = I 
self.p_expr[0] = expand_power_base(self.p_expr[3]) 
self.p_expr[2] = apart(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[1] = self.p_expr[3] * self.p_expr[0] 
self.p_c[1] = Integer(7) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_v[0] = Symbol('e',positive=True) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = combsimp(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[0] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[3] = expand(self.p_expr[0],force=True) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[2] = logcombine(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0].doit() 
self.p_expr[0] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[2] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = trigsimp(self.p_expr[2]) 
self.p_expr[3] = apart(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
self.p_v[1] = Symbol('e',positive=True) 
self.p_expr[3] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = Rational(self.p_c[1],self.p_c[1]) 
self.p_expr[0] = expand_power_base(self.p_expr[0]) 
self.p_expr[1].evalf() 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = sin(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[3] = asin(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[0]) 
