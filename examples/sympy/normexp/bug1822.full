self.p_v[2] = Symbol('f',positive=True) 
self.p_c[0] = Integer(4) 
self.p_v[1] = Symbol('y') 
self.p_expr[3] = self.p_c[0] 
self.p_expr[0] = factorial(self.p_expr[3]) 
self.p_expr[2] = atan(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[0] 
self.p_c[0] = Integer(0) 
self.p_expr[0] = factorial(self.p_expr[3]) 
self.p_c[2] = Integer(8) 
self.p_expr[3] = apart(self.p_expr[3]) 
self.p_expr[1] = atan(self.p_expr[2]) 
self.p_expr[3] = simplify(self.p_expr[1]) 
self.p_v[2] = Symbol('e',positive=True) 
self.p_expr[1] = expand(self.p_expr[0],force=True) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[2])) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[2] = simplify(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[2])) 
self.p_c[2] = Integer(2) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[0] 
self.p_term[2] = self.p_c[2] * self.p_v[2] ** self.p_c[0] 
self.p_term[0] = self.p_c[2] * self.p_v[1] ** self.p_c[2] 
self.p_expr[1] = apart(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[3]) 
self.p_poly[1] = self.p_term[0] 
self.p_v[2] = Symbol('h',positive=True) 
self.p_expr[0] = expand_func(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[1] 
