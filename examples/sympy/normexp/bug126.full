self.p_c[2] = Integer(4) 
self.p_c[0] = Integer(4) 
self.p_v[2] = Symbol('a') 
self.p_v[0] = Symbol('a') 
self.p_expr[1] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[0] = Rational(self.p_c[2],self.p_c[0]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[2],self.p_c[2],self.p_c[0])) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1].doit() 
self.p_term[2] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_expr[2] = self.p_expr[3] - self.p_expr[1] 
self.p_v[0] = Symbol('e',positive=True) 
self.p_term[3] = self.p_c[0] * self.p_v[0] ** self.p_c[2] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[1].evalf() 
self.p_expr[0] = self.p_expr[0] / self.p_expr[2] 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = apart(self.p_expr[1]) 
self.p_expr[3] = expand_func(self.p_expr[0]) 
self.p_poly[2] = self.p_term[3] 
self.p_v[2] = Symbol('x') 
self.p_expr[0] = atan(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3].doit() 
self.p_expr[0] = combsimp(self.p_expr[1]) 
self.p_expr[3] = factor(self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
