self.p_expr[3] = E 
self.p_v[1] = Symbol('i',positive=True) 
self.p_expr[2] = logcombine(self.p_expr[3]) 
self.p_expr[0] = expand_power_exp(self.p_expr[3]) 
self.p_expr[1] = sin(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[3] = atan(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[0] 
self.p_expr[1] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].doit() 
self.p_expr[3] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[1] = expand(self.p_expr[1],force=True) 
self.p_expr[0] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = expand_power_base(self.p_expr[1]) 
self.p_expr[3] = expand_func(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[0].evalf() 
self.p_expr[2] = powdenest(self.p_expr[2]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_v[2] = Symbol('e',positive=True) 
self.p_expr[3] = sin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] * self.p_expr[0] 
self.p_v[3] = Symbol('x') 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[3] = E 
self.p_expr[2] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[3] = sin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[0] = cancel(self.p_expr[0]) 
self.p_expr[0] = combsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[2] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = expand(self.p_expr[1]) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = tan(self.p_expr[0]) 
self.p_c[2] = Integer(10) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[0] = acos(self.p_expr[2]) 
self.p_expr[1] = tan(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[2] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = expand(self.p_expr[3],force=True) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[3] 
