self.p_v[0] = Symbol('d') 
self.p_c[2] = Integer(8) 
self.p_c[0] = Integer(7) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[1] = pi 
self.p_v[1] = Symbol('a') 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[2])) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[3] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = trigsimp(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[1] 
self.p_expr[1] = acos(self.p_expr[1]) 
self.p_expr[3] = sin(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[0],self.p_c[2])) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[0]) 
self.p_c[0] = Integer(3) 
self.p_expr[0] = asin(self.p_expr[3]) 
self.p_expr[2] = pi 
self.p_expr[3] = self.p_expr[0] + self.p_expr[2] 
self.p_term[0] = self.p_c[2] * self.p_v[1] ** self.p_c[0] 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = powdenest(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[2] = self.p_expr[0].doit() 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[0])) 
self.p_expr[2] = apart(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[2] % self.p_expr[3] 
