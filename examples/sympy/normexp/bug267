self.p_v[1] = Symbol('f',positive=True) 
self.p_c[1] = Integer(1) 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[3] = self.p_v[0] 
self.p_expr[2] = atan(self.p_expr[3]) 
self.p_expr[1] = atan(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[2] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[3]) 
self.p_v[0] = Symbol('d') 
self.p_expr[0].evalf() 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = Sum(self.p_expr[0],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = powsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[0] 
self.p_expr[1] = expand(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_c[2] = Integer(5) 
self.p_expr[2] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[1])) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = logcombine(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[2] 
self.p_c[2] = Integer(6) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[1])) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[1])) 
self.p_c[2] = Integer(0) 
self.p_expr[0] = expand_power_base(self.p_expr[3]) 
self.p_expr[1] = tan(self.p_expr[3]) 
self.p_v[1] = Symbol('x') 
self.p_expr[3] = expand_power_base(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[1] = cos(self.p_expr[1]) 
