self.p_v[3] = Symbol('z') 
self.p_c[2] = Integer(8) 
self.p_c[0] = Integer(4) 
self.p_term[0] = self.p_c[0] * self.p_v[3] ** self.p_c[0] 
self.p_c[0] = Integer(9) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_poly[1] = self.p_term[0] + self.p_term[0] 
self.p_c[1] = Integer(10) 
self.p_expr[3] = Rational(self.p_c[0],self.p_c[0]) 
self.p_term[0] = self.p_c[0] * self.p_v[2] ** self.p_c[0] 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = logcombine(self.p_expr[3]) 
self.p_expr[2] = trigsimp(self.p_expr[1]) 
self.p_v[3] = Symbol('y') 
self.p_expr[3] = sqrt(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[1],self.p_c[1],self.p_c[0])) 
self.p_c[3] = Integer(4) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[0] 
