self.p_c[1] = Integer(7) 
self.p_v[0] = Symbol('e',positive=True) 
self.p_v[1] = Symbol('z') 
self.p_c[3] = Integer(1) 
self.p_expr[2] = Rational(self.p_c[3],self.p_c[1]) 
self.p_expr[3] = expand_power_exp(self.p_expr[2]) 
self.p_expr[1] = logcombine(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[3] = E 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
self.p_expr[3] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = asin(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_term[0] = self.p_c[3] * self.p_v[0] ** self.p_c[1] 
self.p_expr[2] = tan(self.p_expr[1]) 
self.p_poly[1] = self.p_term[0] 
self.p_expr[0] = self.p_expr[2].doit() 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = Rational(self.p_c[3],self.p_c[3]) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[3] 
