self.p_v[0] = Symbol('j',positive=True) 
self.p_c[0] = Integer(9) 
self.p_expr[0] = pi 
self.p_c[3] = Integer(1) 
self.p_v[1] = Symbol('k',positive=True) 
self.p_term[2] = self.p_c[3] * self.p_v[1] ** self.p_c[0] 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[0])) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_v[0] = Symbol('e',positive=True) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_c[0] = Integer(10) 
self.p_expr[3] = cos(self.p_expr[3]) 
self.p_expr[0] = simplify(self.p_expr[3]) 
self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[3] = expand_power_base(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = asin(self.p_expr[2]) 
self.p_v[3] = Symbol('a') 
self.p_expr[2] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] + self.p_expr[1] 
self.p_term[0] = self.p_c[3] * self.p_v[1] ** self.p_c[3] 
self.p_expr[1] = self.p_expr[0] % self.p_expr[1] 
