self.p_c[0] = Integer(1) 
self.p_c[2] = Integer(1) 
self.p_expr[2] = Rational(self.p_c[0],self.p_c[2]) 
self.p_c[3] = Integer(5) 
self.p_expr[1] = powdenest(self.p_expr[2]) 
self.p_expr[3] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[3] = asin(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = powsimp(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = expand(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] / self.p_expr[1] 
self.p_expr[3] = factorial(self.p_expr[3]) 
self.p_expr[2] = apart(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[1].evalf() 
self.p_expr[3] = self.p_expr[3] + self.p_expr[3] 
self.p_c[0] = Integer(6) 
self.p_expr[3] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[2].doit() 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[0] = expand_power_base(self.p_expr[2]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = factorial(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] % self.p_expr[2] 
