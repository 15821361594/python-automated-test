self.p_expr[2] = E 
self.p_c[3] = Integer(8) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[2] = acos(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[2] 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = E 
self.p_v[3] = Symbol('g',positive=True) 
self.p_c[2] = Integer(6) 
self.p_expr[0] = atan(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[2])) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[3])) 
self.p_expr[0] = expand(self.p_expr[2],force=True) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[2])) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[1] 
self.p_expr[1] = self.p_v[3] 
self.p_v[3] = Symbol('x') 
self.p_expr[0] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[2] = factor(self.p_expr[0]) 
self.p_expr[3] = tan(self.p_expr[0]) 
self.p_term[1] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
