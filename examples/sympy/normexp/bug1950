self.p_c[1] = Integer(6) 
self.p_expr[2] = I 
self.p_v[3] = Symbol('g',positive=True) 
self.p_expr[3] = logcombine(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[2] 
self.p_expr[1] = factor(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].doit() 
self.p_expr[2] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[2] = collect(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = expand_trig(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[3] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[0] = acos(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[3]) 
self.p_v[2] = Symbol('z') 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[1]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = sin(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = logcombine(self.p_expr[3]) 
self.p_c[0] = Integer(6) 
self.p_v[1] = Symbol('f',positive=True) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_c[2] = Integer(9) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[1],self.p_c[2])) 
self.p_expr[3] = acos(self.p_expr[1]) 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
