self.p_c[3] = Integer(1) 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[1] = I 
self.p_v[0] = Symbol('h',positive=True) 
self.p_expr[0] = powdenest(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[0] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[2] = self.p_expr[2] + self.p_expr[3] 
self.p_c[3] = Integer(8) 
self.p_expr[1] = expand_log(self.p_expr[1]) 
self.p_expr[1] = expand_power_base(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1].doit() 
self.p_expr[1] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[1] = factorial(self.p_expr[2]) 
self.p_expr[0] = expand_trig(self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[0]) 
self.p_expr[2] = expand(self.p_expr[1],force=True) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_c[1] = Integer(10) 
self.p_expr[0] = sqrt(self.p_expr[1]) 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
