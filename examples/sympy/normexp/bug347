self.p_v[1] = Symbol('x') 
self.p_v[2] = Symbol('f',positive=True) 
self.p_c[0] = Integer(10) 
self.p_c[1] = Integer(9) 
self.p_expr[2] = Rational(self.p_c[1],self.p_c[0]) 
self.p_v[3] = Symbol('g',positive=True) 
self.p_term[2] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_expr[3] = expand(self.p_expr[2],force=True) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[0] = self.p_c[1] 
self.p_v[0] = Symbol('j',positive=True) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[0])) 
self.p_term[1] = self.p_c[0] * self.p_v[1] ** self.p_c[0] 
self.p_expr[0] = expand(self.p_expr[0]) 
self.p_expr[0] = expand_func(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = factor(self.p_expr[3]) 
self.p_expr[3] = self.p_v[3] 
self.p_term[0] = self.p_c[1] * self.p_v[2] ** self.p_c[0] 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_v[2] = Symbol('h',positive=True) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[1] 
self.p_expr[1] = sqrt(self.p_expr[0]) 
self.p_poly[0] = self.p_term[2] 
self.p_term[2] = self.p_c[0] * self.p_v[0] ** self.p_c[1] 
self.p_expr[0] = self.p_expr[1] % self.p_expr[0] 
