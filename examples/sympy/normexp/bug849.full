self.p_c[0] = Integer(10) 
self.p_c[2] = Integer(7) 
self.p_c[3] = Integer(1) 
self.p_v[3] = Symbol('y') 
self.p_expr[0] = Rational(self.p_c[2],self.p_c[0]) 
self.p_expr[1] = simplify(self.p_expr[0]) 
self.p_expr[2] = tan(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[2] 
self.p_expr[3] = Rational(self.p_c[3],self.p_c[3]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[3] 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[3] = expand_log(self.p_expr[3]) 
self.p_c[0] = Integer(5) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = simplify(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1].doit() 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_c[3] = Integer(9) 
self.p_expr[1] = acos(self.p_expr[0]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[3],self.p_c[2])) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[3] = acos(self.p_expr[3]) 
self.p_expr[2] = expand_power_exp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[0] 
