self.p_v[2] = Symbol('e',positive=True) 
self.p_c[0] = Integer(1) 
self.p_c[2] = Integer(4) 
self.p_expr[0] = Rational(self.p_c[2],self.p_c[0]) 
self.p_expr[2] = combsimp(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[1] = acos(self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = atan(self.p_expr[1]) 
self.p_term[0] = self.p_c[0] * self.p_v[2] ** self.p_c[2] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] - self.p_expr[0] 
self.p_expr[0] = simplify(self.p_expr[1]) 
self.p_expr[2] = self.p_v[2] 
self.p_expr[1] = combsimp(self.p_expr[1]) 
self.p_expr[1] = cos(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[2] = expand_power_exp(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
