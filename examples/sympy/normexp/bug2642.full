self.p_v[3] = Symbol('x') 
self.p_v[0] = Symbol('d') 
self.p_c[1] = Integer(1) 
self.p_expr[3] = pi 
self.p_c[0] = Integer(1) 
self.p_expr[0] = pi 
self.p_c[2] = Integer(2) 
self.p_expr[1] = factorial(self.p_expr[3]) 
self.p_expr[2] = cancel(self.p_expr[0]) 
self.p_expr[3] = expand_func(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[1] / self.p_expr[3] 
self.p_expr[1] = Rational(self.p_c[2],self.p_c[0]) 
self.p_expr[3] = atan(self.p_expr[1]) 
self.p_expr[1] = expand_trig(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[2])) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[1])) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[3] = factorial(self.p_expr[0]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[2],self.p_c[1])) 
self.p_expr[1] = Rational(self.p_c[0],self.p_c[1]) 
self.p_c[0] = Integer(10) 
self.p_c[3] = Integer(4) 
self.p_v[0] = Symbol('l',positive=True) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[0],self.p_c[1],self.p_c[3])) 
self.p_expr[2] = tan(self.p_expr[2]) 
self.p_expr[2] = acos(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[0],self.p_c[2],self.p_c[0])) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[2] 
