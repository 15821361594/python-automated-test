self.p_c[3] = Integer(8) 
self.p_expr[1] = pi 
self.p_expr[2] = apart(self.p_expr[1]) 
self.p_expr[0] = sqrt(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[2] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = expand_power_exp(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2].doit() 
self.p_expr[1] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[1] = tan(self.p_expr[0]) 
self.p_v[2] = Symbol('i',positive=True) 
self.p_expr[2] = factorial(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[3] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[0] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[1] = combsimp(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1].doit() 
self.p_expr[3] = apart(self.p_expr[1]) 
self.p_expr[1] = sqrt(self.p_expr[1]) 
self.p_expr[1] = expand(self.p_expr[0],force=True) 
self.p_expr[0] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[0] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = sqrt(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[2] = expand(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[3] = asin(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = logcombine(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = cos(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[0] = atan(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[0] 
