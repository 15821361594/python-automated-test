self.p_expr[0] = I 
self.p_expr[3] = I 
self.p_v[0] = Symbol('f',positive=True) 
self.p_expr[1] = sin(self.p_expr[3]) 
self.p_expr[2] = expand_log(self.p_expr[3]) 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[2] = self.p_expr[1] * self.p_expr[3] 
self.p_expr[1] = tan(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[2] = self.p_expr[2].doit() 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = expand_log(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[0] 
self.p_expr[1] = expand_trig(self.p_expr[0]) 
self.p_expr[0] = atan(self.p_expr[3]) 
self.p_expr[2] = expand_power_exp(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[3] = expand_func(self.p_expr[1]) 
self.p_c[0] = Integer(0) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[1] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2].doit() 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[0]) 
self.p_expr[2] = expand_trig(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = cos(self.p_expr[0]) 
self.p_expr[0] = trigsimp(self.p_expr[0]) 
