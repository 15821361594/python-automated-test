self.p_v[3] = Symbol('h',positive=True) 
self.p_expr[1] = self.p_v[3] 
self.p_v[2] = Symbol('f',positive=True) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_c[3] = Integer(6) 
self.p_v[0] = Symbol('h',positive=True) 
self.p_c[0] = Integer(3) 
self.p_v[3] = Symbol('c') 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = powsimp(self.p_expr[3]) 
self.p_expr[2] = Sum(self.p_expr[1],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = logcombine(self.p_expr[2]) 
self.p_expr[2] = expand_log(self.p_expr[2]) 
self.p_expr[3] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_c[3] = Integer(4) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = factor(self.p_expr[1]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = expand_func(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_v[1] = Symbol('g',positive=True) 
self.p_c[2] = Integer(7) 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_term[2] = self.p_c[2] * self.p_v[3] ** self.p_c[2] 
self.p_expr[3] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[3],self.p_c[0])) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[3] - self.p_expr[3] 
self.p_expr[0] = trigsimp(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[3])) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[3].evalf() 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[2])) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = expand_func(self.p_expr[0]) 
self.p_expr[0] = logcombine(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[0])) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[3])) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[0])) 
self.p_term[3] = self.p_c[2] * self.p_v[0] ** self.p_c[2] 
self.p_expr[0] = self.p_expr[1] / self.p_expr[3] 
self.p_term[1] = self.p_c[3] * self.p_v[3] ** self.p_c[2] 
self.p_expr[3] = sqrt(self.p_expr[3]) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[0],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[2] 
