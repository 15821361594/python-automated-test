self.p_v[1] = Symbol('x') 
self.p_v[2] = Symbol('j',positive=True) 
self.p_expr[2] = I 
self.p_expr[1] = powsimp(self.p_expr[2]) 
self.p_expr[2] = powsimp(self.p_expr[2]) 
self.p_expr[3] = collect(self.p_expr[1],self.p_expr[1]) 
self.p_expr[0] = expand_log(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[2] = combsimp(self.p_expr[0]) 
self.p_c[2] = Integer(9) 
self.p_expr[0] = expand_power_base(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[3] * self.p_expr[1] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = tan(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[0] = factorial(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[1] - self.p_expr[3] 
self.p_c[3] = Integer(2) 
self.p_expr[1] = self.p_expr[0] ** self.p_expr[3] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[3] = powsimp(self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[1] = Product(self.p_expr[3],(self.p_v[1],self.p_c[3],self.p_c[2])) 
self.p_expr[3] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = simplify(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[3]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_expr[2] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[3] = cancel(self.p_expr[0]) 
self.p_expr[0] = acos(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] % self.p_expr[3] 
