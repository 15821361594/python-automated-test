self.p_v[1] = Symbol('d') 
self.p_c[3] = Integer(7) 
self.p_expr[0] = self.p_c[3] 
self.p_expr[2] = I 
self.p_expr[1] = self.p_expr[2] + self.p_expr[0] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = I 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = simplify(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[1] = expand_power_base(self.p_expr[0]) 
self.p_expr[3] = expand(self.p_expr[3],force=True) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = factor(self.p_expr[2]) 
self.p_expr[1] = expand_trig(self.p_expr[1]) 
self.p_expr[1] = powsimp(self.p_expr[1]) 
self.p_expr[3] = sin(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[3] = expand_power_exp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[1] = cancel(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[0] 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[1] = self.p_expr[1] + self.p_expr[2] 
self.p_expr[0] = expand(self.p_expr[1],force=True) 
self.p_expr[3] = I 
self.p_expr[1] = apart(self.p_expr[0]) 
self.p_c[3] = Integer(1) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[2]) 
self.p_c[1] = Integer(1) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = Rational(self.p_c[1],self.p_c[3]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[1] 
self.p_expr[1] = expand_func(self.p_expr[1]) 
self.p_expr[1] = factorial(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = expand(self.p_expr[1],force=True) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0].evalf() 
self.p_expr[2] = self.p_expr[1] % self.p_expr[2] 
