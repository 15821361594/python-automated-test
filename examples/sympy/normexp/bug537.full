self.p_v[1] = Symbol('d') 
self.p_v[3] = Symbol('l',positive=True) 
self.p_expr[2] = self.p_v[1] 
self.p_c[2] = Integer(5) 
self.p_expr[1] = atan(self.p_expr[2]) 
self.p_expr[3] = combsimp(self.p_expr[2]) 
self.p_expr[2] = I 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[0] = self.p_expr[1] * self.p_expr[2] 
self.p_expr[2] = sqrt(self.p_expr[3]) 
self.p_expr[3] = combsimp(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = atan(self.p_expr[2]) 
self.p_c[3] = Integer(0) 
self.p_expr[2] = factor(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2] / self.p_expr[2] 
self.p_v[2] = Symbol('f',positive=True) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = logcombine(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[3],self.p_c[3])) 
self.p_expr[2] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] % self.p_expr[3] 
self.p_expr[1] = powdenest(self.p_expr[3]) 
self.p_expr[3] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = atan(self.p_expr[3]) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[3] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[1] = sin(self.p_expr[2]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[2],self.p_c[3])) 
self.p_term[0] = self.p_c[2] * self.p_v[2] ** self.p_c[2] 
self.p_expr[2] = self.p_expr[2] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[3] 
