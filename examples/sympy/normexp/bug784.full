self.p_v[2] = Symbol('c') 
self.p_c[1] = Integer(0) 
self.p_c[2] = Integer(7) 
self.p_expr[1] = pi 
self.p_v[1] = Symbol('x') 
self.p_expr[3] = self.p_c[1] 
self.p_expr[2] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] - self.p_expr[2] 
self.p_expr[1] = expand(self.p_expr[2]) 
self.p_expr[2] = cos(self.p_expr[2]) 
self.p_expr[2] = combsimp(self.p_expr[1]) 
self.p_expr[0] = factorial(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[1] = I 
self.p_expr[2].evalf() 
self.p_expr[2] = Sum(self.p_expr[2],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = Product(self.p_expr[2],(self.p_v[1],self.p_c[1],self.p_c[1])) 
self.p_expr[1].evalf() 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[2],self.p_c[2])) 
self.p_expr[0] = asin(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[1] % self.p_expr[0] 
