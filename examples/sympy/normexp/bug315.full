self.p_v[0] = Symbol('c') 
self.p_v[1] = Symbol('h',positive=True) 
self.p_v[3] = Symbol('e',positive=True) 
self.p_expr[3] = E 
self.p_v[2] = Symbol('j',positive=True) 
self.p_expr[2] = simplify(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] * self.p_expr[3] 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = pi 
self.p_expr[2] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = combsimp(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[2] = self.p_expr[1] * self.p_expr[1] 
self.p_expr[1] = combsimp(self.p_expr[1]) 
self.p_expr[1] = simplify(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[3] = self.p_expr[3] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] + self.p_expr[2] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] % self.p_expr[0] 
self.p_c[0] = Integer(6) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] - self.p_expr[0] 
self.p_expr[0] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[0] = powdenest(self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = factorial(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[2] - self.p_expr[1] 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = cos(self.p_expr[1]) 
self.p_c[0] = Integer(2) 
self.p_expr[1] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = atan(self.p_expr[2]) 
self.p_expr[0] = tan(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[1] 
self.p_expr[3] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = cancel(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[3] % self.p_expr[1] 
