self.p_expr[0] = I 
self.p_v[3] = Symbol('x') 
self.p_expr[3] = I 
self.p_c[3] = Integer(5) 
self.p_expr[1] = atan(self.p_expr[0]) 
self.p_expr[0] = expand_trig(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[1] + self.p_expr[3] 
self.p_expr[1] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] + self.p_expr[1] 
self.p_expr[3] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0] ** self.p_expr[0] 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[2] = logcombine(self.p_expr[2]) 
self.p_expr[0] = sqrt(self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_v[0] = Symbol('y') 
self.p_expr[2] = expand_trig(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[1] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[0] = powdenest(self.p_expr[2]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[2] = tan(self.p_expr[1]) 
self.p_expr[1] = cancel(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[3] = sqrt(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[2] % self.p_expr[1] 
self.p_expr[2] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[1] 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[0],self.p_c[3],self.p_c[3])) 
self.p_expr[0] = self.p_expr[0] + self.p_expr[3] 
self.p_expr[0] = self.p_expr[2] % self.p_expr[1] 
