self.p_c[0] = Integer(8) 
self.p_v[0] = Symbol('l',positive=True) 
self.p_v[1] = Symbol('l',positive=True) 
self.p_expr[2] = I 
self.p_v[2] = Symbol('a') 
self.p_c[1] = Integer(5) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[1])) 
self.p_expr[3] = expand_power_base(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = atan(self.p_expr[3]) 
self.p_expr[1] = factor(self.p_expr[2]) 
self.p_expr[3] = combsimp(self.p_expr[3]) 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = powsimp(self.p_expr[2]) 
self.p_expr[2] = powdenest(self.p_expr[3]) 
self.p_expr[3] = sqrt(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[1] = self.p_expr[0] * self.p_expr[3] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[1],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = cos(self.p_expr[1]) 
self.p_expr[0] = Sum(self.p_expr[1],(self.p_v[0],self.p_c[0],self.p_c[1])) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[1],(self.p_v[1],self.p_c[1],self.p_c[0])) 
self.p_expr[0] = factor(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[1] % self.p_expr[1] 
self.p_expr[3] = self.p_expr[0] % self.p_expr[3] 
self.p_expr[3] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[1] = self.p_expr[0].doit() 
self.p_v[1] = Symbol('z') 
self.p_expr[0] = trigsimp(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] * self.p_expr[0] 
self.p_expr[0] = self.p_expr[1] + self.p_expr[1] 
self.p_expr[1] = expand(self.p_expr[0],force=True) 
self.p_expr[0] = self.p_expr[2] % self.p_expr[0] 
