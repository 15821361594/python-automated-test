self.p_v[2] = Symbol('i',positive=True) 
self.p_c[3] = Integer(2) 
self.p_expr[0] = pi 
self.p_v[0] = Symbol('c') 
self.p_expr[1] = expand_func(self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[1] = combsimp(self.p_expr[0]) 
self.p_term[3] = self.p_c[3] * self.p_v[2] ** self.p_c[3] 
self.p_expr[0] = apart(self.p_expr[0]) 
self.p_expr[2] = self.p_expr[1] ** self.p_expr[1] 
self.p_expr[0] = self.p_v[2] 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = expand_trig(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_v[3] = Symbol('c') 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[0] 
self.p_expr[2] = simplify(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[2] = self.p_expr[0] - self.p_expr[2] 
self.p_expr[1] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[0] 
self.p_expr[1] = Product(self.p_expr[2],(self.p_v[3],self.p_c[3],self.p_c[3])) 
self.p_c[1] = Integer(5) 
self.p_expr[0] = self.p_expr[3] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[0] = self.p_expr[1] % self.p_expr[3] 
