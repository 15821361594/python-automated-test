self.p_v[1] = Symbol('l',positive=True) 
self.p_v[3] = Symbol('e',positive=True) 
self.p_v[0] = Symbol('b') 
self.p_c[0] = Integer(2) 
self.p_expr[3] = E 
self.p_expr[0] = Rational(self.p_c[0],self.p_c[0]) 
self.p_expr[1] = cancel(self.p_expr[0]) 
self.p_expr[2] = combsimp(self.p_expr[3]) 
self.p_expr[3] = simplify(self.p_expr[3]) 
self.p_expr[0] = trigsimp(self.p_expr[1]) 
self.p_expr[3] = factor(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[3] = sqrt(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[1] = acos(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[2] = expand_power_base(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = Product(self.p_expr[3],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[3] = expand(self.p_expr[3]) 
self.p_expr[3] = simplify(self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[1] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[1] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[0] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] % self.p_expr[3] 
