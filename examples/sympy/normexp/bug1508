self.p_v[2] = Symbol('j',positive=True) 
self.p_c[1] = Integer(1) 
self.p_expr[2] = I 
self.p_expr[1] = self.p_expr[2] * self.p_expr[2] 
self.p_expr[0] = Product(self.p_expr[1],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = acos(self.p_expr[2]) 
self.p_expr[2] = I 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[0] 
self.p_expr[3] = expand_trig(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].doit() 
self.p_expr[0] = factor(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[1]) 
self.p_c[0] = Integer(5) 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_v[1] = Symbol('x') 
self.p_expr[0] = factorial(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[3] = factorial(self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[0] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[0],self.p_c[1])) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[2] = trigsimp(self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] / self.p_expr[3] 
self.p_expr[0] = self.p_expr[1] ** self.p_expr[3] 
self.p_expr[3] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[1] = Sum(self.p_expr[0],(self.p_v[2],self.p_c[1],self.p_c[1])) 
self.p_expr[0] = collect(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = factorial(self.p_expr[0]) 
self.p_expr[2] = expand(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_c[2] = Integer(10) 
self.p_expr[2].evalf() 
