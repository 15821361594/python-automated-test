self.p_c[0] = Integer(9) 
self.p_v[0] = Symbol('z') 
self.p_v[2] = Symbol('g',positive=True) 
self.p_expr[0] = E 
self.p_expr[2] = trigsimp(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[2] = self.p_expr[3] * self.p_expr[0] 
self.p_v[1] = Symbol('g',positive=True) 
self.p_expr[3] = self.p_expr[0] / self.p_expr[0] 
self.p_expr[0] = atan(self.p_expr[2]) 
self.p_v[3] = Symbol('z') 
self.p_term[2] = self.p_c[0] * self.p_v[3] ** self.p_c[0] 
self.p_poly[3] = self.p_term[2] 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[3]) 
self.p_c[3] = Integer(1) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[3] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[3].evalf() 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_expr[3] = self.p_expr[3] % self.p_expr[2] 
