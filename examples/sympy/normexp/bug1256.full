self.p_v[1] = Symbol('c') 
self.p_c[3] = Integer(8) 
self.p_c[0] = Integer(3) 
self.p_expr[1] = self.p_c[0] 
self.p_expr[2] = Product(self.p_expr[1],(self.p_v[1],self.p_c[0],self.p_c[3])) 
self.p_expr[1] = apart(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2].doit() 
self.p_expr[1] = acos(self.p_expr[3]) 
self.p_expr[0] = tan(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[0] - self.p_expr[1] 
self.p_expr[1] = atan(self.p_expr[3]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] / self.p_expr[2] 
self.p_expr[2] = simplify(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = expand(self.p_expr[1]) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[2] 
self.p_expr[2] = self.p_expr[2].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[2]) 
self.p_expr[0] = sqrt(self.p_expr[3]) 
self.p_expr[2] = combsimp(self.p_expr[1]) 
self.p_expr[1] = logcombine(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[2] = pi 
self.p_expr[1] = self.p_expr[3] ** self.p_expr[0] 
