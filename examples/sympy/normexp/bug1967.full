self.p_c[0] = Integer(0) 
self.p_c[1] = Integer(3) 
self.p_expr[1] = E 
self.p_v[3] = Symbol('a') 
self.p_expr[3] = Rational(self.p_c[0],self.p_c[1]) 
self.p_expr[2] = sin(self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[1] = logcombine(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3] ** self.p_expr[2] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0] + self.p_expr[0] 
self.p_expr[3] = Product(self.p_expr[2],(self.p_v[3],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[3] 
self.p_expr[1] = powdenest(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[1] = powsimp(self.p_expr[1]) 
self.p_expr[1] = self.p_expr[1] / self.p_expr[0] 
self.p_expr[0] = combsimp(self.p_expr[0]) 
self.p_expr[1] = sqrt(self.p_expr[0]) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = atan(self.p_expr[0]) 
self.p_c[3] = Integer(9) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[3] = self.p_expr[3] % self.p_expr[3] 
self.p_expr[3] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[0] = sin(self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[2],self.p_expr[3]) 
self.p_expr[1] = collect(self.p_expr[0],self.p_expr[3]) 
self.p_expr[3] = factorial(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[1] = self.p_expr[0] % self.p_expr[2] 
self.p_expr[2] = expand_trig(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = trigsimp(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] + self.p_expr[0] 
self.p_expr[0] = sqrt(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[3],self.p_c[1],self.p_c[1])) 
self.p_expr[3] = cancel(self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0] % self.p_expr[2] 
