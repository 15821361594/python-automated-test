self.p_v[2] = Symbol('y') 
self.p_c[0] = Integer(9) 
self.p_c[3] = Integer(6) 
self.p_expr[0] = self.p_c[0] 
self.p_term[0] = self.p_c[0] * self.p_v[2] ** self.p_c[3] 
self.p_c[2] = Integer(4) 
self.p_expr[3] = expand_func(self.p_expr[0]) 
self.p_expr[0] = expand_func(self.p_expr[3]) 
self.p_term[3] = self.p_c[3] * self.p_v[2] ** self.p_c[3] 
self.p_expr[3] = cos(self.p_expr[3]) 
self.p_expr[3] = I 
self.p_poly[3] = self.p_term[0] 
self.p_expr[2] = asin(self.p_expr[0]) 
self.p_expr[0] = apart(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[2])) 
self.p_expr[1] = expand_power_base(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[2] ** self.p_expr[2] 
self.p_expr[2] = self.p_expr[2] / self.p_expr[0] 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[3]) 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = expand_func(self.p_expr[1]) 
self.p_expr[1] = Product(self.p_expr[0],(self.p_v[2],self.p_c[3],self.p_c[2])) 
self.p_term[0] = self.p_c[0] * self.p_v[2] ** self.p_c[3] 
self.p_expr[0] = expand_func(self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[2] / self.p_expr[2] 
self.p_v[3] = Symbol('i',positive=True) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[3] = Product(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[0])) 
self.p_expr[0] = expand_trig(self.p_expr[1]) 
self.p_expr[1] = expand_log(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
