self.p_v[0] = Symbol('l',positive=True) 
self.p_c[0] = Integer(1) 
self.p_expr[3] = self.p_c[0] 
self.p_v[3] = Symbol('f',positive=True) 
self.p_expr[1] = tan(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[1] ** self.p_expr[2] 
self.p_expr[0] = E 
self.p_expr[2] = self.p_expr[1].subs(self.p_expr[3],self.p_expr[3]) 
self.p_expr[3] = self.p_expr[2].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[2] = powdenest(self.p_expr[3]) 
self.p_expr[3] = expand_power_base(self.p_expr[0]) 
self.p_term[3] = self.p_c[0] * self.p_v[0] ** self.p_c[0] 
self.p_poly[0] = self.p_term[3] + self.p_term[3] 
self.p_expr[0] = expand(self.p_expr[2],force=True) 
self.p_expr[2] = Sum(self.p_expr[0],(self.p_v[0],self.p_c[0],self.p_c[0])) 
self.p_expr[0] = asin(self.p_expr[3]) 
self.p_expr[3] = tan(self.p_expr[1]) 
self.p_expr[1] = collect(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[3] - self.p_expr[1] 
self.p_expr[1] = self.p_expr[3].subs(self.p_expr[3],self.p_expr[2]) 
self.p_v[0] = Symbol('d') 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[0] 
