self.p_expr[1] = I 
self.p_v[2] = Symbol('l',positive=True) 
self.p_expr[2] = self.p_expr[1] / self.p_expr[1] 
self.p_v[1] = Symbol('c') 
self.p_c[2] = Integer(5) 
self.p_expr[3] = cos(self.p_expr[2]) 
self.p_term[0] = self.p_c[2] * self.p_v[1] ** self.p_c[2] 
self.p_expr[1] = self.p_expr[1] / self.p_expr[1] 
self.p_expr[0] = powsimp(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[3].doit() 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = tan(self.p_expr[1]) 
self.p_expr[3] = self.p_expr[2] ** self.p_expr[0] 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3].subs(self.p_expr[1],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2] ** self.p_expr[1] 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[2]) 
self.p_expr[0] = self.p_expr[3] * self.p_expr[2] 
self.p_expr[3] = self.p_expr[3] + self.p_expr[1] 
self.p_expr[3] = expand(self.p_expr[2]) 
self.p_expr[1] = Sum(self.p_expr[1],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = self.p_expr[1].doit() 
self.p_expr[1] = apart(self.p_expr[1]) 
self.p_expr[1] = Sum(self.p_expr[3],(self.p_v[1],self.p_c[2],self.p_c[2])) 
self.p_expr[3] = factorial(self.p_expr[2]) 
self.p_expr[2] = collect(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = collect(self.p_expr[1],self.p_expr[2]) 
self.p_expr[1] = self.p_expr[2] * self.p_expr[3] 
self.p_expr[2] = cancel(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] - self.p_expr[2] 
self.p_expr[1] = self.p_expr[2] % self.p_expr[3] 
