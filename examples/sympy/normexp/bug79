self.p_c[1] = Integer(5) 
self.p_c[2] = Integer(9) 
self.p_v[0] = Symbol('g',positive=True) 
self.p_expr[0] = pi 
self.p_expr[3] = cos(self.p_expr[0]) 
self.p_c[0] = Integer(4) 
self.p_expr[1] = simplify(self.p_expr[3]) 
self.p_expr[3] = combsimp(self.p_expr[3]) 
self.p_expr[3] = logcombine(self.p_expr[1]) 
self.p_expr[2] = Product(self.p_expr[3],(self.p_v[0],self.p_c[1],self.p_c[1])) 
self.p_v[3] = Symbol('d') 
self.p_expr[0] = self.p_expr[1] + self.p_expr[3] 
self.p_term[2] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_expr[3] = logcombine(self.p_expr[2]) 
self.p_term[0] = self.p_c[1] * self.p_v[3] ** self.p_c[1] 
self.p_expr[2] = self.p_expr[3] % self.p_expr[0] 
self.p_expr[3] = Sum(self.p_expr[0],(self.p_v[3],self.p_c[2],self.p_c[2])) 
self.p_expr[1] = factorial(self.p_expr[2]) 
self.p_expr[2] = Product(self.p_expr[0],(self.p_v[0],self.p_c[1],self.p_c[2])) 
self.p_expr[0] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[1]) 
self.p_expr[2] = self.p_expr[2] + self.p_expr[1] 
self.p_expr[1] = collect(self.p_expr[3],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[2].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] % self.p_expr[0] 
