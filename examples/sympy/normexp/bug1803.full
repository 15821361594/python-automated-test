self.p_c[3] = Integer(6) 
self.p_c[0] = Integer(4) 
self.p_v[3] = Symbol('a') 
self.p_expr[2] = self.p_c[3] 
self.p_expr[3] = Rational(self.p_c[3],self.p_c[0]) 
self.p_expr[1] = atan(self.p_expr[3]) 
self.p_expr[0] = factor(self.p_expr[3]) 
self.p_v[2] = Symbol('j',positive=True) 
self.p_term[1] = self.p_c[0] * self.p_v[3] ** self.p_c[0] 
self.p_c[3] = Integer(7) 
self.p_expr[3] = factorial(self.p_expr[0]) 
self.p_expr[0] = self.p_expr[1] * self.p_expr[2] 
self.p_v[3] = Symbol('l',positive=True) 
self.p_expr[1] = Sum(self.p_expr[2],(self.p_v[2],self.p_c[0],self.p_c[0])) 
self.p_term[3] = self.p_c[3] * self.p_v[3] ** self.p_c[3] 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[2],self.p_expr[0]) 
self.p_expr[0] = powdenest(self.p_expr[3]) 
self.p_expr[2] = self.p_expr[0].subs(self.p_expr[1],self.p_expr[3]) 
self.p_expr[0] = collect(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = expand_power_exp(self.p_expr[2]) 
self.p_expr[0] = self.p_expr[0] * self.p_expr[2] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
self.p_expr[2] = Sum(self.p_expr[3],(self.p_v[3],self.p_c[3],self.p_c[0])) 
self.p_expr[3] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[0]) 
self.p_expr[0] = Sum(self.p_expr[3],(self.p_v[2],self.p_c[3],self.p_c[0])) 
self.p_expr[1] = self.p_expr[1].subs(self.p_expr[0],self.p_expr[1]) 
self.p_expr[1] = self.p_expr[0].subs(self.p_expr[3],self.p_expr[0]) 
self.p_expr[0] = cancel(self.p_expr[0]) 
self.p_expr[0] = Product(self.p_expr[2],(self.p_v[2],self.p_c[3],self.p_c[3])) 
self.p_expr[3] = self.p_expr[2] - self.p_expr[0] 
self.p_c[0] = Integer(10) 
self.p_expr[2] = self.p_expr[2] * self.p_expr[0] 
self.p_expr[2] = self.p_expr[0] - self.p_expr[3] 
self.p_expr[3] = self.p_c[0] 
self.p_expr[0] = self.p_expr[3] % self.p_expr[2] 
