<@
def newBoard():
    b = {}
    for i in xrange(0,3):
        for j in xrange(0,3):
            b[(i,j)] = "-"
    return b

def printBoard(b):
    print "GAME STATE:"
    for i in xrange(0,3):
        for j in xrange(0,3):
            print b[(i,j)],
        print

def winner(b):
    # horizontal
    for i in xrange(0,3):
        s = b[i,0]
        w = s
        for j in xrange(1,3):
            if b[i,j] != s:
                    w = "-"
                    break
        if w != "-":
            return w
    # vertical
    for i in xrange(0,3):
        s = b[0,i]
        w = s
        for j in xrange(1,3):
            if b[j,i] != s:
                    w = "-"
                    break
        if w != "-":
            return w
    #diagonals
    s1 = b[(0,0)]
    s2 = b[(0,2)]
    w1 = s1
    w2 = s2
    for j in xrange(1,3):
        if b[(j,j)] != s1:
            w1 = "-"
        if b[(j,2-j)] != s2:
            w2 = "-"
    if w1 != "-":
        return w1
    if w2 != "-":
        return w2
    return None

def deadlock(b):
    for i in xrange(0,3):
        for j in xrange(0,3):
            if b[(i,j)] == "-":
                return False
    return True
@>

pool: <board> 1
pool: <turn> 1
pool: <Xx> 1
pool: <Xy> 1
pool: <Ox> 1
pool: <Oy> 1

<board> := newBoard()
<turn> := "X"

<Xx> := <[0..2]>
<Xy> := <[0..2]>
<Ox> := <[0..2]>
<Oy> := <[0..2]>

(~<turn> == "X") and (~<board> [(<Xx>,<Xy>)] == "-") -> ~<board> [(<Xx>,<Xy>)] = "X"; printBoard(~<board>); ~<turn> = "O"
(~<turn> == "O") and (~<board> [(<Ox>,<Oy>)] == "-") -> ~<board> [(<Ox>,<Oy>)] = "O"; printBoard(~<board>); ~<turn> = "X"

deadlock(~<board>) -> print "TIE!  STARTING NEW GAME"; <board> = newBoard()

property: winner(<board>) == None
