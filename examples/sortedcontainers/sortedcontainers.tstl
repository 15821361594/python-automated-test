@from sortedcontainers import *

<@
def sortListAppend(l,i):
    if len(l) == 0:
        l.append(i)
    else:
        if i >= l[-1]:
            l.append(i)
        else:
            raise ValueError("would not be sorted")

def sortListExtend(l,el):
    lcopy = l.copy().extend(el)
    for i in xrange(0,len(lcopy)-1):
        if lcopy[i] > lcopy[i+1]:
            raise ValueError("would not be sorted")
    l.extend(el)

def sortListAdd(l,i):
    l.append(i)
    l.sort()

def sortListMultiply(l,v):
    l *= v
    l.sort()
@>

pool: <list> 5 REF
pool: <plist> 5
pool: <dict> 5 REF
pool: <set> 5 REF

pool: <val> 10
pool: <ival> 10
pool: <sval> 10

<ival> := <[1..20]>
<ival> := <ival> + <ival>
<ival> := <ival> * <ival>
<ival> := <ival> - <ival>
<sval> := <['a'..'z']>
<sval> := <['A'..'Z']>
<sval> := <sval> + <sval>
<val> := <ival>
<val> := <sval>
<val> := None

<list> := SortedList()
<dict> := SortedDict()
<set> := SortedSet()

<list> == <list>
<list> != <list>
<list> > <list>
<list> < <list>
<list> >= <list>
<list> <= <list>

{OverflowError} <list> *= <ival>

<plist> := <list> [<ival> : <ival>]
<list> := SortedList(<plist>)

<list>.count(<val>)

<dict> == <dict>
<dict> != <dict>

<set> == <set>
<set> != <set>

<dict> := <dict>.copy()
<set> := <set>.copy()

<dict>.clear()
<set>.clear()

len(<list>)
len(<dict>)
len(<set>)

repr(<list>)
repr(<dict>)
repr(<set>)

{ValueError} <list>.append(<val>)
{ValueError} <list>.extend(<list>)
<list>.add(<val>)

<dict> [<val>] = <val>

<set>.add(<val>)

<val> in <list>
<val> in <dict>
<val> in <set>

{KeyError} <dict> [<val>]
{KeyError} del <dict> [<val>]

<dict>.get(<val>,None)
<dict>.pop(<val>,None)

{IndexError} <list>.pop(<ival>)
{ValueError} <list>.remove(<val>)
{ValueError} <list>.index(<val>)

{KeyError} <set>.remove(<val>)
<set>.discard(<val>)

reference: SortedList\(\) ==> []
reference: SortedList\((\S+)\) ==> list(\1)
reference: SortedDict\(\) ==> {}
reference: SortedSet\(\) ==> set([])

reference: (\S+list\S+)\.append\((\S+)\) ==> sortListAppend(\1,\2)
reference: (\S+list\S+)\.extend\((\S+)\) ==> sortListExtend(\1,\2)
reference: (\S+list\S+)\.add\((\S+)\) ==> sortListAdd(\1,\2)
reference: (\S+list\S+) \*= (\S+) ==> sortListMultiply(\1,\2)

compare: len
compare: in\
compare: get
compare: pop\(
compare: index
compare: ==
compare: !=
compare: count
#compare: \ <\ 
#compare: \ >\
#compare: \ <=\
#compare: \ >=\ 

