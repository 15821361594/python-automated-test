@import z3

pools:
  <solver> 3
  <model> 3
  <intvar> 3
  <boolvar> 3
  <constraint> 8
  <intconst> 3
  <intexpr> 8
  <boolexpr> 8

actions:

<intconst> := z3.IntVal(<[-20..20]>)

<intvar> := z3.Int(<['A'..'H']>)
<boolvar> := z3.Bool(<['P'..'T']>)

<intexpr> := <intvar>
<intexpr> := -(<intvar>)
<intexpr> := <intconst>
<intexpr> := <intexpr> + <intexpr>
<intexpr> := <intexpr> - <intexpr>
<intexpr> := <intexpr> * <intexpr>
{ZeroDivisionError} <intexpr> := <intexpr> * <intexpr>
{z3.Z3Exception} int -> <intexpr> := z3.simplify(<intexpr>,max_steps=1000)

<boolexpr> := <intexpr> == <intexpr>
<boolexpr> := <intexpr> < <intexpr>
<boolexpr> := <intexpr> > <intexpr>
<boolexpr> := <intexpr> != <intexpr>
<boolexpr> := <intexpr> <= <intexpr>
<boolexpr> := <intexpr> >= <intexpr>
{z3.Z3Exception} <boolexpr> := z3.simplify(<boolexpr>,max_steps=1000)

<constraint> := <boolexpr>
<constraint> := <boolvar>
<constraint> := <boolvar> == <boolexpr>
<constraint> := z3.ForAll(<intvar>,~<constraint>)
<constraint> := z3.Exists(<intvar>,~<constraint>)
<constraint> := ~<constraint> == ~<constraint>
<constraint> := z3.And(~<constraint>,~<constraint>)
<constraint> := z3.Or(~<constraint>,~<constraint>)
<constraint> := z3.Not(~<constraint>)
<constraint> := z3.Implies(~<constraint>,~<constraint>)
{z3.Z3Exception} <constraint> := z3.simplify(~<constraint>,max_steps=1000)


<solver> := z3.Solver(); <solver,1>.set("timeout",120000)

<solver>.check()
~<solver>.push()
{z3.Z3Exception} ~<solver>.pop()
~<solver>.add(<constraint>)

str(<solver,1>.check()) == "sat" -> <model> := <solver>.model()

print "<model,1> = ",<model>
