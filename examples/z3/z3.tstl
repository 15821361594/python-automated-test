@import z3

pool: <solver> 3
pool: <model> 3
pool: <intvar> 4
pool: <boolvar> 3
pool: <formula> 8
pool: <intconst> 3
pool: <intexpr> 8
pool: <boolexpr> 8

<intconst> := <[-20..20]>

<intvar> := z3.Int('A')
<intvar> := z3.Int('B')
<intvar> := z3.Int('C')
<intvar> := z3.Int('D')
<intvar> := z3.Int('E')
<intvar> := z3.Int('F')
<intvar> := z3.Int('G')
<intvar> := z3.Int('H')

<boolvar> := z3.Bool('P')
<boolvar> := z3.Bool('Q')
<boolvar> := z3.Bool('R')

<intexpr> := <intvar>
<intexpr> := -(<intvar>)
<intexpr> := <intconst>
<intexpr> := <intexpr> + <intexpr>
<intexpr> := <intexpr> - <intexpr>
{ZeroDivisionError} <intexpr> := <intexpr> / <intexpr>
<intexpr> := <intexpr> * <intexpr>

<boolexpr> := <intexpr> > <intexpr>
<boolexpr> := <intexpr> < <intexpr>
<boolexpr> := <intexpr> <= <intexpr>
<boolexpr> := <intexpr> >= <intexpr>
<boolexpr> := <intexpr> == <intexpr>

<formula> := <boolexpr>
<formula> := <boolvar>
<formula> := <boolvar> == <boolexpr>
<formula> = z3.And(~<formula>,~<formula>)
<formula> = z3.Or(~<formula>,~<formula>)
<formula> = z3.Not(~<formula>)
<formula> = z3.Implies(~<formula>,~<formula>)

print("CLEARING <solver,1>") ; <solver> := z3.Solver()

print("<solver,1>:", end='') ; print(<solver>.check())
print("<solver,1>: ADDING", <formula,1>) ; ~<solver>.add(<formula>)

str(<solver,1>.check()) == "sat" -> print("<model,1> = <solver,1>.model()") ; <model> := <solver>.model()

print("<model,1> = ", <model>)

